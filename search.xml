<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker开机自动启动,容器自动启动</title>
    <url>/2018/01/24/41b40859d20c.html</url>
    <content><![CDATA[<h2 id="centos7下docker开机自动启动"><a href="#centos7下docker开机自动启动" class="headerlink" title="centos7下docker开机自动启动"></a>centos7下docker开机自动启动</h2><blockquote>
<p>#enable的意思就是激活docker服务开机启动  同样的disenable就是关闭开机启动<br>systemctl enable docker</p>
</blockquote>
<h2 id="docker容器自动启动"><a href="#docker容器自动启动" class="headerlink" title="docker容器自动启动"></a>docker容器自动启动</h2><blockquote>
<p>#docker容器的自动启动是根据docker生命周期来的，如果docker启动或者重启那么将启动容器<br>#也可以在docker run中添加–restart=always<br>docker update –restart=always container_name</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker gitlab邮件服务器配置</title>
    <url>/2018/01/03/8655502e2de5.html</url>
    <content><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><img src="http://upload-images.jianshu.io/upload_images/2414669-0731aee4c5e0edc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gitlab邮件服务配置概览.png"></p>
<h1 id="etc-gitlab-gitlab-rb配置"><a href="#etc-gitlab-gitlab-rb配置" class="headerlink" title="/etc/gitlab/gitlab.rb配置"></a>/etc/gitlab/gitlab.rb配置</h1><blockquote>
<p>gitlab_rails[‘smtp_enable’] = true<br>gitlab_rails[‘smtp_address’] = “smtp.qq.com”<br>gitlab_rails[‘smtp_port’] = 25<br>gitlab_rails[‘smtp_user_name’] = “username”<br>gitlab_rails[‘smtp_password’] = “password”<br>gitlab_rails[‘smtp_domain’] = “qq.com”<br>gitlab_rails[‘smtp_authentication’] = :login<br>gitlab_rails[‘smtp_enable_starttls_auto’] = true</p>
</blockquote>
<h1 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h1><blockquote>
<p>gitlab-ctl reconfigure</p>
</blockquote>
<h1 id="监听25端口-sudo-tcpdump-XX-‘port-25’"><a href="#监听25端口-sudo-tcpdump-XX-‘port-25’" class="headerlink" title="监听25端口 sudo tcpdump -XX ‘port 25’"></a>监听25端口 sudo tcpdump -XX ‘port 25’</h1><blockquote>
<p>为了方便查看问题，最好用tcpdump抓一下包</p>
</blockquote>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>git撤销提交</title>
    <url>/2018/02/11/3573e7d4f089.html</url>
    <content><![CDATA[<h1 id="git如何撤销提交"><a href="#git如何撤销提交" class="headerlink" title="git如何撤销提交"></a>git如何撤销提交</h1><blockquote>
<p>git reset –hard 这个命令可以将你已经add或commit的文件恢复到远程的版本<br>，但不能撤销你没有add或commit的文件即没有tack的文件和文件夹</p>
</blockquote>
<h1 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h1><blockquote>
<p>这是一个可以操作没有被tack的文件和文件夹<br>git clean -n 演习 列出要被操作的文件<br>git clean -df 撤销未tack的文件</p>
</blockquote>
<p><a href="http://blog.csdn.net/leon1741/article/details/54314565">参考链接</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>grep 巧妙用法</title>
    <url>/2018/01/03/79b45aaa5a0f.html</url>
    <content><![CDATA[<h1 id="grep查看配置文件有效信息排除-号显示行号"><a href="#grep查看配置文件有效信息排除-号显示行号" class="headerlink" title="grep查看配置文件有效信息排除#号显示行号"></a>grep查看配置文件有效信息排除#号显示行号</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">排除<span class="comment">#号,注意是egrep</span></span></span><br><span class="line">egrep -nv &#x27;^$|#&#x27; filename</span><br><span class="line"><span class="meta">#</span><span class="bash">设置别名，自定义名为cgrep</span></span><br><span class="line">alias cgrep=&quot;egrep -nv &#x27;^$|#&#x27; &quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">排除<span class="comment">#号</span></span></span><br><span class="line">cgrep filename</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>html css 图片根据宽度中间裁剪显示</title>
    <url>/2018/01/08/b569b45ee56a.html</url>
    <content><![CDATA[<h1 id="根据动态宽度向中间裁剪显示图片"><a href="#根据动态宽度向中间裁剪显示图片" class="headerlink" title="根据动态宽度向中间裁剪显示图片"></a>根据动态宽度向中间裁剪显示图片</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background: url(&quot;https://your_img_url&quot;);</span><br><span class="line">height: 655px;</span><br><span class="line">background-position: center;</span><br></pre></td></tr></table></figure>
<h1 id="显示图片中间部分，截取所有两侧空白，并且自动适应大小-overflow方式裁剪图片"><a href="#显示图片中间部分，截取所有两侧空白，并且自动适应大小-overflow方式裁剪图片" class="headerlink" title="显示图片中间部分，截取所有两侧空白，并且自动适应大小,overflow方式裁剪图片"></a>显示图片中间部分，截取所有两侧空白，并且自动适应大小,overflow方式裁剪图片</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;</span><br><span class="line">    width: 100%;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&quot;&gt;</span><br><span class="line">		&lt;img src=&quot;http://www.huaqiweb.com/templets/1/company1608//images/5547334f016da.jpg&quot; style=&quot;</span><br><span class="line">    width: 150%;</span><br><span class="line">    margin-left: -25%;</span><br><span class="line">&quot;&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>html</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>js字符串match正则匹配捕获特定字符串</title>
    <url>/2018/01/04/524dc0855c26.html</url>
    <content><![CDATA[<h1 id="实例捕获字符串http-locahost-1111-index-html-中的域名和端口"><a href="#实例捕获字符串http-locahost-1111-index-html-中的域名和端口" class="headerlink" title="实例捕获字符串http://locahost:1111/index.html 中的域名和端口"></a>实例捕获字符串<a href="http://locahost:1111/index.html">http://locahost:1111/index.html</a> 中的域名和端口</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location.href.match(/(https?:)(\/\/.*:\d*)/)[2]+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>navicat12 伪注册激活试用</title>
    <url>/2018/01/25/90c905355b3b.html</url>
    <content><![CDATA[<p>#Navicat Premium 12继续试用的实现</p>
<blockquote>
<p>Navicat Premium 12有14天的试用时间，时间过了，卸载重装依然会提示试用过期，此时我们可以把本机的时间调整为小于过期时间，此时就可以继续试用了。</p>
</blockquote>
<p><code>虽然方法很笨，但比较实用</code></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>npm参数详解</title>
    <url>/2018/01/04/7494bbf3c890.html</url>
    <content><![CDATA[<h1 id="npm淘宝镜像"><a href="#npm淘宝镜像" class="headerlink" title="npm淘宝镜像"></a>npm淘宝镜像</h1><blockquote>
<p>npm i –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>不建议用cnpm</p>
</blockquote>
<h1 id="npm-install-i-packagename-S-–save"><a href="#npm-install-i-packagename-S-–save" class="headerlink" title="npm install(i) packagename -S (–save)"></a>npm install(i) packagename -S (–save)</h1><blockquote>
<p>-S(–save)保存到当前npm项目中<br>install 可以简写为i</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-secruty-outh2-mysql</title>
    <url>/2018/01/23/e4870cf48e69.html</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote>
<p>实现对访问资源的权限控制<br>基于mysql数据进行用户信息认证<br>跨域问题<br>注销用户<br>token有效时间</p>
</blockquote>
]]></content>
      <categories>
        <category>spring</category>
        <category>boot</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>boot</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>svn转git</title>
    <url>/2018/03/05/9408a11c317e.html</url>
    <content><![CDATA[<h1 id="svn转git-并且保留版本记录"><a href="#svn转git-并且保留版本记录" class="headerlink" title="svn转git 并且保留版本记录"></a>svn转git 并且保留版本记录</h1><h2 id="clone-svn代码"><a href="#clone-svn代码" class="headerlink" title="clone svn代码"></a>clone svn代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git svn clone http://xxx -s svnGit</span><br></pre></td></tr></table></figure>
<h2 id="添加远程git地址"><a href="#添加远程git地址" class="headerlink" title="添加远程git地址"></a>添加远程git地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin xxxxx(git仓库)</span><br></pre></td></tr></table></figure>
<h2 id="push仓库"><a href="#push仓库" class="headerlink" title="push仓库"></a>push仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="一键转换"><a href="#一键转换" class="headerlink" title="一键转换"></a>一键转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svn=&quot;svn://121.40.40.59/project/server/yun-call-web&quot;</span><br><span class="line">git=&quot;https://git.huaqiweb.com/jiuhu/server/yun-call-web.git&quot;</span><br><span class="line">echo &quot;svn转换为git，保证远程git没有初始化仓库，转换完成将删除临时文件&quot;</span><br><span class="line">if [ -d &quot;svnToGit&quot; ];then</span><br><span class="line">    echo &quot;删除svnToGit目录?&quot;</span><br><span class="line">    rm -r svnToGit</span><br><span class="line">fi</span><br><span class="line">git svn clone $&#123;svn&#125; -s svnToGit</span><br><span class="line">git remote add origin $&#123;git&#125;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>面向2018，回顾2017</title>
    <url>/2018/01/02/130d4a357166.html</url>
    <content><![CDATA[<blockquote>
<p>回顾一年，有收获也有遗憾。23岁</p>
</blockquote>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h4 id="离职-确定方向-一路向前"><a href="#离职-确定方向-一路向前" class="headerlink" title="离职-确定方向,一路向前"></a>离职-确定方向,一路向前</h4><blockquote>
<p>现在的我，对17年2月的离职感到庆幸，这是一个相当正确的决定。在上家创业公司待了2年，由android开发、到硬件开发，再到网站开发。当时我的对各个方向技术充满好奇，软硬件，移动服务端都想接触，这就导致了，广而不深的尴尬局面，其中的利弊就不在这里讨论，现在阶段的我需要做的就是深入我所确定发展的方向！</p>
</blockquote>
<h4 id="创业硬件-扬长避短"><a href="#创业硬件-扬长避短" class="headerlink" title="创业硬件-扬长避短"></a>创业硬件-扬长避短</h4><blockquote>
<p>3个月时间，三千元投入，两个人。这就是当时的配置。做出了基于crazyflie的四轴飞行器，最后对市场的定位，盈利方式等无法准确分析，生活也有压力，最终放弃了。创业的目的为了自由、为了不再是死工资。创业比平时工作还累，但心是自由的，这种感觉很好！对于这次经历我也明白了一个道理，天才，必须扬长避短。如果让一个文学方面的天才，来做IT行业，那么他很可能很平庸，天才如此，正常的人应该也是。在创业中，我分析了我个人的能力以及特长，对于管理，人际交流方面我确实很差，并且没什么悟性，但技术方面就不同了，这很适合现在的我。我如果向管理方面发展必定事半功倍，发展技术方面至少会比管理方面效率要高，所以我决定优先发展自身的长处。事物具备两面性，虽说要扬长避短，但什么是长?什么是短?这很难说清楚。</p>
</blockquote>
<h4 id="后端工程师-从头开始"><a href="#后端工程师-从头开始" class="headerlink" title="后端工程师-从头开始"></a>后端工程师-从头开始</h4><blockquote>
<p>工作了两三年，心里真是憋屈，居然要重头开始，所以确定方向是多么重要，并且持之以恒。在上个公司打乱了我发展的节奏，让我做安卓，做硬件，做网站，当时年轻没考虑那么多，就啥都答应了。无论在哪个行业应该要有职业原则，哪些自己可以做，哪些不做自己要考虑清楚。</p>
</blockquote>
<h3 id="常回家看看"><a href="#常回家看看" class="headerlink" title="常回家看看"></a>常回家看看</h3><blockquote>
<p>工作是为了什么？为什么而活？你可能很勤奋，很珍惜时间，可能是工作狂，可能想挣很多钱。但请珍惜你的亲人。</p>
</blockquote>
<h1 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h1><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><blockquote>
<p>没能坚持写博客是去年的遗憾</p>
</blockquote>
<h1 id="起航"><a href="#起航" class="headerlink" title="起航"></a>起航</h1><blockquote>
<p>至少写100篇博客</p>
</blockquote>
<p><code>18年弟弟高考,加油!</code></p>
]]></content>
      <categories>
        <category>日记本</category>
        <category>年</category>
      </categories>
  </entry>
  <entry>
    <title>Cause: org.jetbrains.plugins.gradle.tooling.util.ModuleComponentIdentifierIm Lorg/gradle/api/artifac</title>
    <url>/2019/12/22/0e365951e122.html</url>
    <content><![CDATA[<p>每次gradle总不会让我顺心如意构建项目。真的有点烦。不止一次出现环境问题。归根结底还是自己菜！</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Cause: org.jetbrains.plugins.gradle.tooling.util.ModuleComponentIdentifierIm Lorg/gradle/api/artifacts/ModuleIdentifier</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这是我从git上拉mybatis-plus项目下来进行改进。但是工程是gradle，对于我这个Idea2018.1版本的来讲，就出现了这样如此无赖的错误。</p>
<h1 id="解决方案一："><a href="#解决方案一：" class="headerlink" title="解决方案一："></a>解决方案一：</h1><p>这个问题应该是gradle5.+版本与Idea2018.1之间的环境出现了错误造成的。因此可以选择<code>降低gradle版本</code>为4.+。但是如果，<code>工程使用了gradle5的特性就不能通过这样的方式</code>，这样gradle项目肯定也不会成功的构建。至于怎么降低版本，方式有两种，一种Idea配置指定的gradle-home。一种是在gralde/wrapper下的配置文件中指定版本。<br>方式一：<br>setting-&gt;Build Tools-&gt;Gradle。这这里配置指定gradle-home<br>方式二：<br>在项目gradle-&gt;wrapper-&gt;gradle-wrapper.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">distributionUrl=https\://downloads.gradle-dn.com/distributions/gradle-4.10.2-bin.zip</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure>
<h1 id="解决方案二："><a href="#解决方案二：" class="headerlink" title="解决方案二："></a>解决方案二：</h1><p><code>直接升级Idea到最新版</code>。我这是这样解决的。升级之后，项目就成功的构建了。</p>
<p>虽然Idea升级了。但需要考虑工程情况，因为升级了可能造成项目但一些问题。每一步操作都需要考虑清楚其中的利弊。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Could not find or load main class org.springframework.boot.loader.JarLauncher</title>
    <url>/2021/07/26/8e557a8948d6.html</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><blockquote>
<p>今天用java -jar出现了个匪夷所思的错误<br>Error: Could not find or load main class org.springframework.boot.loader.JarLauncher，这个第一眼感觉应该是jar包本身的问题。结果排除下来问题也算找到了。</p>
</blockquote>
<h1 id="从java-jar说起"><a href="#从java-jar说起" class="headerlink" title="从java -jar说起"></a>从java -jar说起</h1><p><code>java -jar app.jar</code>用这个启动没啥问题，但是由于要指定java的工作路径所以我们加了个参数<code>java -jar -Duser.dir=/home app.jar</code>一直行就一脸懵逼了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar -Duser.dir=/home app.jar</span><br><span class="line"># 报错如下</span><br><span class="line"># Error: Could not find or load main class org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></table></figure>
<p>上述错误搞得我n脸懵逼，之前一直都是这么用的，首先排除jar的问题，然后我找了很久以前docker里面用的启动参数，发现app.jar是决定路径，然后改了试一试，好的，我滴乖乖就是这个问题</p>
<h1 id="指定user-dir时，jar包必须用绝对路径"><a href="#指定user-dir时，jar包必须用绝对路径" class="headerlink" title="指定user.dir时，jar包必须用绝对路径"></a>指定user.dir时，jar包必须用绝对路径</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 好的，jar包改成绝对路径就能运行了，并且正确修改工作路径</span></span><br><span class="line">java -jar -Duser.dir=/home /home/test/app.jar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker修改MySQL时区终极版</title>
    <url>/2021/07/27/055bea5df2dd.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Docker确实是方便。但每次创建Mysql后都头疼，时区问题头疼。今天就专门花时间以及总结一下如何修改。我需要的修改肯定是持久化的，所以临时性的方案就不考虑了。</p>
<h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><blockquote>
<p>为了保证实验的严谨性，还是申明一下基础环境</p>
</blockquote>
<ul>
<li>Centos7</li>
<li>Docker1.13</li>
<li>mysql:5.7<h1 id="关于容器运行方式"><a href="#关于容器运行方式" class="headerlink" title="关于容器运行方式"></a>关于容器运行方式</h1></li>
<li>不用docker run</li>
<li>不用docker compose</li>
<li>使用docker swarm<h1 id="MySQL时区修改"><a href="#MySQL时区修改" class="headerlink" title="MySQL时区修改"></a>MySQL时区修改</h1><h2 id="方法1，挂载-etc-localtime-etc-localtime"><a href="#方法1，挂载-etc-localtime-etc-localtime" class="headerlink" title="方法1，挂载 /etc/localtime:/etc/localtime"></a>方法1，挂载 /etc/localtime:/etc/localtime</h2><blockquote>
<p>这种依赖宿主机时区</p>
</blockquote>
<h2 id="compose文件"><a href="#compose文件" class="headerlink" title="compose文件"></a>compose文件</h2><code>vi docker-mysql.yml mysql</code><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql57:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">xxxxxx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql_cnf:/etc/mysql/conf.d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">mysql_cnf:</span></span><br></pre></td></tr></table></figure>
执行 <code>docker stack deploy -c docker-mysql.yml mysql</code><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2></li>
<li>连接数据库执行<code>SELECT NOW()</code> 测试发现时间正常</li>
<li>连接数据库执行<code>show variables like &#39;%time_zone%&#39;;</code> 发现默认时区CST说明正常了</li>
<li><code>docker ps</code>找到容器id。执行<code>docker exec -it bc75b4576a1d date</code> 发现时间正常</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>利用挂载localtime的方法，可以从物理意义上修复MySQL的时区问题。即整个运行环境都是正确时区了。</p>
<h2 id="方法1，充分性证明"><a href="#方法1，充分性证明" class="headerlink" title="方法1，充分性证明"></a>方法1，充分性证明</h2><ul>
<li>将compose中 <code>- /etc/localtime:/etc/localtime</code>删除 </li>
<li>重新执行一次 <code>docker stack deploy -c docker-mysql.yml mysql</code></li>
<li>查看时区，发现恢复成UTC时区了</li>
</ul>
<h2 id="方法2，TZ-Asia-Shanghai环境变量设置"><a href="#方法2，TZ-Asia-Shanghai环境变量设置" class="headerlink" title="方法2，TZ=Asia/Shanghai环境变量设置"></a>方法2，TZ=Asia/Shanghai环境变量设置</h2><h1 id="compose文件-1"><a href="#compose文件-1" class="headerlink" title="compose文件"></a>compose文件</h1><p><code>vi docker-mysql.yml mysql</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql57:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">xxxxxx</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql_cnf:/etc/mysql/conf.d</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">mysql_cnf:</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>docker stack deploy -c docker-mysql.yml mysql</code></p>
<h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><ul>
<li>连接数据库执行<code>SELECT NOW()</code> 测试发现时间正常</li>
<li>连接数据库执行<code>show variables like &#39;%time_zone%&#39;;</code> 发现默认时区CST说明正常了</li>
<li><code>docker ps</code>找到容器id。执行<code>docker exec -it bc75b4576a1d date</code> 发现时间正常</li>
</ul>
<h2 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h2><p>利用修改<code>TZ: Asia/Shanghai</code>的方法，可以从物理意义上修复MySQL的时区问题。即整个运行环境都是正确时区了。</p>
<h2 id="方法3，修改MySQL配置文件"><a href="#方法3，修改MySQL配置文件" class="headerlink" title="方法3，修改MySQL配置文件"></a>方法3，修改MySQL配置文件</h2><p>修改配置文件 /var/lib/docker/volumes/mysql_mysql_cnf/_data/docker.cnf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="keyword">default</span>-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里配置时区+8，按照测试流程正常。</p>
<p>但是需要注意的是容器的更新。最好的是删除旧容器然后更新</p>
<h2 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h2><p>不推荐修改配置文件，鬼知道因为系统时间是UTC会发生什么。<br>推荐方法2</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>DrawIO 基于MinIO以及OSS私有云方案</title>
    <url>/2021/07/26/117ae5406788.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="DrawIO-基于MinIO以及OSS私有云方案"><a href="#DrawIO-基于MinIO以及OSS私有云方案" class="headerlink" title="DrawIO 基于MinIO以及OSS私有云方案"></a>DrawIO 基于MinIO以及OSS私有云方案</h1><blockquote>
<p>基于drawio的私有云实现以及私有云端存储方案</p>
</blockquote>
<blockquote>
<p>项目地址：<a href="https://github.com/mathcoder23/drawio-minio-oss">https://github.com/mathcoder23/drawio-minio-oss</a></p>
</blockquote>
<h1 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h1><ul>
<li>支持OSS部署(本来就是支持的，限于部署服务器的带宽问题，将静态页面转到OSS部署加快页面访问速度)</li>
<li>新增基于MinIO的第三方存储方案</li>
<li>在私有化后，新增用户登录、并且管理创建的流程图文件(方便云端管理自己创建的流程图文件)</li>
<li>支持通过接口创建、管理、删除登录用户信息</li>
</ul>
<h1 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h1><img src="/2021/07/26/117ae5406788/1627294931347.png" class="">
<img src="/2021/07/26/117ae5406788/1627294931351.png" class="">

<img src="/2021/07/26/117ae5406788/1627294931351.png" class="">

<h2 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h2><h1 id="Drawio-minio-oss版部署指南"><a href="#Drawio-minio-oss版部署指南" class="headerlink" title="Drawio-minio-oss版部署指南"></a>Drawio-minio-oss版部署指南</h1><h2 id="需要的组件服务说明"><a href="#需要的组件服务说明" class="headerlink" title="需要的组件服务说明"></a>需要的组件服务说明</h2><ol>
<li>MinIO服务(tcp服务、内网通讯)</li>
<li>Drawio私有云后端服务(http服务，公网)</li>
<li>Drawio的私有云后台前端（html静态，公网）</li>
<li>Drawio的核心服务（html静态，公网）</li>
</ol>
<h2 id="docker-compose一站式全部部署-非oss方案"><a href="#docker-compose一站式全部部署-非oss方案" class="headerlink" title="docker-compose一站式全部部署(非oss方案)"></a>docker-compose一站式全部部署(非oss方案)</h2><blockquote>
<p>此方案非oss方案，即一个主机部署即可</p>
</blockquote>
<h3 id="1-部署前提准备"><a href="#1-部署前提准备" class="headerlink" title="1.部署前提准备"></a>1.部署前提准备</h3><ol>
<li>安装docker环境</li>
<li>安装docker-compose环境(版本不要太低)</li>
<li>一台主机(推荐Linux系统)</li>
</ol>
<h3 id="2-拉取源码"><a href="#2-拉取源码" class="headerlink" title="2.拉取源码"></a>2.拉取源码</h3><blockquote>
<p>部署依赖于源码部署，所以需要将整个源码拉下来</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/mathcoder23/drawio-minio-oss</span><br><span class="line">cd drawio-minio-oss</span><br></pre></td></tr></table></figure>
<h3 id="3-运行docker-compose"><a href="#3-运行docker-compose" class="headerlink" title="3.运行docker-compose"></a>3.运行docker-compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd docker/compose/</span><br><span class="line">docker-compose -f docker-compose-drawio.yml up</span><br></pre></td></tr></table></figure>
<h3 id="4-登录MinIO后台配置账号"><a href="#4-登录MinIO后台配置账号" class="headerlink" title="4.登录MinIO后台配置账号"></a>4.登录MinIO后台配置账号</h3><p>在docker-compose中我们给drawio-admin配置的MinIO连接参数如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minio1:</span><br><span class="line">    image: minio/minio:RELEASE.2021-07-08T01-15-01Z</span><br><span class="line">    hostname: minio1</span><br><span class="line">    volumes:</span><br><span class="line">      - minio-data1:/data1</span><br><span class="line">    expose:</span><br><span class="line">      - &quot;9000&quot;</span><br><span class="line">      - &quot;9001&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MINIO_ROOT_USER: minio</span><br><span class="line">      MINIO_ROOT_PASSWORD: minio123</span><br><span class="line">    command: server /data1 --console-address &quot;:9001&quot;</span><br><span class="line">    healthcheck:</span><br><span class="line">      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><span class="line">      interval: 30s</span><br><span class="line">      timeout: 20s</span><br><span class="line">      retries: 3</span><br><span class="line">drawio-admin:</span><br><span class="line">    build:</span><br><span class="line">      context: ../../drawio-admin-nodejs</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    image: drawio-admin:1.20</span><br><span class="line">    environment:</span><br><span class="line">      DRAWIO_URL: &#x27;&#x27;</span><br><span class="line">      MINIO_ACCESS_KEY: &#x27;test123123&#x27;</span><br><span class="line">      MINIO_SECRET_KEY: &#x27;test123123&#x27;</span><br><span class="line">      MINIO_BUCKET: &#x27;drawio&#x27;</span><br><span class="line">    depends_on:</span><br><span class="line">      - minio1</span><br></pre></td></tr></table></figure>
<p>根据我们配置的MinIO后台账号<code>minio</code>和<code>minio123</code>,登录<code>http://localhost:9001</code></p>
<h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h4><p>ADMIN-&gt;Users点击Create User,这里我们创建的用户账号密码为<code>test123123</code>和<code>test123123</code>,因为yml中已经配置了，如果想自定义可以自行更改</p>
<img src="/2021/07/26/117ae5406788/1627294931352.png" class="">

<h4 id="2-为用户分配读写权限"><a href="#2-为用户分配读写权限" class="headerlink" title="2.为用户分配读写权限"></a>2.为用户分配读写权限</h4><img src="/2021/07/26/117ae5406788/1627294931353.png" class="">
<img src="/2021/07/26/117ae5406788/1627294931353.png" class="">


<h4 id="3-创建Bucket"><a href="#3-创建Bucket" class="headerlink" title="3. 创建Bucket"></a>3. 创建Bucket</h4><p>我们在yml中配置的Bucket名称为<code>drawio</code>,因此需要创建一个这个</p>
<img src="/2021/07/26/117ae5406788/1627294931354.png" class="">


<h3 id="5-重启docker-compose"><a href="#5-重启docker-compose" class="headerlink" title="5.重启docker-compose"></a>5.重启docker-compose</h3><blockquote>
<p>这一步的作用是重新连接到minio服务<br>Ctrl+C关闭后重新执行docker-compose命令</p>
</blockquote>
<h3 id="6-登录Drawio私有云后台"><a href="#6-登录Drawio私有云后台" class="headerlink" title="6.登录Drawio私有云后台"></a>6.登录Drawio私有云后台</h3><blockquote>
<p>当服务重启后，进入<code>http://localhost:8080</code>,使用默认的账号密码<code>admin</code>和<code>admin</code>登录<img src="/2021/07/26/117ae5406788/1627294931354.png" class=""></p>
</blockquote>
<h3 id="7-创建新的流程图"><a href="#7-创建新的流程图" class="headerlink" title="7.创建新的流程图"></a>7.创建新的流程图</h3><blockquote>
<p>这里说明一下命名规范，/将会对数据进行分组，虽然此分组还没显示出来但是之后会，还有一点 /a和/a/b 其中a不能同时存在，不能即是文件又是文件夹</p>
</blockquote>
<img src="/2021/07/26/117ae5406788/1627294931355.png" class="">


<h3 id="8-编辑流程图"><a href="#8-编辑流程图" class="headerlink" title="8.编辑流程图"></a>8.编辑流程图</h3><img src="/2021/07/26/117ae5406788/1627294931355.png" class="">
<img src="/2021/07/26/117ae5406788/1627294931356.png" class="">


<h3 id="9-完成"><a href="#9-完成" class="headerlink" title="9.完成"></a>9.完成</h3><blockquote>
<p>到此我们部署后的基本流程全部都跑通了。<br>但是限于服务器带宽，我们访问页面很慢，所以我们将静态也迁移至OSS上将会快很多，下面参考增加OSS的部署方案</p>
</blockquote>
<h3 id="10-进阶版-登录用户管理接口"><a href="#10-进阶版-登录用户管理接口" class="headerlink" title="10.进阶版-登录用户管理接口"></a>10.进阶版-登录用户管理接口</h3><blockquote>
<p>这个目前只支持通过api的方式管理，具体的接口用法参考postman导出的json接口工程。<br>路径：<code>drawio-admin-nodejs/Drawio私有云接口.postman_collection.json</code></p>
</blockquote>
<h2 id="docker-compose-OSS方案部部署"><a href="#docker-compose-OSS方案部部署" class="headerlink" title="docker-compose-OSS方案部部署"></a>docker-compose-OSS方案部部署</h2><h3 id="1-部署前提准备-1"><a href="#1-部署前提准备-1" class="headerlink" title="1.部署前提准备"></a>1.部署前提准备</h3><ol>
<li>此部署方案与非OSS方案非常像，因此，你需要先跑通非OSS方案</li>
<li>准备OSS云或其他静态托管服务商</li>
</ol>
<h3 id="2-文档说明"><a href="#2-文档说明" class="headerlink" title="2.文档说明"></a>2.文档说明</h3><blockquote>
<p>OSS版文档基于非OSS上只对有更改的地方进行说明，不会再重复</p>
</blockquote>
<h3 id="3-托管静态Html到OSS"><a href="#3-托管静态Html到OSS" class="headerlink" title="3.托管静态Html到OSS"></a>3.托管静态Html到OSS</h3><h4 id="1-由于html的静态化，我们需要先修改静态代码指向的Drawio私有云后端服务地址"><a href="#1-由于html的静态化，我们需要先修改静态代码指向的Drawio私有云后端服务地址" class="headerlink" title="1.由于html的静态化，我们需要先修改静态代码指向的Drawio私有云后端服务地址"></a>1.由于html的静态化，我们需要先修改静态代码指向的<code>Drawio私有云后端服务地址</code></h4><p>编辑<code>html/admin/config.js</code></p>
<p>将<code>window.baseUrl = &#39;/api&#39;</code>更改为后端地址，<code>http://ip:8080/api</code>这里的ip是公网ip，注意后面不要加斜杠</p>
<p>这里的<code>http://ip:8080/api</code>也可以改为<code>//ip:8080/api</code>，跟随前端协议变化而变化，但是需要自行配置https</p>
<h4 id="2-上传html文件夹内所有文件到OSS"><a href="#2-上传html文件夹内所有文件到OSS" class="headerlink" title="2.上传html文件夹内所有文件到OSS"></a>2.上传html文件夹内所有文件到OSS</h4><p>注意不要上传html本身，当然如果你不介意多一个/html路径也可以</p>
<p>OSS的静态托管教程以及域名绑定等操作，这里不细谈，具体参见对应的文档即可</p>
<p>这里假设配置的OSS访问地址为<code>http://xxx.com</code> html中的<code>admin、drawio</code>文件夹上传在此根目录,这个地址下面配置要用</p>
<p>后台管理入口地址：<code>http://xxx.com/admin/drawio.html</code></p>
<p>Drawio入口地址：<code>http://xxx.com/drawio/index.html</code> 此地址对用户透明，仅部署配置使用</p>
<p>为了保证部署的可用性，请分别访问上述地址看是否正常。</p>
<h4 id="3-修改yml中DRAWIO-URL值"><a href="#3-修改yml中DRAWIO-URL值" class="headerlink" title="3.修改yml中DRAWIO_URL值"></a>3.修改yml中DRAWIO_URL值</h4><blockquote>
<p><code>DRAWIO_URL</code>的配置是可以直接访问的drawio页面，<code>http://xxx.com/drawio/index.html</code>，之所以后台要配置这个地址，是由于后台是采用代理技术来实现<br>minio的持久化<br>yml部分代码</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Drawio 管理后台服务</span></span><br><span class="line"><span class="attr">drawio-admin:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">../../drawio-admin-nodejs</span></span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">drawio-admin:1.21</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">DRAWIO_URL:</span> <span class="string">&#x27;http://xxx.com/drawio/index.html&#x27;</span> <span class="comment">###### 将这里更改为上述地址，其余不变</span></span><br><span class="line">  <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">&#x27;test123123&#x27;</span></span><br><span class="line">  <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">&#x27;test123123&#x27;</span></span><br><span class="line">  <span class="attr">MINIO_BUCKET:</span> <span class="string">&#x27;drawio&#x27;</span></span><br><span class="line"><span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio1</span></span><br></pre></td></tr></table></figure>
<h4 id="4-重启服务"><a href="#4-重启服务" class="headerlink" title="4.重启服务"></a>4.重启服务</h4><h4 id="5-进入后台体验速度的改变"><a href="#5-进入后台体验速度的改变" class="headerlink" title="5.进入后台体验速度的改变"></a>5.进入后台体验速度的改变</h4><p>后台管理入口地址：<code>http://xxx.com/admin/drawio.html</code></p>
<h1 id="参考源码"><a href="#参考源码" class="headerlink" title="参考源码"></a>参考源码</h1><p><a href="https://github.com/jgraph/drawio">https://github.com/jgraph/drawio</a> 感谢核心贡献</p>
<p><a href="https://github.com/othorizon/drawio-webdav">https://github.com/othorizon/drawio-webdav</a> 提供MinIO存储支持</p>
]]></content>
      <categories>
        <category>开源</category>
      </categories>
      <tags>
        <tag>开源</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ERR_CERT_AUTHORITY_INVALID和SSL: error:0B080074:x509</title>
    <url>/2021/07/26/94150b2b29e7.html</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>用nginx部署了https，但是在浏览器上能够正常，微信小程序访问就是不行，最后调试后才发现客户端抛了一个这样的错误：<code>ERR_CERT_AUTHORITY_INVALID</code>，从字面意思上理解就是证书有问题，但是考虑了一下，这个证书时刚申请的呀，应该不会有问题。</p>
<h1 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h1><ul>
<li>首先可以肯定证书的配置肯定有问题，</li>
<li>接下来我们要考虑的是证书本身有问题，还是在配置时没配对，</li>
<li>在下载证书时，有nginx版、tomcat版、apache版，我这次意识到我在nginx配置时，好像用的apache版证书，所以问题应该是出在这里</li>
<li>在重新下载了nginx版的证书后，重启启动nginx发现启动不了了。</li>
</ul>
<h1 id="新的报错：failed-SSL-error-0B080074-x509"><a href="#新的报错：failed-SSL-error-0B080074-x509" class="headerlink" title="新的报错：failed (SSL: error:0B080074:x509"></a>新的报错：failed (SSL: error:0B080074:x509</h1><blockquote>
<p>我这有点懵了，下载的证书应该不会出问题啊，这个错误时提示公钥、私钥不匹配，后来查看pem才发现，我滴乖乖，用vi命令粘贴的时候没粘全，好吧大意了。哈哈哈</p>
</blockquote>
<h1 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h1><ul>
<li>ERR_CERT_AUTHORITY_INVALID错误你的考虑http容器是否和下载的证书配套</li>
<li>failed (SSL: error:0B080074:x509 错误你的考虑，是不是证书复制粘贴的时候错了。</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp轻松解决内网访问方案</title>
    <url>/2021/07/27/a8017e1a7405.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>在开发时，有时候需要临时将内网的web服务在外网访问。此文将会解决这样的痛点</p>
</blockquote>
<h1 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h1><ul>
<li>一台公网服务器，并且有权限管理它。(开发者应该有一台自己的服务，现在买也很便宜)</li>
<li>如果没公网服务器，可以找基于<code>Frp、Ngork</code>的服务商,免费的速度很慢</li>
</ul>
<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><ul>
<li>本文采用基于Frp的内网方案<h1 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h1></li>
<li>服务端的Frps先监听某个(7777)端口，客户端通过这个端口连接到服务器，此时它们建立了长连接</li>
<li>客户端通过配置文件配置本地(8080)与远程端口(9090)，服务器会创建远程端口(9090)的监听，当访问服务器的9090端口时，数据会基于7777端口双向传输到客户端，然后客户端在访问本地端口，注意这里的本地端口实际上可以是任何内网能访问到的地址和端口<h1 id="Frp服务端搭建-测试"><a href="#Frp服务端搭建-测试" class="headerlink" title="Frp服务端搭建(测试)"></a>Frp服务端搭建(测试)</h1></li>
</ul>
<ol>
<li>下载linux版 <a href="https://github.com/fatedier/frp/releases">Github-Release下载</a></li>
<li>比如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.34.0/frp_0.34.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>解压后得到目录<br><code>frpc  frpc_full.ini  frpc.ini  frps  frps_full.ini  frps.ini  LICENSE  systemd</code><br>其中<code>frps</code>就是可执行文件，通过<code>-c frps.ini</code> 执行配置文件</li>
<li>启动frps服务<br><code>frps -c frps.ini</code></li>
<li>此时我们的frps就启动成功了（成功后日志会打印监听的端口）<h1 id="Frp客户端搭建-测试"><a href="#Frp客户端搭建-测试" class="headerlink" title="Frp客户端搭建(测试)"></a>Frp客户端搭建(测试)</h1></li>
<li>同理在Github上下载操作系统对应的版本</li>
<li>配置 frpc.ini<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 公网服务器地址</span><br><span class="line">server_addr =  xxxx</span><br><span class="line"># 公网服务器端口，安全组和防火墙要配置放行 </span><br><span class="line">server_port = xxx</span><br><span class="line"></span><br><span class="line"># 客户端组</span><br><span class="line">[wxmp-web]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8080</span><br><span class="line"># 公网服务器自动创建此端口，保证此端口未占用，以及安全组和防火墙放行</span><br><span class="line">remote_port = 10010</span><br></pre></td></tr></table></figure></li>
<li>运行<code>frpc -c frpc.int</code></li>
<li>理论上我们的服务器和客户端都将打印连接信息</li>
<li>访问<code>公网ip:10010</code> 即可访问内网的8080端口，这里注意我们建立的通道是tcp，也可以是http，由于我们内网的协议是http，所有是建立的tcp通道也可以通过http访问的。</li>
</ol>
<h1 id="生产级配置"><a href="#生产级配置" class="headerlink" title="生产级配置"></a>生产级配置</h1><ul>
<li>上面的简单测试，使我们打通的内网通道，但是这还不够，我们还需要考虑如下问题</li>
<li>1，服务端抗重启，直接通过命令运行，在关闭终端，或重启服务器，服务未开机运行</li>
<li>2，服务端与客户端tcp建立没有安全性，应该有密码保护</li>
<li>3，服务端提供运维面板，查看端口映射情况</li>
</ul>
<h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><h2 id="frps-ini配置"><a href="#frps-ini配置" class="headerlink" title="frps.ini配置"></a>frps.ini配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 9999</span><br><span class="line"></span><br><span class="line"># 运维端配置，通过10000端口访问后台</span><br><span class="line">dashboard_port = 11000</span><br><span class="line"># dashboard&#x27;s username and password are both optional，if not set, default is admin.</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = xxx</span><br><span class="line"></span><br><span class="line"># 允许端口，防止被破解后，限制端口使用</span><br><span class="line">allow_ports = xxx-xxx</span><br><span class="line"></span><br><span class="line"># 登录凭证，客户端协商一致</span><br><span class="line">token = xxx</span><br></pre></td></tr></table></figure>
<h2 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h2><ol>
<li>复制<code>systemd目录</code>下的frps.service到系统服务目录<code>cp frps.service /usr/lib/systemd/system</code></li>
<li>查看frps.service源码发现frps和配置文件需要放在系统目录</li>
<li>复制fprs <code>cp frps /user/bin</code></li>
<li>复制配置文件 <code>cp frps.ini /etc/frp/frps.ini</code></li>
<li>启动服务<code>systemctl start frps</code></li>
<li>开机启动<code>systemctl enable frps</code></li>
</ol>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx</span><br><span class="line">server_port = 9999</span><br><span class="line">token = xxx</span><br><span class="line">[wxmp-web]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8080</span><br><span class="line">remote_port = xxx</span><br></pre></td></tr></table></figure>

<h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><img src="/2021/07/27/a8017e1a7405/1627349184913.png" class="">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单介绍了Frp的应用，当然它的功能远不止如此，还有类似nginx的功能，负载均衡等。理论上Frp的功能在微服务体系中可以作为一个中间件技术，但是能否线上使用还有待考证。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA Process finished with exit code -1073741819 (0xC0000005)or Maven Process terminated 导致项目无法运行的问题</title>
    <url>/2021/07/26/9c22c184a42a.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>当我再次解决这个问题时，我才恍然大悟，在很久以前我遇到过这个问题，2021年新年的开始，预想着一个好兆头，因此特有花了一点点时间把桌面清理的干干净净，看着硬盘所剩不多的可用空间，忍不住拿出来万年不用的360清理了一下垃圾。好了，一切工作准备就绪后开始快乐的编程了，刚才是还是好的，但某一时间项目突然运行不了？？？</p>
</blockquote>
<h1 id="Process-finished-with-exit-code-1073741819-0xC0000005"><a href="#Process-finished-with-exit-code-1073741819-0xC0000005" class="headerlink" title="Process finished with exit code -1073741819 (0xC0000005)"></a>Process finished with exit code -1073741819 (0xC0000005)</h1><blockquote>
<p>在IDEA上运行直接报上诉错误，首先，我代码没有任何改动，刚刚还是好的，心里一阵懵逼，心里初步的定位是系统环境问题，因为代码肯定是没问题的，然后又想想会不会360对我的电脑做了什么不可描述的秘密，但是这也没办法，因此只能继续查找问题。</p>
</blockquote>
<ul>
<li>重启IDEA重试  无效</li>
<li>重启电脑重试 无效<h1 id="Maven打包报错Process-terminated"><a href="#Maven打包报错Process-terminated" class="headerlink" title="Maven打包报错Process terminated"></a>Maven打包报错Process terminated</h1><blockquote>
<p>心里尝试一下看看Maven是否正常，结果呢，还是不行，而且出现了一个重来没遇到过的错误：Process terminated ，这下心都凉了，搞毛啊。</p>
</blockquote>
</li>
</ul>
<h1 id="搜索相关错误"><a href="#搜索相关错误" class="headerlink" title="搜索相关错误"></a>搜索相关错误</h1><p>最后定位了问题，是的，你很难想象，<code>金山词霸的自动取词与IDEA引发的bug</code>，对的，这是我第二次被坑了。找到了问题我们就可以处理了，在金山词霸的设置中<code>关闭自动取词相关的所有功能</code>,关闭成功后，重启IDEA，如果不行就重启电脑，如果还不行就直接把金山卸载了。如果还不行那只能祝你安好~</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA实现IOU（交并比）矩阵重叠率的计算</title>
    <url>/2021/07/27/62922453851b.html</url>
    <content><![CDATA[<p>最近做目标追踪,很少有JAVA的IOU计算.模仿其他语言算法实现一个</p>
<h1 id="IOU作用"><a href="#IOU作用" class="headerlink" title="IOU作用"></a>IOU作用</h1><blockquote>
<p>可以衡量两个矩阵的重叠率,在目标检测中,这个重叠率可以作为跟踪的一种参数</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * IoU（交并比）计算</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rect1 org.opencv.core.Rect 这里的Rect不是通用包,但是都差不多.包含了左顶点和宽高的值,有些是左上,右下的坐标点,注意转换</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rect2 org.opencv.core.Rect</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> IoU矩阵重叠率</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">intersectionOverUnion</span><span class="params">(Rect rect1,Rect rect2)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> leftColumnMax = Math.max(rect1.x, rect2.x);</span><br><span class="line">      <span class="keyword">int</span> rightColumnMin = Math.min(rect1.x+rect1.width,rect2.x+rect2.width);</span><br><span class="line">      <span class="keyword">int</span> upRowMax = Math.max(rect1.y, rect2.y);</span><br><span class="line">      <span class="keyword">int</span> downRowMin = Math.min(rect1.y+rect1.height,rect2.y+ rect2.height);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (leftColumnMax&gt;=rightColumnMin || downRowMin&lt;=upRowMax)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> s1 = rect1.width*rect1.height;</span><br><span class="line">      <span class="keyword">int</span> s2 = rect2.width*rect2.height;</span><br><span class="line">      <span class="keyword">float</span> sCross = (downRowMin-upRowMax)*(rightColumnMin-leftColumnMax);</span><br><span class="line">      <span class="keyword">return</span> sCross/(s1+s2-sCross);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检验代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Rect rect1 = <span class="keyword">new</span> Rect(<span class="number">107</span>, <span class="number">59</span>, <span class="number">93</span>, <span class="number">205</span>);</span><br><span class="line">      Rect rect2 = <span class="keyword">new</span> Rect(<span class="number">107</span>, <span class="number">67</span>, <span class="number">124</span>, <span class="number">206</span>);</span><br><span class="line">      <span class="comment">//0.696934</span></span><br><span class="line">      System.out.println(bbIntersectionOverUnion(rect1, rect2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.aiuai.cn/aifarm1127.html">目标检测 - IoU 计算-python</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA2018升级IDEA2018.3后lombok插件无法使用</title>
    <url>/2019/12/22/be6e14caec02.html</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>之前用的IDEA2018.1版本，但是与gradle5不兼容，就升级了IDEA201.3目前的最新版。但是发现lombok插件无法使用。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>原因是我导入了IDEA2018.1版本的配置。但两个版本的lombok不兼容。所以在setting-&gt;plugs-&gt;lombok更新即可。点进去会提示冲突的插件。按照提示更新即可。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA用Optional工具类处理NEP(NullointerException)的总结</title>
    <url>/2021/07/27/9132527c225c.html</url>
    <content><![CDATA[<h1 id="关于如何对待NPE-NullPointerException-问题"><a href="#关于如何对待NPE-NullPointerException-问题" class="headerlink" title="关于如何对待NPE(NullPointerException)问题"></a>关于如何对待NPE(NullPointerException)问题</h1><p>关于如何处理NPE问题,我至今没有定论.仅说说自己浅薄的看法<br><code>JAVA的Optional工具类非常方便的处理NPE,但处理NPE不是代码的问题,是对业务设计规范的问题</code><br>如果不了解Optional可以去查询一下.Optional类的代码非常简洁,但它的设计逻辑非常棒</p>
<h3 id="情况1-对象为空时-需要给它默认值"><a href="#情况1-对象为空时-需要给它默认值" class="headerlink" title="情况1:对象为空时,需要给它默认值"></a>情况1:对象为空时,需要给它默认值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="keyword">null</span>;</span><br><span class="line">Optional.ofNullable(a).orElse(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>上面代码意思就是当a为不为空时返回a,否则返回默认值0,这里提一下<code>orElse</code>和<code>orElseGet</code>的异同,从效果上没区别,但是性能有区别,<code>orElseGet</code>的意思在需要返回默认值时才去获取它(优化了性能).</p>
<h3 id="情况2-对象为空时-代码无法往下执行了"><a href="#情况2-对象为空时-代码无法往下执行了" class="headerlink" title="情况2:对象为空时,代码无法往下执行了"></a>情况2:对象为空时,代码无法往下执行了</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.ofNullable(obj).orElseThrow(customException)</span><br></pre></td></tr></table></figure>
<ul>
<li>这种情况非常常见,解决方法应该是抛出异常,我们可以使用<code>orElseThrow</code>将NPE转换为业务级异常,当然也可以使用断言的方式,</li>
<li>或许读者可能会疑惑尽管不做任何处理NPE也会被抛出的,但是笔者认为这样的处理方式,是一种行为规范,即重视对象的NPE问题.以及需要考虑对象为什么会为空(什么条件下为空),</li>
<li>作为业务级设计来讲,如果不去思考<code>情况2</code>,那么可能就得不出需要使用<code>情况3</code>的结论.</li>
<li>当然作为<code>情况2</code>读者也可以不做任何处理,我这里将它定义为<code>隐式的情况2处理方式</code></li>
</ul>
<h3 id="情况3-对象为不为空时-代码才执行"><a href="#情况3-对象为不为空时-代码才执行" class="headerlink" title="情况3:对象为不为空时,代码才执行"></a>情况3:对象为不为空时,代码才执行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.ofNullable(query).ifPresent(p-&gt;p.hashCode());</span><br></pre></td></tr></table></figure>
<p>这种情况一般用于对对象以及对象相关的修饰处理,在业务上有就处理,没有就不处理的业务逻辑.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA线程状态详解</title>
    <url>/2021/07/26/e3defa2a064f.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="Java中线程状态源码"><a href="#Java中线程状态源码" class="headerlink" title="Java中线程状态源码"></a>Java中线程状态源码</h1><blockquote>
<p>java包位置：java.lang.Thread.State（Thread的内部枚举类）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum State &#123;</span><br><span class="line">        /**</span><br><span class="line">         * Thread state for a thread which has not yet started.</span><br><span class="line">         */</span><br><span class="line">        NEW,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Thread state for a runnable thread.  A thread in the runnable</span><br><span class="line">         * state is executing in the Java virtual machine but it may</span><br><span class="line">         * be waiting for other resources from the operating system</span><br><span class="line">         * such as processor.</span><br><span class="line">         */</span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Thread state for a thread blocked waiting for a monitor lock.</span><br><span class="line">         * A thread in the blocked state is waiting for a monitor lock</span><br><span class="line">         * to enter a synchronized block/method or</span><br><span class="line">         * reenter a synchronized block/method after calling</span><br><span class="line">         * &#123;@link Object#wait() Object.wait&#125;.</span><br><span class="line">         */</span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Thread state for a waiting thread.</span><br><span class="line">         * A thread is in the waiting state due to calling one of the</span><br><span class="line">         * following methods:</span><br><span class="line">         * &lt;ul&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link #join() Thread.join&#125; with no timeout&lt;/li&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span><br><span class="line">         * &lt;/ul&gt;</span><br><span class="line">         *</span><br><span class="line">         * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span><br><span class="line">         * perform a particular action.</span><br><span class="line">         *</span><br><span class="line">         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span><br><span class="line">         * on an object is waiting for another thread to call</span><br><span class="line">         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span><br><span class="line">         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span><br><span class="line">         * is waiting for a specified thread to terminate.</span><br><span class="line">         */</span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Thread state for a waiting thread with a specified waiting time.</span><br><span class="line">         * A thread is in the timed waiting state due to calling one of</span><br><span class="line">         * the following methods with a specified positive waiting time:</span><br><span class="line">         * &lt;ul&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link #sleep Thread.sleep&#125;&lt;/li&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span><br><span class="line">         *   &lt;li&gt;&#123;@link LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span><br><span class="line">         * &lt;/ul&gt;</span><br><span class="line">         */</span><br><span class="line">        TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Thread state for a terminated thread.</span><br><span class="line">         * The thread has completed execution.</span><br><span class="line">         */</span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java中线程状态-六种"><a href="#Java中线程状态-六种" class="headerlink" title="Java中线程状态(六种)"></a>Java中线程状态(六种)</h1><h2 id="1-NEW"><a href="#1-NEW" class="headerlink" title="1.NEW"></a>1.NEW</h2><blockquote>
<p>新建状态，表示一个Thread刚刚被创建出来，还没有启动</p>
</blockquote>
<h2 id="2-RUNNABLE"><a href="#2-RUNNABLE" class="headerlink" title="2.RUNNABLE"></a>2.RUNNABLE</h2><blockquote>
<p>运行状态，表示线程处于JVM层面的运行态。一个新创建好的线程，调用其start()方法后，就会由NEW状态迁移到RUNNABLE状态。需要注意的是：这里的RUNNABLE是相对于JVM的状态来说的，而线程具体何时运行，取决于操作系统底层的资源调度。</p>
</blockquote>
<h2 id="3-BLOCKED"><a href="#3-BLOCKED" class="headerlink" title="3.BLOCKED"></a>3.BLOCKED</h2><blockquote>
<p>阻塞状态，表示线程正在等待一个监视器锁(monitor lock)，而监视器锁在Java代码中的体现就是synchronized关键字。也就是说：只有线程在等待进入synchronized修饰的代码块或方法时，线程才处于BLOCKED状态。</p>
</blockquote>
<h2 id="4-WAITING"><a href="#4-WAITING" class="headerlink" title="4.WAITING"></a>4.WAITING</h2><blockquote>
<p>处于这种状态的线程不会被分配CPU执行时间，它们要等待被显式地唤醒，否则会处于无限期等待的状态。</p>
</blockquote>
<blockquote>
<p>等待状态，表示线程在等待某些条件的到达。在调用以下方法后，线程会进入WAITING状态：<br>Object中定义的无超时的wait()方法，等待一个同步监视器的唤醒；<br>Thread中定义的无超时的join()方法，等待其他线程执行完毕；<br>LockSupport.park()方法。</p>
</blockquote>
<h2 id="5-TIMED-WAITING"><a href="#5-TIMED-WAITING" class="headerlink" title="5.TIMED_WAITING"></a>5.TIMED_WAITING</h2><blockquote>
<p>处于这种状态的线程不会被分配CPU执行时间，不会无线等待，在达到一定时间后它们会自动唤醒。</p>
</blockquote>
<blockquote>
<p>超时等待状态，与WAITING状态类似，并在其基础上，增加了超时的限制。在调用以下方法后，线程会进入TIMED_WAITING状态：<br>Thread.sleep()方法，线程定时休眠；<br>Object中定义的带超时的wait()方法；<br>Thread中定义的带超时的join()方法；<br>LockSupport.parkNanos()方法；<br>LockSupport.parkUntil()方法。</p>
</blockquote>
<h2 id="6-TERMINATED"><a href="#6-TERMINATED" class="headerlink" title="6.TERMINATED"></a>6.TERMINATED</h2><blockquote>
<p>终止状态，包括线程正常执行完毕和异常终止。</p>
</blockquote>
<h1 id="Linux系统的线程状态-这块内容过于复杂仅供参考"><a href="#Linux系统的线程状态-这块内容过于复杂仅供参考" class="headerlink" title="Linux系统的线程状态(这块内容过于复杂仅供参考)"></a>Linux系统的线程状态(这块内容过于复杂仅供参考)</h1><p>先简单谈谈CPU的调度(仅供参考，因为没对操作系统进行细致的研究)</p>
<ol>
<li>如果线程完全在内核态中实现（内核线程，KLT），内核调度的单元是线程。此时，进程与线程的区别非常微妙。</li>
<li>如果线程完全在用户态实现（用户线程，ULT），内核调度的单元是进程，内核对用户线程一无所知。内核只负责分配CPU给进程，进程得到CPU会后再分配给内部的线程</li>
</ol>
<h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p>运行态（此进程实际占用CPU）</p>
<p>就绪态（可运行，但因其他进程正在运行而暂时停止）</p>
<p>阻塞态（除非某种外部事件发生，否则进程不能运行）</p>
<h1 id="操作系统线程状态与JVM线程状态区别"><a href="#操作系统线程状态与JVM线程状态区别" class="headerlink" title="操作系统线程状态与JVM线程状态区别"></a>操作系统线程状态与JVM线程状态区别</h1><blockquote>
<p>上面介绍了操作系统线程状态其实就想说明一下一些问题：</p>
</blockquote>
<ol>
<li>JAVA中的六种线程状态是相对于JVM而言的，与操作系统无关。之所以定义这些状态是为了从JVM层面来管理线程</li>
<li>说一下JAVA线程的RUNNABLE状态，从字面意思来讲是“可运行的”，但实际上，假如线程处于RUNNABLE状态，对应的线程是否被CPU调度，JVM是不知道的，不关心的，不透明的。即从CPU来讲该线程可能是“阻塞态”、“运行态”、“就绪态”，这里的状态并非JVM状态。</li>
</ol>
<h1 id="JAVA线程状态与占用CPU关系"><a href="#JAVA线程状态与占用CPU关系" class="headerlink" title="JAVA线程状态与占用CPU关系"></a>JAVA线程状态与占用CPU关系</h1><ol>
<li>仅有线程状态为RUNNABLE时，才可能占用CPU，这里是可能，但其实从JVM层面来讲，RUNNABLE就是在占用CPU资源，从操作系统层面来讲，RUNNABLE可能再占用CPU资源，这可能很矛盾，但这是每个层面的视角不同而已。</li>
<li>非RUNNABLE状态，一定不占用CPU资源</li>
</ol>
<h1 id="JAVA线程相关方法与线程状态、锁的关系"><a href="#JAVA线程相关方法与线程状态、锁的关系" class="headerlink" title="JAVA线程相关方法与线程状态、锁的关系"></a>JAVA线程相关方法与线程状态、锁的关系</h1><h2 id="Thread-sleep-long-millis-方法"><a href="#Thread-sleep-long-millis-方法" class="headerlink" title="Thread.sleep(long millis)方法"></a>Thread.sleep(long millis)方法</h2><p><strong>方法作用：</strong> 延时、阻塞<br><strong>线程状态：</strong>  TIMED_WAITING<br><strong>锁特点：</strong>     不释放锁<br><strong>代码块：</strong>     阻塞代码块</p>
<h2 id="Thread-yield-方法"><a href="#Thread-yield-方法" class="headerlink" title="Thread.yield()方法"></a>Thread.yield()方法</h2><p><strong>方法作用：</strong> 通知操作系统底层，放弃当前的CPU时间片，yield也可以理解为线程让步,但并非绝对让步，依然需要根据线程调度优先级来决定。个人感觉，这个方法的使用场景更像是在一些当前线程高度占用CPU时，均衡一些次要线程的调度。<br><strong>线程状态：</strong>  RUNNABLE<br><strong>锁特点：</strong>     不释放锁<br><strong>代码块：</strong>     不阻塞</p>
<h2 id="obj-wait-obj-wait-long-millis-方法"><a href="#obj-wait-obj-wait-long-millis-方法" class="headerlink" title="obj.wait()/obj.wait(long millis)方法"></a>obj.wait()/obj.wait(long millis)方法</h2><p><strong>方法作用：</strong> 使线程等待，依靠notify()/notifyAll()唤醒或者wait(long timeout) timeout时间到自动唤醒。<br><strong>线程状态：</strong>  WAITING/TIMED_WAITING<br><strong>锁特点：</strong>     释放锁<br><strong>代码块：</strong>     阻塞.</p>
<h2 id="thread-join-thread-join-long-millis-方法"><a href="#thread-join-thread-join-long-millis-方法" class="headerlink" title="thread.join()/thread.join(long millis)方法"></a>thread.join()/thread.join(long millis)方法</h2><p><strong>方法作用：</strong> 线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才从thread.join()返回<br><strong>线程状态：</strong>  WAITING/TIMED_WAITING<br><strong>锁特点：</strong>     不释放锁<br><strong>代码块：</strong>     阻塞</p>
<h2 id="obj-notify-方法"><a href="#obj-notify-方法" class="headerlink" title="obj.notify()方法"></a>obj.notify()方法</h2><p><strong>方法作用：</strong> 唤醒在此对象监视器上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象监视器上等待的所有线程。<br><strong>线程状态：</strong>  RUNNABLE<br><strong>锁特点：</strong>     不释放锁<br><strong>代码块：</strong>     不阻塞</p>
<h2 id="LockSupport-park-LockSupport-parkNanos-long-nanos-LockSupport-parkUntil-long-deadlines-方法"><a href="#LockSupport-park-LockSupport-parkNanos-long-nanos-LockSupport-parkUntil-long-deadlines-方法" class="headerlink" title="LockSupport.park()/LockSupport.parkNanos(long nanos),LockSupport.parkUntil(long deadlines)方法"></a>LockSupport.park()/LockSupport.parkNanos(long nanos),LockSupport.parkUntil(long deadlines)方法</h2><p><strong>方法作用：</strong> 不需要获得锁就可以让线程进入WAITING/TIMED_WAITING状态，LockSupport.unpark(Thread thread)唤醒<br><strong>线程状态：</strong>  WAITING/TIMED_WAITING<br><strong>锁特点：</strong>     不需要获得锁就可以让线程进入等待态<br><strong>代码块：</strong>     不阻塞</p>
<p>参考文献：<a href="https://blog.csdn.net/pange1991/article/details/53860651">Java线程的6种状态及切换(透彻讲解)</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8 ConcurrentHashMap computeIfAbsent 嵌套的死锁bug</title>
    <url>/2021/07/27/026652a2e173.html</url>
    <content><![CDATA[<p>偶然间看到了这个bug,记录一下</p>
<h1 id="Bug信息"><a href="#Bug信息" class="headerlink" title="Bug信息"></a>Bug信息</h1><ul>
<li>版本 JDK1.8(目前测试到8u261仍然有这个问题)(是不是有且仅有这个版本还不定),至少可以肯定的是在1.9已经修复</li>
<li>场景 ConcurrentHashMap 中computeIfAbsent 的再嵌套computeIfAbsent/putIfAbsent</li>
<li>现象 线程死锁<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CHMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        normal();</span><br><span class="line">        bug();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bug</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;begin bug code ...&quot;</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        String hash1 = <span class="string">&quot;AaAa&quot;</span>;</span><br><span class="line">        String hash2 = <span class="string">&quot;BBBB&quot;</span>;</span><br><span class="line">        <span class="comment">//hash值,相同产生死锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hash1:&quot;</span>+hash1.hashCode()+<span class="string">&quot;,hash1:&quot;</span>+hash2.hashCode());</span><br><span class="line">        map.computeIfAbsent(hash1, key -&gt; &#123;</span><br><span class="line">            map.putIfAbsent(hash2,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;bug code is exec here?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">normal</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;begin normal code ...&quot;</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        String hash1 = <span class="string">&quot;AaAa&quot;</span>;</span><br><span class="line">        String hash2 = <span class="string">&quot;BBBB2&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;hash1:&quot;</span>+hash1.hashCode()+<span class="string">&quot;,hash1:&quot;</span>+hash2.hashCode());</span><br><span class="line">        map.computeIfAbsent(hash1, key -&gt; &#123;</span><br><span class="line">            map.putIfAbsent(hash2,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;begin normal code finished&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行上面的代码,bug方法块将死锁.<br>在computeIfAbsent 中嵌套computeIfAbsent 或者putIfAbsent时,<br>当两个key对应的hash值相同发生死锁</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8u202之后,需要商业授权,但不限制个人和开发使用</title>
    <url>/2021/07/27/528b923e4dcb.html</url>
    <content><![CDATA[<h1 id="JDK8u202-免费商用版"><a href="#JDK8u202-免费商用版" class="headerlink" title="JDK8u202(免费商用版)"></a>JDK8u202(免费商用版)</h1><blockquote>
<p>可以理解,作为Oracle JDK的这个版本是最终的免费商用版.意味着我们在生成环境下使用更高的版本,需要获得商业授权.</p>
</blockquote>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><ul>
<li>可以选择不升级,仅使用JDK8u202版本是可以的</li>
<li>可以选择获得商业授权</li>
<li>可以选择使用OpenJdk,对应的发行版还是挺多</li>
</ul>
<h1 id="常见的OpenJDK"><a href="#常见的OpenJDK" class="headerlink" title="常见的OpenJDK"></a>常见的OpenJDK</h1><ul>
<li> Dragonwell (阿里开源)</li>
<li>AdoptOpenJDK</li>
<li>Liberica</li>
<li>Zulu</li>
<li>Corretto</li>
<li>OpenJ9 </li>
<li>GraalVM<br>具体怎么选择也没有经验,可以自行比较</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java List对象转为对象中某个属性的List 并且互转</title>
    <url>/2021/07/27/b20d25af335e.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>经常会遇到将对象列表转换为对应的对象ID的列表，而且又讨厌写重复的代码。下面我们将用Jdk8的stream来实现这个功能</p>
</blockquote>
<h1 id="对象转对象的某个属性"><a href="#对象转对象的某个属性" class="headerlink" title="对象转对象的某个属性"></a>对象转对象的某个属性</h1><p><code>最重要还是利用了stream的map函数</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;TestUser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(TestUser.builder().name(<span class="string">&quot;杨过&quot;</span>).id(<span class="number">1</span>).build());</span><br><span class="line">        list.add(TestUser.builder().name(<span class="string">&quot;小龙女&quot;</span>).id(<span class="number">2</span>).build());</span><br><span class="line">        List&lt;Integer&gt; ids = list.stream()</span><br><span class="line">	        .map(TestUser::getId)</span><br><span class="line">	        .collect(Collectors.toList());</span><br><span class="line">        log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="关于stream-的map"><a href="#关于stream-的map" class="headerlink" title="关于stream()的map"></a>关于stream()的map</h1><p>本质上它是对数据流的一种映射关系定义，相当于它内部有自己的迭代器遍历，我们只需要在map中传入处理逻辑即可，map的输入是输入流的一个数据单元，输出可以是任意的。因此我们以后涉及到数据流映射的时候，都可以用它.</p>
<h1 id="对象某个属性转对象"><a href="#对象某个属性转对象" class="headerlink" title="对象某个属性转对象"></a>对象某个属性转对象</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        List&lt;TestUser&gt; userList = list.stream()</span><br><span class="line">	        .map(k-&gt;TestUser.builder().id(k).build())</span><br><span class="line">	        .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="关于stream-的flatmap"><a href="#关于stream-的flatmap" class="headerlink" title="关于stream()的flatmap"></a>关于stream()的flatmap</h1><blockquote>
<p>flatmap与map非常类似，不过我们从字面意思来理解，<code>map表示映射</code>，<code>flat表示平，展开</code>所以我们从命名可以这么理解，flatmap表示，将stream流中的所有子stream流合并。</p>
</blockquote>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;Integer,List&lt;TestUser&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;TestUser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(TestUser.builder().name(<span class="string">&quot;杨过&quot;</span>).id(<span class="number">1</span>).build());</span><br><span class="line">        list.add(TestUser.builder().name(<span class="string">&quot;小龙女&quot;</span>).id(<span class="number">2</span>).build());</span><br><span class="line">        map.put(<span class="number">1</span>,list);</span><br><span class="line">        map.put(<span class="number">2</span>,list);</span><br><span class="line">        List&lt;TestUser&gt; userList = map.values().stream()</span><br><span class="line">                .flatMap(Collection::stream)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//user size:4，每个stream被合并</span></span><br><span class="line">        log.info(<span class="string">&quot;user size:&#123;&#125;&quot;</span>,userList.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java OpenCV关于Mat的常用操作 修改尺寸 旋转 翻转 文字</title>
    <url>/2021/07/27/f3c53b0e721a.html</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>先说一个通用的规则，个人理解</p>
<ul>
<li>C语言中<code>CV::</code>对象，在Java是<code>Core</code> （org.opencv.core.Core）</li>
<li>-C语言中cv开头的方法，在Java是<code>Imgproc</code>(org.opencv.imgproc.Imgproc)</li>
<li>有了以上规则，遇到问题就可以搜索c版的opencv，比较java版的确实少</li>
</ul>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>在OpenCV中图片被存储在<code>Mat(org.opencv.core) </code>容器中</p>
<h1 id="修改尺寸"><a href="#修改尺寸" class="headerlink" title="修改尺寸"></a>修改尺寸</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Size size = <span class="keyword">new</span> Size(<span class="number">720</span>,<span class="number">680</span>);</span><br><span class="line">Mat dstMat= <span class="keyword">new</span> Mat();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * srcMat 原图，dstMat目标，size裁剪后大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Imgproc.resize(srcMat, dstMat, size);</span><br><span class="line">srcMat.release();</span><br><span class="line">srcMat = dstMat; <span class="comment">//释放资源</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mat dstMat= <span class="keyword">new</span> Mat();</span><br><span class="line"><span class="comment">//旋转90°</span></span><br><span class="line"><span class="keyword">int</span> angle = <span class="number">90</span>;</span><br><span class="line">Imgproc.warpAffine(srcMat, dstMat, Imgproc.getRotationMatrix2D(<span class="keyword">new</span> Point(dstMat.width() / <span class="number">2</span>, dstMat.height() / <span class="number">2</span>), angle, <span class="number">1.0</span>), size);</span><br><span class="line">srcMat.release();</span><br><span class="line">srcMat= dstMat;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mat dstMat= <span class="keyword">new</span> Mat();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * srcMat 原图，dstMat目标，</span></span><br><span class="line"><span class="comment"> * opencv翻转：</span></span><br><span class="line"><span class="comment"> * flipCode：</span></span><br><span class="line"><span class="comment"> * = 0 图像向下翻转 (垂直翻转)</span></span><br><span class="line"><span class="comment"> * &gt; 0 图像向右翻转（水平翻转）</span></span><br><span class="line"><span class="comment"> * &lt; 0 图像同时向下向右翻转 （水平垂直翻转）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Core.flip(srcMat, dstMat, mode);</span><br><span class="line">srcMat.release();</span><br><span class="line">srcMat = dstMat; <span class="comment">//释放资源</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="画矩形框"><a href="#画矩形框" class="headerlink" title="画矩形框"></a>画矩形框</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的顺序是GBR，不是RGB</span></span><br><span class="line">Scalar color = <span class="keyword">new</span> Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line"><span class="comment">//矩形框</span></span><br><span class="line">Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>;</span><br><span class="line">Imgproc.rectangle(mat, rect,color );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的顺序是GBR，不是RGB</span></span><br><span class="line">Scalar color = <span class="keyword">new</span> Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line"><span class="comment">//矩形框</span></span><br><span class="line">Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">Imgproc.putText(mat, <span class="string">&quot;Hello&quot;</span>, <span class="keyword">new</span> Point(rect.x, rect.y), FONT_HERSHEY_SIMPLEX, <span class="number">1</span>,color);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>如果要显示中文好像要添加底层的依赖库，暂时没弄</code></p>
<h1 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scalar color = <span class="keyword">new</span> Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line">Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>;</span><br><span class="line">Imgproc.line(mat, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height), color );</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开源自动刷新读写配置文件以及注释的工具类</title>
    <url>/2021/07/27/2cf466301077.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Java项目开发中，经常遇到将项目配置文件对外提供给运维人员配置使用。在Spring中已经很友好的提供了yml、properties的方式读取配置。<br>但是我们有这种场景，为了降低配置文件的运维难度，一份有详细注释的的配置文件是我们需要。当然我们期望的不仅仅是降低运维难度，我们还期望降低开发的开发难度。因此有了这个开源项目。</p>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://gitee.com/mathcoder23/bean-ini-store">https://gitee.com/mathcoder23/bean-ini-store</a></p>
<h1 id="项目功能-bean-ini-store"><a href="#项目功能-bean-ini-store" class="headerlink" title="项目功能(bean-ini-store)"></a>项目功能(bean-ini-store)</h1><ul>
<li>基于Java Bean。开发人员面向Bean对象开发。</li>
<li>基于Ini文件。运维人员面向Ini文件配置参数。</li>
<li>Bean与Ini文件双向绑定。</li>
<li>Ini文件修改，自动刷新到Bean</li>
<li>支持将Bean的备注信息，映射到Ini文件</li>
</ul>
<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><ul>
<li>1.需要进行映射的Bean对象需要继承抽象类<code>BaseBeanIni</code></li>
<li>2.Bean对象的类声明处使用<code>@IniFile</code>注解</li>
<li>3.Bean对象的属性使用<code>@IniField</code>注解</li>
<li>4.Bean对象使用线程安全的单例模式，然后调用<code>BaseBeanIni中的init()方法</code></li>
</ul>
<h2 id="IniFile注解说明"><a href="#IniFile注解说明" class="headerlink" title="@IniFile注解说明"></a>@IniFile注解说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ini配置文件注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox.top  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IniFile &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件路径，支持正反斜杆，会根据系统类型处理分隔符</span></span><br><span class="line"><span class="comment">     * 配置文件会自动生成，将bean的默认值写到文件中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 配置文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">storePath</span><span class="params">()</span> <span class="keyword">default</span> &quot;config/config.ini&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">charset</span><span class="params">()</span> <span class="keyword">default</span> &quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 多行配置文件注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] fileComments() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否开启配置文件修改实时生效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">autoRefreshFile</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IniField注解"><a href="#IniField注解" class="headerlink" title="@IniField注解"></a>@IniField注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ini配置文件字段注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox.top  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IniField &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分组名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">group</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 配置文件中注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] comments() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 组字段注解，仅在最后一个<span class="doctag">@IniFiled</span>中生效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] groupComments() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="demo案例"><a href="#demo案例" class="headerlink" title="demo案例"></a>demo案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> org.pettyfox.utils.io.bis.annotation.IniField;</span><br><span class="line"><span class="keyword">import</span> org.pettyfox.utils.io.bis.annotation.IniFile;</span><br><span class="line"><span class="keyword">import</span> org.pettyfox.utils.io.bis.bean.BaseBeanIni;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox.top  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@IniFile(fileComments = &#123;</span></span><br><span class="line"><span class="meta">         &quot;--- 项目配置文件 ---&quot;</span></span><br><span class="line"><span class="meta">        ,&quot;--- 配置实时生效，请运维人员了解每个字段含义后配置 ---&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBeanIni</span> <span class="keyword">extends</span> <span class="title">BaseBeanIni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_BOOT = <span class="string">&quot;boot&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_LOG = <span class="string">&quot;log&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DemoBeanIni</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DemoBeanIni INSTANCE = <span class="keyword">new</span> DemoBeanIni();</span><br><span class="line">    <span class="meta">@IniField</span></span><br><span class="line">    <span class="keyword">private</span> String backupDir = <span class="string">&quot;/backups&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;认证id&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;认证key&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String appKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> backupDays = <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;web端口号&quot;&#125;,group = GROUP_BOOT,groupComments=&#123;&quot;此组配置，修改后重启生效&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> webPort = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;webIP，不填自动获取&quot;&#125;,group = GROUP_BOOT)</span></span><br><span class="line">    <span class="keyword">private</span> String webIp = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(group = GROUP_BOOT)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean https = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;是否显示日志&quot;&#125;,group = GROUP_LOG,groupComments=&#123;&quot;此组配置，修改实时生效&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> show = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;日志等级&quot;,&quot;ERROR、WARN、INFO、DEBUG&quot;&#125;,group = GROUP_LOG)</span></span><br><span class="line">    <span class="keyword">private</span> String level = <span class="string">&quot;INFO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IniField(comments = &#123;&quot;日志保留天数&quot;&#125;,group = GROUP_LOG)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expireDay = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.pettyfox.utils.io.bis</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IniFileWriteReadTest</span> <span class="keyword">extends</span> <span class="title">Specification</span> </span>&#123;</span><br><span class="line">    def <span class="string">&quot;init test&quot;</span>() &#123;</span><br><span class="line">        given:</span><br><span class="line">        def bean = DemoBeanIni.INSTANCE</span><br><span class="line">        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(&#123;</span><br><span class="line">            -&gt; println(bean.toString())</span><br><span class="line">        &#125;, <span class="number">2</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">        sleep(<span class="number">1000000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>开源</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 聚合工程 Could not find artifact 父模块找不到异常</title>
    <url>/2021/07/26/f783e6e206e5.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>我们在利用Maven建立一个多模块的聚合工程时，可能会遇到这样的问题，那就是<code>Could not find artifact xxx</code>，并且不能找到的artifact 正是父工程</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><img src="/2021/07/26/f783e6e206e5/1627294931358.png" class="">

<p>此图是我聚合工程的一个项目，在对根pom.xml进行打包的时候<code>mvn package</code>报了如下错误<br><code>Could not find artifact com.xxx:xxx:xxx in nexus-aliyun (https://maven.aliyun.com/repository/public)</code></p>
<h2 id="父pom-artifactId-xxx"><a href="#父pom-artifactId-xxx" class="headerlink" title="父pom(artifactId:xxx)"></a>父pom(artifactId:xxx)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx/bbb<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h1 id="子pom-我只贴有问题的-artifactId-bbb"><a href="#子pom-我只贴有问题的-artifactId-bbb" class="headerlink" title="子pom(我只贴有问题的)(artifactId:bbb)"></a>子pom(我只贴有问题的)(artifactId:bbb)</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这里就有点<br>疑惑了，明明父工程正在package，为什么还要去找它呢，原因是出在子工程的parent就是父工程</p>
<h1 id="解决方法一-不推荐"><a href="#解决方法一-不推荐" class="headerlink" title="解决方法一(不推荐)"></a>解决方法一(不推荐)</h1><p>上述工程中，子模块 bbb会去依赖父模块xxx，但是如果父模块没有install到本地时，maven就会去远程仓库取，从而导致了那样的错误，此方法的解决方法是暂时把父工程的<code>modules</code>全部注释,然后install之后，在解除注释，这样的原理就是在install中把父工程给生成出来，子模块编译时自然就可以找到父模块，但这种方法的问题不仅麻烦，而且父模块还不能实时更新。所以不推荐这种方法。</p>
<h1 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h1><blockquote>
<p>这里先说，子模块之所以要去拉远程仓库的本质是找不到父工程，虽然我们在parent声明了父工程，但是如何去得到他我们需要定义，这时候我们就要用到<code>relativePath</code>属性了</p>
</blockquote>
<ol>
<li>在默认情况下<code>relativePath</code>的默认值是<code>../pom.xml</code>它是先去寻找当前工程的上级目录的pom.xml为父工程，当找不到时，就去找本地仓库，当本地仓库找不到时，就是去远程仓库。</li>
<li>我们上述工程有问题的子模块之所以出问题，是因为子模块的工程路径变成了xxx/bbb,路径结构如下</li>
</ol>
<p>–pom.xml<br>–xxx<br>—bbb<br>—-pom.xml<br>在bbb文件夹的pom.xml默认是寻找上级目录的<code>pom.xml</code>,但是由于xxx不是一maven结构的工程，因此我们应该在bbb模块中配置    <code>&lt;relativePath&gt;../../pom.xml&lt;/relativePath&gt;</code>这样在package时，便能找到父工程了，也不用每次去install父工程。</p>
<h1 id="另一个细节"><a href="#另一个细节" class="headerlink" title="另一个细节"></a>另一个细节</h1><p>我们在用IDEA开发时目录结构有时会是这样</p>
<img src="/2021/07/26/f783e6e206e5/1627294931358.png" class="">
<ol>
<li>小箭头的文件夹图标没有被识别成模块，只是单纯的被解释成文件夹</li>
<li>大箭头的文件夹图标被识别成模块</li>
<li>所以我们还可以将<code>小箭头的文件夹新增一个pom.xml</code>来传递父引用，这样也能处理问题。</li>
</ol>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV4.12在Centos7和Ubuntu18下的安装</title>
    <url>/2021/07/26/723c6bc8871c.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="OpenCV源码下载"><a href="#OpenCV源码下载" class="headerlink" title="OpenCV源码下载"></a>OpenCV源码下载</h1><p><a href="https://github.com/opencv/opencv">Github地址</a>，如果下载比较慢的话自己想想办法，额外安利一个加速吧：<a href="https://shrill-pond-3e81.hunsh.workers.dev/">github加速</a><br><code>之后的OpenCV将会在/home/api-service/opencv下进行编译</code><br><code>下载的openCV包在/home/api-service/package/opencv-4.1.2.tar.gz</code><br><code>安装的基础环境很重要，否则会导致opencv在编译后某些功能不能正常使用</code></p>
<h1 id="CentOS7下OpenCV4-12安装"><a href="#CentOS7下OpenCV4-12安装" class="headerlink" title="CentOS7下OpenCV4.12安装"></a>CentOS7下OpenCV4.12安装</h1><h4 id="更新CentOS国内源"><a href="#更新CentOS国内源" class="headerlink" title="更新CentOS国内源"></a>更新CentOS国内源</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line">wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h4 id="OpenCV基础环境"><a href="#OpenCV基础环境" class="headerlink" title="OpenCV基础环境"></a>OpenCV基础环境</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">yum install -y cmake3</span><br><span class="line">yum install -y gtk2-devel</span><br><span class="line">yum install -y ant</span><br><span class="line">yum install -y epel-release</span><br><span class="line">sudo rpm -import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br><span class="line">yum install -y ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>
<h4 id="解压OpenCV"><a href="#解压OpenCV" class="headerlink" title="解压OpenCV"></a>解压OpenCV</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir -p /home/api-service/opencv</span><br><span class="line">tar -zxvf /home/api-service/package/opencv-4.1.2.tar.gz -C /home/api-service/opencv</span><br></pre></td></tr></table></figure>
<h4 id="编译OpenCV"><a href="#编译OpenCV" class="headerlink" title="编译OpenCV"></a>编译OpenCV</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cd /home/api-service/opencv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成临时的build目录</span></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line"><span class="meta">#</span><span class="bash"> cmake3预编译</span></span><br><span class="line">cmake3 -D BUILD_SHARED_LIBS=ON -D BUILD_TESTS=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local/opencv/ ..</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译-会等比较久</span></span><br><span class="line">make -j12</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装到系统</span></span><br><span class="line">make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制相关库到系统环境</span></span><br><span class="line">cd /usr/local/opencv</span><br><span class="line">cp -r include /usr/local/</span><br><span class="line">cp -r share /usr/local/</span><br><span class="line">cd /usr/local/opencv/lib64</span><br><span class="line">cp libopencv* /usr/local/lib64</span><br><span class="line">vim /etc/ld.so.conf # (增加: /usr/local/lib64    /usr/local/lib )    </span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h1 id="Ubuntu18下OpenCV4-12安装"><a href="#Ubuntu18下OpenCV4-12安装" class="headerlink" title="Ubuntu18下OpenCV4.12安装"></a>Ubuntu18下OpenCV4.12安装</h1><h4 id="OpenCV基础环境-1"><a href="#OpenCV基础环境-1" class="headerlink" title="OpenCV基础环境"></a>OpenCV基础环境</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">apt install -y build-essential &amp;&amp; \</span><br><span class="line">apt install -y cmake git pkg-config libgtk2.0-dev &amp;&amp; \</span><br><span class="line">apt install -y python-dev python-numpy libtbb2 libtbb-dev &amp;&amp;  \</span><br><span class="line">apt install -y libjpeg-dev libpng-dev libtiff5-dev libdc1394-22-dev &amp;&amp; \</span><br><span class="line">apt install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev liblapacke-dev &amp;&amp; \</span><br><span class="line">apt install -y libxvidcore-dev libx264-dev &amp;&amp; \</span><br><span class="line">apt install -y libatlas-base-dev gfortran &amp;&amp; \</span><br><span class="line">apt install -y ant &amp;&amp; \</span><br><span class="line">apt install -y ffmpeg</span><br></pre></td></tr></table></figure>
<h4 id="解压OpenCV-1"><a href="#解压OpenCV-1" class="headerlink" title="解压OpenCV"></a>解压OpenCV</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir -p /home/api-service/opencv</span><br><span class="line">tar -zxvf /home/api-service/package/opencv-4.1.2.tar.gz -C /home/api-service/opencv</span><br></pre></td></tr></table></figure>
<h4 id="编译OpenCV-1"><a href="#编译OpenCV-1" class="headerlink" title="编译OpenCV"></a>编译OpenCV</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cd /home/api-service/opencv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成临时的build目录</span></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里BUILD_SHARED_LIBS=OFF才会编译出JAVA动态库，我也搞不懂为啥</span></span><br><span class="line">cmake -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local/opencv/ ..</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译会比较久，耐心等待</span> </span><br><span class="line">make -j12 </span><br><span class="line">make install</span><br><span class="line">/bin/bash -c &#x27;echo &quot;/usr/local/lib&quot; &gt; /etc/ld.so.conf.d/opencv.conf&#x27;</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure>

<p><code>上面的流程一个基础的OpenCV还是比较容易安装出来的，主要的还是某些功能是否完整，一方面要确认系统的安装环境是否支持，我们需要看cmake构建的那个清单，看看是否支持到，否则就排查一下问题。</code></p>
<h1 id="带JAVA库的编译"><a href="#带JAVA库的编译" class="headerlink" title="带JAVA库的编译"></a>带JAVA库的编译</h1><blockquote>
<p>由于我这边是Java开发，因此需要编译出<code>libopencv_java412.so库</code>在CentOS7上正常，但是在Ubuntu上发现有问题，Java库始终编译不出来。可能的原因是一般Ubuntu的软件库版本会高些，因为装了ant后，似乎Java11也被装进去了。所以直接把java11的二进制文件删了，然后重新安装Jdk1.8，最后在配置JAVA_HOME以及PATH的java路径。JAVA_HOME必须配置为了opencv编译能够读取到它。然后cmake看看JAVA项的编译清单是否YES最后make以及install后。查看<code>/share/java/opencv4/java/libopencv_java412.so</code>是否存在</p>
</blockquote>
<p><code>坑多，祝各位好运~</code></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>ScheduledThreadPoolExecutor Java 线程池吞掉未捕获异常</title>
    <url>/2021/07/27/a91f1802d1a4.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在线上发现了很诡异的事情，某个服务的线程处理运行很不稳定，经常性不能正常工作，但是也排查不出来问题根源。最终确定了原因是<br>在使用<code>scheduleAtFixedRate</code>时，Runnable中发生了未捕获异常，并且未配置<code>uncaughtExceptionHandler</code>导致异常发生后，日志直接被吞了。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>配置<code>uncaughtExceptionHandler</code>处理类,但是这个的处理逻辑是由线程池决定了，在特定的场景下，我们不清楚线程池的具体实现，需要查看代码</p>
<h2 id="方法二-推荐"><a href="#方法二-推荐" class="headerlink" title="方法二(推荐)"></a>方法二(推荐)</h2><p>自定义抽象的Runnable，实现异常捕获，当有特定的异常处理逻辑，如果是通用的可以继承<code>AbstractCaughtRunnable</code>，如果是特例的可以重写<code>exceptionHandler</code>方法，但这种方式意味着<code>uncaughtExceptionHandler</code>无法生效，如果想要生效也可以抛出未捕获异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCaughtRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            caughtAndRun();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            exceptionHandler(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕获并运行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">caughtAndRun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scheduledExecutorService.scheduleAtFixedRate(new AbstractCaughtRunnable()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void caughtAndRun() &#123;</span><br><span class="line">                throw new RuntimeException(&quot;exception&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,0, 10, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<h1 id="线程池吞掉异常的测试"><a href="#线程池吞掉异常的测试" class="headerlink" title="线程池吞掉异常的测试"></a>线程池吞掉异常的测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;scheduleAtFixedRate&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">0</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">&quot;submit&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> Callable&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;Callable&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">&quot;execute&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread.sleep(<span class="number">2000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过以上的测试 处理execute会抛出异常外，其他按照任务的方式提交都应该对异常进行处理</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot @RequestParam的required=true但参数依然为null</title>
    <url>/2021/07/27/cf1efae0195f.html</url>
    <content><![CDATA[<h1 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h1><p>使用Spring Boot的@RequestParam注解时，我知道required的默认值是true，理论上来讲，被注解标注的参数如果为null，Spring Boot应该抛出异常。但实际上没有。</p>
<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">public</span> RestObjectResponse&lt;xx&gt; <span class="title">xxx</span><span class="params">(<span class="meta">@RequestParam(value = &quot;role&quot;)</span>UserRole role)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的代码来看，如果role为null，应该会直接抛出异常，因此在内部的代码中我就没有校验role是否为null，但事实上null被传进来了。</p>
<h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><p>作为常用的类型，比如Integer、String等，为null会抛出异常。我们这个是枚举类型，遇到这样的问题，我们先思考下面的三个问题</p>
<ul>
<li><code>required=true</code>是判断传入的url参数或body参数为空吗？</li>
<li><code>required=true</code>是判断最终方法传入被RequestParam修饰的参数对象为空吗？</li>
<li>是不是对枚举的序列化处理出现了什么问题</li>
</ul>
<h2 id="先分析枚举序列化"><a href="#先分析枚举序列化" class="headerlink" title="先分析枚举序列化"></a>先分析枚举序列化</h2><p>因为我自定义了枚举的序列化，但是在反序列化过程中直接返回的null值。这也应该是造成参数为null的根源。那么通过这个现象我们可以思考，required=true判断的可能仅仅是参数是否为null，当参数不为空，但在反序列化过程中产生的null，是不被检查的。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>为了保证required=true 的可信度，在反序列化时，不应该返回null，如果出现不能反序列化的情况，应该抛出异常。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot集成Guava EventBus并注入Bean</title>
    <url>/2021/07/26/e138b9b4c37a.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>基于事件总线的方式开发，可以使我们代码更加简洁，而且解耦</li>
<li>Guava的EventBus是个轻量级的事件总线，而且事件间可以相互隔离，所以更加灵活多变</li>
<li>本文不讲EventBus的具体功能，只考虑应用场景<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1></li>
<li>在Spring中集成Guava的EventBus，并友好的注入Bean</li>
<li>消费者只需要实现接口，即可接收事件消息</li>
<li>生产者只需要关心消息的生产</li>
<li>事件总线只需要关心生产投递与消息消费的线程、限流等问题</li>
</ul>
<h1 id="事件总线介绍"><a href="#事件总线介绍" class="headerlink" title="事件总线介绍"></a>事件总线介绍</h1><h2 id="概览图"><a href="#概览图" class="headerlink" title="概览图"></a>概览图</h2><img src="/2021/07/26/e138b9b4c37a/1627295749602.png" class="">
<p>从上面的事件流图我们可以看到，事件总线是生产者与消费者的枢纽，<br>我们按照这样的方式，使生产者和消费者解耦，这也是我们为什么要选择事件总线的原因。而且还有重要的是，整个流程被划分成了三块：生成者、消费者、事件枢纽。每一块有只专注自己该干的事。当然这其实就是消息队列，比如其中的限流功能、过滤器功能等等。但我们在轻量级架构使用轻量级的消息队列就好，没必要直接就来Rocket、Rabbit、Kafka。</p>
<h1 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h1><blockquote>
<p>这是我定义的三个基础类，为我们集成到Spring 打下基础</p>
</blockquote>
<img src="/2021/07/26/e138b9b4c37a/1627295749603.png" class="">

<h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><h3 id="IEventBus"><a href="#IEventBus" class="headerlink" title="IEventBus"></a>IEventBus</h3><blockquote>
<p>顶级事件管理接口，提供消费者订阅、事件投递</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/25 11:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEventBus</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 事件实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 消费者对象，默认以class为key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addConsumer</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 消费者对象，默认以class为key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeConsumer</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName 扫描包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scanConsumer</span><span class="params">(String packageName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="AbstractSpringEventBus"><a href="#AbstractSpringEventBus" class="headerlink" title="AbstractSpringEventBus"></a>AbstractSpringEventBus</h3><blockquote>
<p>这个抽象类是Guava EventBus和Spring的桥梁，当然严格来讲是子类实现与Spring的桥梁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/25 12:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSpringEventBus</span> <span class="keyword">implements</span> <span class="title">IEventBus</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = applicationContext;</span><br><span class="line">        <span class="keyword">this</span>.scanConsumer(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanConsumer</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">        context.getBeansOfType(IEventConsumer.class).forEach((k,v)-&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>.addConsumer(v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="IEventConsumer"><a href="#IEventConsumer" class="headerlink" title="IEventConsumer"></a>IEventConsumer</h3><blockquote>
<p>消费者需要实现它</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/25 12:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEventConsumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">(T event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h2><blockquote>
<p>假设我们现在对用户相关行事件管理</p>
</blockquote>
<h3 id="实现事件总线"><a href="#实现事件总线" class="headerlink" title="实现事件总线"></a>实现事件总线</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.AsyncEventBus;</span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.EventBus;</span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.SubscriberExceptionContext;</span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.SubscriberExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户事件总线</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/25 12:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEventBus</span> <span class="keyword">extends</span> <span class="title">AbstractSpringEventBus</span> <span class="keyword">implements</span>  <span class="title">SubscriberExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecognizeEventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//异步事件配置线程池</span></span><br><span class="line">        eventBus = <span class="keyword">new</span> AsyncEventBus(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">10</span>,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;()), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        eventBus.post(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConsumer</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        eventBus.register(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeConsumer</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        eventBus.unregister(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(Throwable exception, SubscriberExceptionContext context)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;user event handler exception&quot;</span>, exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="投递消息"><a href="#投递消息" class="headerlink" title="投递消息"></a>投递消息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Resource </span><br><span class="line">private UserEventBus bus;</span><br><span class="line">...</span><br><span class="line">	bus.post(xxxEvent)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.Subscribe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pettyfox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/25 13:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecognizeRecordNotify</span> <span class="keyword">implements</span> <span class="title">IEventConsumer</span>&lt;<span class="title">XxxEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(XxxEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;event:&#123;&#125;&quot;</span>, JSON.toJSONString(event));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者方法需要加<code>@Subscribe</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>guava</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security设置X-Frame-Options响应头</title>
    <url>/2021/07/27/85b9198f19bc.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>被Security管理的接口中，其中可能包含html页面，而前端在开发时，可能使用frame标签。为了系统安全性，默认情况下X-Frame-Options是禁止的。</p>
</blockquote>
<h1 id="HTTP-响应头X-Frame-Options-说明"><a href="#HTTP-响应头X-Frame-Options-说明" class="headerlink" title="HTTP 响应头X-Frame-Options 说明"></a>HTTP 响应头X-Frame-Options 说明</h1><p><code>X-Frame-Options</code> HTTP 响应报头可以被用来指示一个浏览器是否应该被允许在一个以呈现页面<code>&lt;frame&gt;，&lt;iframe&gt;或&lt;object&gt;</code>。通过确保其内容未嵌入其他网站，网站可以使用此功能来避免 点击劫持 攻击</p>
<h2 id="取值说明"><a href="#取值说明" class="headerlink" title="取值说明"></a>取值说明</h2><table>
<thead>
<tr>
<th>HTTP响应头</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>X-Frame-Options</td>
<td>DENY</td>
<td>不管来自哪里，只要使用frame等标签，都无法显示，这里要注意，单独访问html页面是可以的</td>
</tr>
<tr>
<td>X-Frame-Options</td>
<td>SAMEORIGIN</td>
<td>只要是同源，可以显示html</td>
</tr>
<tr>
<td>X-Frame-Options</td>
<td>ALLOW-FROM <a href="https://xxx.com/">https://xxx.com/</a></td>
<td>只要是允许的url，可以显示html</td>
</tr>
</tbody></table>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>对这个值的处理，仅仅是浏览器客户端的行为模式，请求数据依然会传递</p>
<h1 id="Spring-Security-配置"><a href="#Spring-Security-配置" class="headerlink" title="Spring Security 配置"></a>Spring Security 配置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">           <span class="comment">// @formatter:off</span></span><br><span class="line">           http.headers().frameOptions().sameOrigin()</span><br><span class="line">           <span class="comment">//.and()... more config</span></span><br><span class="line">           ;</span><br><span class="line">           <span class="comment">// @formatter:on</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring-security</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成Spock-Groovy测试框架从零开始</title>
    <url>/2021/07/27/d611ad68d1f2.html</url>
    <content><![CDATA[<p>其他SpringBoot2集成Spock真的是千篇一律,而且一些细节问题还是比较多.花费了2个小时才集成完毕.此篇文章将会从maven导包开始,介绍如何集成Spock以及使用,如果有任何不足或问题之处请斧正.</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于Groovy,Spock以及SpringBoot2测试本身的概念这里就不详细说了,资料也很多</p>
<h1 id="maven集成Spock-Groovy"><a href="#maven集成Spock-Groovy" class="headerlink" title="maven集成Spock,Groovy"></a>maven集成Spock,Groovy</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.spockframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spock-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3-RC1-groovy-2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.spockframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spock-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3-RC1-groovy-2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里注意一下,</p>
<ul>
<li>Groovy的导入使用<code>  &lt;type&gt;pom&lt;/type&gt;</code></li>
<li>关于版本现在是2020年4月,目前的Groovy的最新版已经到3了.Spock的最新版到了2,我是什么都想用最新的性格,但是稍微尝试了一下,发现这玩意版本似乎有点混乱跑着有点问题.所以就先集成计较稳定的老版本吧.</li>
<li>任何库的版本,以及对应关系都是非常重要的,请重视</li>
</ul>
<h1 id="创建Groovy的测试类包位置"><a href="#创建Groovy的测试类包位置" class="headerlink" title="创建Groovy的测试类包位置"></a>创建Groovy的测试类包位置</h1><img src="/2021/07/27/d611ad68d1f2/1627349184923.png" class="">
<img src="/2021/07/27/d611ad68d1f2/1627349184924.png" class="">

<p>由于我们的语言使用Groovy,所以创建一个groovy文件夹,并且右键<code>Mark Directory as-&gt;Test Sources Root</code>这样文件夹就被我们绿了.绿了后的作用可以很友好的被IDEA发现,并且运行测试类</p>
<h1 id="创建Groovy的测试类-并且使用Spock"><a href="#创建Groovy的测试类-并且使用Spock" class="headerlink" title="创建Groovy的测试类,并且使用Spock"></a>创建Groovy的测试类,并且使用Spock</h1><p>我不太喜欢手动创建测试了,这样显得太累了.我们可以得到IDEA帮助,先到一个要生成测试的类中,按住<code>Ctrl+Shift+T</code>选择Spock创建测试类,类似下面这样</p>
<img src="/2021/07/27/d611ad68d1f2/1627349184924.png" class="">
<img src="/2021/07/27/d611ad68d1f2/1627349184925.png" class="">
<p>点击创建后会非常友好的在我们刚才创建的groovy文件夹中生成测试文件类</p>
<h1 id="简单修改测试文件类-让Spock运行起来"><a href="#简单修改测试文件类-让Spock运行起来" class="headerlink" title="简单修改测试文件类,让Spock运行起来"></a>简单修改测试文件类,让Spock运行起来</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClockRecordBizTest2222222</span> <span class="keyword">extends</span> <span class="title">Specification</span> </span>&#123;</span><br><span class="line">    def <span class="string">&quot;test userClock&quot;</span>() &#123;</span><br><span class="line">        expect:</span><br><span class="line">        <span class="number">1</span>==<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以点击方法左侧的运行按钮,如果运行成功了.并且提示测试没通过那么久说明已经正确的集成可Spock以及Groovy</p>
<h1 id="Spock支持SpringBoot"><a href="#Spock支持SpringBoot" class="headerlink" title="Spock支持SpringBoot"></a>Spock支持SpringBoot</h1><p>终于到了重头戏,我们需要集成SpringBoot的测试.代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.iseeface.guard.service.attendance.ApplicationSpringBootTest</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ActiveProfiles</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="meta">@ActiveProfiles(&quot;test&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes= ApplicationSpringBootTest.class,webEnvironment =SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClockRecordBizTest2222222</span> <span class="keyword">extends</span> <span class="title">Specification</span> </span>&#123;</span><br><span class="line">    def <span class="string">&quot;test userClock&quot;</span>() &#123;</span><br><span class="line">        expect:</span><br><span class="line">        <span class="number">1</span>==<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击运行就会出现SpringBoot启动的日志.这里说明一下我们使用SpringBoot2的<code>@SpringBootTest</code>注解来初始化测试入口.<br><code>ApplicationSpringBootTest</code>此类是我自己创建SpringBoot初始化入口类,请酌情修改</p>
<h1 id="让集成Spock的SpringBoot测试更加简洁"><a href="#让集成Spock的SpringBoot测试更加简洁" class="headerlink" title="让集成Spock的SpringBoot测试更加简洁"></a>让集成Spock的SpringBoot测试更加简洁</h1><p>在上面我们通过@SpringBootTest注解实现注释,@ActiveProfiles注解配置环境文件,但是如果我们每个测试类都要写这两个代码就显得太麻烦了.所以我们建立一个接口类用来配置这些注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里此类路径必须在待测试类的路径中.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ActiveProfiles(&quot;test&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes= ApplicationSpringBootTest.class,webEnvironment =SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseSpringBootTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基于BaseSpringBootTest的Spock测试"><a href="#基于BaseSpringBootTest的Spock测试" class="headerlink" title="基于BaseSpringBootTest的Spock测试"></a>基于BaseSpringBootTest的Spock测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.iseeface.guard.service.attendance.BaseSpringBootTest</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BaseSpringBootTest 接口为SpringBoot测试的注解入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClockRecordBizTest2222222</span> <span class="keyword">extends</span> <span class="title">Specification</span> <span class="keyword">implements</span> <span class="title">BaseSpringBootTest</span> </span>&#123;</span><br><span class="line">    def <span class="string">&quot;test userClock&quot;</span>() &#123;</span><br><span class="line">        expect:</span><br><span class="line">        <span class="number">1</span>==<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样看着是不是更加简洁了,而且很灵活,因为我们测试的一些入口配置是很可能修改的.<br>这里有个关键是<code>BaseSpringBootTest</code> 是接口类,而不是抽象类或类,因为如果基类继承<code>Specification</code>就不能很友好的使用Spock了.并且如果使用接口可以很容易扩展测试类的其他功能.比如IO相关的测试,云服务相关的测试.</p>
<h1 id="额外赠送SpringBootTest-groovy配置"><a href="#额外赠送SpringBootTest-groovy配置" class="headerlink" title="额外赠送SpringBootTest.groovy配置"></a>额外赠送SpringBootTest.groovy配置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意这里的中括号是数组的意思,在groovy中,数组实例用[]表示,java中是&#123;&#125;</span></span><br><span class="line"><span class="meta">@ComponentScan([&quot;com.xxx.xxx&quot;])</span></span><br><span class="line"><span class="meta">@MapperScan([&quot;com.xxx.xxx.mapper&quot;])</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationSpringBootTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>这里千万注意,我这个是groovy文件,在groovy中的数组是使用[],而不是&#123;&#125;</code><br>本文到这里就结束了,写的很简单.没有过多地介绍SpringBoot的测试过程,以及Spock如何使用.这些将在其他文章中总结.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>TLS双向认证之生成双端证书信息</title>
    <url>/2021/07/26/71ba5484d974.html</url>
    <content><![CDATA[<h1 id="TLS双向认证需要的认证文件"><a href="#TLS双向认证需要的认证文件" class="headerlink" title="TLS双向认证需要的认证文件"></a>TLS双向认证需要的认证文件</h1><ul>
<li>服务端：server.crt、server.key</li>
<li>客户端：client.crt、client.key</li>
<li>双方信任的：root.crt</li>
</ul>
<p><code>说明：服务端和客户端都需要这三个重要的认证文件：</code></p>
<ul>
<li>根证书，双方必须信任这个证书，因为对方的证书就是由此根证书颁发的</li>
<li>自己的证书，TLS通讯的加密基础</li>
<li>自己的密钥，TLS通讯的加密基础</li>
</ul>
<h1 id="制作根证书"><a href="#制作根证书" class="headerlink" title="制作根证书"></a>制作根证书</h1><h2 id="第三方机构的根证书"><a href="#第三方机构的根证书" class="headerlink" title="第三方机构的根证书"></a>第三方机构的根证书</h2><p>这是比较常见的根证书，一般以付费的方式购买签发的证书，这种的好处就是作为客户端、或某些服务器而言通讯基础建立在app、浏览器上。作为C端不用再去信任根证书(默认已经安装了服务商的根证书)，但我们作为tcp层的自研通讯而言，在不涩及开放、生态、系统级的通讯规范下，用自己生成的根证书即可</p>
<h2 id="自签根证书-基于openssl"><a href="#自签根证书-基于openssl" class="headerlink" title="自签根证书(基于openssl)"></a>自签根证书(基于openssl)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/tls/root</span><br><span class="line">cd /home/tls/root #文件有点多所有先创个文件夹放着</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1，生成根证书密钥、牢记密码(root.key)</span></span><br><span class="line">openssl genrsa -aes256 -out root.key 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2，生成根证书请求文件(root.csr)</span></span><br><span class="line">openssl req -new -key root.key -out root.csr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3，自签根证书(root.crt),10年有效期，别写一年，太短了</span></span><br><span class="line">openssl x509 -req -days 3650 -sha256 -extensions v3_ca -signkey root.key -in root.csr -out root.crt</span><br></pre></td></tr></table></figure>
<p>至此重要的两个文件生成了<code>root.key</code>和<code>root.crt</code>其中root.key和密码妥善保管，不能泄露。</p>
<h2 id="根证书签发证书"><a href="#根证书签发证书" class="headerlink" title="根证书签发证书"></a>根证书签发证书</h2><p>这步就是生成服务端和客户端的证书和密钥了。不管是服务端和客户端过程都是一样的，重复此步就行。下面以</p>
<h3 id="服务端证书"><a href="#服务端证书" class="headerlink" title="服务端证书"></a>服务端证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/tls/server</span><br><span class="line">cd /home/tls/server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1，生成根证书密钥、牢记密码(server.key)</span></span><br><span class="line">openssl genrsa -aes256 -out server.key 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2，生成根证书请求文件(server.csr)</span></span><br><span class="line">openssl req -new -key server.key -out root.csr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3,使用root.crt签发证书(server.crt)</span></span><br><span class="line">openssl x509 -req -days 3650 -sha256 -extensions v3_req -CA ../root/root.crt -CAkey ../root/root.key -CAserial ca.srl -CAcreateserial -in server.csr -out server.crt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4，由于java读取密钥是pkcs8 格式所以转换密钥格式</span></span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in server.key -outform PEM -nocrypt &gt; server.pkcs8.key</span><br></pre></td></tr></table></figure>
<h3 id="客户端证书"><a href="#客户端证书" class="headerlink" title="客户端证书"></a>客户端证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/tls/client</span><br><span class="line">cd /home/tls/client</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1，生成根证书密钥、牢记密码(client.key)</span></span><br><span class="line">openssl genrsa -aes256 -out client.key 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2，生成根证书请求文件(client.csr)</span></span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3,使用root.crt签发证书(client.crt)</span></span><br><span class="line">openssl x509 -req -days 3650 -sha256 -extensions v3_req -CA ../root/root.crt -CAkey ../root/root.key -CAserial ca.srl -CAcreateserial -in client.csr -out client.crt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4，由于java读取密钥是pkcs8 格式所以转换密钥格式</span></span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in client.key-outform PEM -nocrypt &gt; client.pkcs8.key</span><br></pre></td></tr></table></figure>

<p><code>在生成证书时，前两步都是一样的，就是在颁发证书有点区别一个是自签、一个是被签</code>这样下来后是不是感觉很简单啊。</p>
<h3 id="最终需要使用的文件"><a href="#最终需要使用的文件" class="headerlink" title="最终需要使用的文件"></a>最终需要使用的文件</h3><ul>
<li>root/root.crt</li>
<li>server/server.crt</li>
<li>server/server.pkcs8.key</li>
<li>client/client.crt</li>
<li>client/client.pkcs8.key</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>tls</tag>
      </tags>
  </entry>
  <entry>
    <title>The last packet successfully received from the server was 59,866 milliseconds ago.  The last packet</title>
    <url>/2021/07/27/7ba8880b6010.html</url>
    <content><![CDATA[<p>com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</p>
<p>The last packet successfully received from the server was 59,866 milliseconds ago.  The last packet sent successfully to the server was 59,868 milliseconds ago.</p>
<blockquote>
<p>上面这个错误在网上有很多。基本上都是因为mysql的waite_time 和druid的连接回收机制配置上的问题。但是我的原因却不是这个</p>
</blockquote>
<p>首先理解这个错误的含义</p>
<ul>
<li>mysql的物理连接已经不可用了。上次成功使用此连接在59866毫秒之前。</li>
</ul>
<p>mysql物理连接不可用无非就是两种情况，客户端主动断开连接，服务端主动断开连接。从现象来将，物理连接被断开了是必然的。但是有想想60秒就断开连接？我又没改过mysql的相关配置，所以不应该是mysql端的问题。所以我把眼光放在了客户端。我的客户端是spring boot2+Druid的方式。</p>
<p>又不禁的问自己，为什么每次报这个错误基本上都是在60秒左右？</p>
<p>下面看看配置:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">druid:</span></span><br><span class="line">  <span class="attr">filters:</span> <span class="string">stat</span></span><br><span class="line">  <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">  <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span></span><br><span class="line">  <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">maxOpenPreparedStatements:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>并且在mysql中看一下连接进程的情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show full processlist; </span><br><span class="line">#查看超时参数配置</span><br><span class="line">show variables like &#x27;%timeout%&#x27;;</span><br></pre></td></tr></table></figure>



<p>发现到，此连接空闲(command=sleep)后，50秒时，此pid会断开。<code>timeBetweenEvictionRunsMillis</code>和<code>testWhileIdle</code>的作用是连接空闲大于timeBetweenEvictionRunsMillis毫秒后发送一个validationQuery，以确保连接有效。。。。无论是客户端还是服务端都是没问题的。那么究竟是什么原因呢？我们在乎的应该是为什么TCP连接会在50秒断开？我现在唯一能想到的就是客户端与mysq服务端的网络环境了，是不是有某个环节设置了tcp在空闲的时候自动关闭此连接？</p>
<p>我的mysql在docker中搭建，在外层加了一个HAProxy负载均衡。考虑到系统的TCP空闲超时肯定不会才50秒那么短，所以我查看了HAProxy的关键配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timeout client 50000</span><br><span class="line">timeout connect 5000</span><br><span class="line">timeout server 50000</span><br></pre></td></tr></table></figure>

<p>找到原因了吧。怪不得连接会在50秒断开。我们不动服务端网络配置，修改timeBetweenEvictionRunsMillis=10000。 10秒检测一次，没必要把这个检测间隔设置那么大。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>但凡涉及到超时的问题，无非就是查看mysql的连接状态，空闲时间，然后根据Druid配置。分析具体原因</p>
<p><a href="https://blog.csdn.net/weixin_39805338/article/details/81063493">Druid配置参数</a></p>
<h3 id="版权所有"><a href="#版权所有" class="headerlink" title="版权所有"></a>版权所有</h3><hr>
<blockquote>
<p>作者：简书@mt23，CSDN@mt23</p>
<p>出处：</p>
<p><a href="https://www.jianshu.com/u/71f8075c4151">https://www.jianshu.com/u/71f8075c4151</a></p>
<p><a href="https://blog.csdn.net/mathcoder23">https://blog.csdn.net/mathcoder23</a></p>
<p>发布时间：2019-09-11</p>
<p>版权所有，欢迎保留原文链接进行转载</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现div永远在底部并随滚动条滚动而在最底部</title>
    <url>/2021/07/26/8cd861825491.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>在显示网站的ICP备案信息时，我们希望ICP备案信息永远在最下面，但是当页面数据过多出现滚动条时，ICP备案信息也在最下面，而不是浮动在屏幕的底部<h1 id="布局的情况讨论"><a href="#布局的情况讨论" class="headerlink" title="布局的情况讨论"></a>布局的情况讨论</h1><h2 id="内容显示小于屏幕高度"><a href="#内容显示小于屏幕高度" class="headerlink" title="内容显示小于屏幕高度"></a>内容显示小于屏幕高度</h2><blockquote>
<p>如果我们采用flow流布局，直接把ICP信息放在div下面，当上层div高度很小时，ICP就会显示在中间</p>
</blockquote>
<h2 id="内容显示超过屏幕高度出现滚动条"><a href="#内容显示超过屏幕高度出现滚动条" class="headerlink" title="内容显示超过屏幕高度出现滚动条"></a>内容显示超过屏幕高度出现滚动条</h2><blockquote>
<p>如果我们用fixed将ICP固定那么就会出现底部显示的信息覆盖了内容</p>
</blockquote>
</li>
</ul>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><blockquote>
<p>为了兼容以上两种情况，我们使用<code>flex</code>设计布局框架</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.page</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#2b85e4</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.content-sub</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#baffa4</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.foot</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#7ed321</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        内容显示，无论高度是多少，ICP备案信息都将显示在最下方</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-sub&quot;</span>&gt;</span></span><br><span class="line">            填充块</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>ICP备案信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>上面的代码可以自行创建html运行测试，通过审核元素动态的调整content-sub元素的高度</code></p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="/2021/07/26/8cd861825491/1627295749594.png" class="">
<img src="/2021/07/26/8cd861825491/1627295749598.png" class="">
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>docker java8镜像 北京上海时间</title>
    <url>/2021/07/27/86ecefa80505.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>容器存放在阿里云公开镜像库中<br>基于alpine,新增了中国时区，解决时区问题</p>
</blockquote>
<h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><p><code>registry.cn-hangzhou.aliyuncs.com/mt23/jre8-alpine-shanghai</code></p>
<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER mt23</span><br><span class="line"></span><br><span class="line">ENV TZ=PRC</span><br><span class="line">RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line">#ADD target/demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line">#</span><br><span class="line">#ENTRYPOINT [&quot;sh&quot;,&quot;-c&quot;,&quot;java -jar /app.jar &quot;]</span><br></pre></td></tr></table></figure>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><blockquote>
<p>集成此镜像库，添加</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/mt23/jre8-alpine-shanghai:1.0.0</span><br><span class="line"></span><br><span class="line">ADD target/demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line">#对于spring boot项目 强制设定端口为8080</span><br><span class="line">ENTRYPOINT [&quot;sh&quot;,&quot;-c&quot;,&quot;java -Dserver.port=8080 -jar /app.jar &quot;]</span><br></pre></td></tr></table></figure>
<p><code>注意强制设定端口为8080 为一种规范，方便在使用此微服务映射端口</code></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker ps 命令无响应整个服务崩溃</title>
    <url>/2021/07/26/4aa3618140ba.html</url>
    <content><![CDATA[<h1 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h1><ul>
<li>使用2核4G的服务器搭建了基于docker的若干服务</li>
</ul>
<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><ul>
<li>首先说现象，整个服务崩溃无法访问</li>
<li>进入服务器后使用<code>docker ps</code>命令无响应</li>
</ul>
<h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><p>在线上经历来讲，我遇到过两次这个现象，分别在不同的项目中，排除与代码层面的问题，毫无疑问，这个问题是致命的，一旦发生，整个服务瘫痪，我记不清第一次出现这个问题是什么原因造成的了。所以下面说的问题定位方法仅供参考</p>
<ol>
<li>毫无疑问，重启服务器是能够解决的，但这是下下策，我们需要找到问题根源。</li>
<li>查看磁盘使用情况，<code>df -h</code></li>
<li>查看端口占用情况，确保是否是<code>docker崩溃</code> 使用<code>netstat -ntpl</code></li>
<li>内存是否充足，使用<code>free -m</code>或者<code>top</code>查看,（我估计这次事故就是此原因造成的，但我无法论证，因为我修改内核参数min_free_kbytes时，服务器居然重启了）</li>
</ol>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><ul>
<li>为了避免这种问题的发生，我们在部署docker时，肯定就要做到服务的抗重启后自动启动。这是服务恢复的重要环节</li>
<li>现在我估计是内存不足造成的。如果为了节约硬件成本，不想提升内存，那么我们就得优化Linux内存管理</li>
</ul>
<h1 id="Linux内存管理优化"><a href="#Linux内存管理优化" class="headerlink" title="Linux内存管理优化"></a>Linux内存管理优化</h1><p><a href="https://www.cnblogs.com/muahao/p/8082997.html">谨慎调整内核参数:vm.min_free_kbytes</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实看完这么多也没啥实质性的方案解决，仅仅是给一个处理思路，需要在意的因素。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>git导出不同版本的差异代码</title>
    <url>/2021/07/26/827589f0b2a6.html</url>
    <content><![CDATA[<h1 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h1><blockquote>
<p>有时候会遇到不同git仓库但要相互同步代码，而我们只需要导出修改后的代码，我们不可能一个个文件的拷贝出来吧，而且文件夹的目录结构手动处理不管是容错、还是工作量都是不小的开支。因此我们利用<code>git archive</code>指令来导出有差异的代码</p>
</blockquote>
<h1 id="两个已提交版本的代码差异导出"><a href="#两个已提交版本的代码差异导出" class="headerlink" title="两个已提交版本的代码差异导出"></a>两个已提交版本的代码差异导出</h1><ol>
<li>列出两个版本commit(可以使用git log、也可以使用IDEA的<code>VersionControl</code>右键<code>Copy Reversion Number</code>)</li>
<li>执行命令(win版)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive --format=zip HEAD $(git diff --name-only b083cb774d2a19d58ff043bbdea904316e9c84c5 6cc9baeb488f3d6e1f254ef092703351057f3250) &gt; diff.zip</span><br></pre></td></tr></table></figure></li>
<li>执行命令(linux版)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive --format=zip HEAD `git diff --name-only b083cb774d2a19d58ff043bbdea904316e9c84c5 6cc9baeb488f3d6e1f254ef092703351057f3250` &gt; diff.zip</span><br></pre></td></tr></table></figure>
<code>b083cb774d2a19d58ff043bbdea904316e9c84c5  表示老版commit</code><br><code>6cc9baeb488f3d6e1f254ef092703351057f3250 表示新版commit</code></li>
<li>注意点：</li>
</ol>
<ul>
<li>存在文件删除的，无法同步(未验证)</li>
<li>必须在git仓库的根目录执行</li>
<li>打包后的zip解压，直接粘贴到老版commit的基准代码就能实现代码合并了。</li>
</ul>
<h1 id="不同git仓库的代码持续同步方案"><a href="#不同git仓库的代码持续同步方案" class="headerlink" title="不同git仓库的代码持续同步方案"></a>不同git仓库的代码持续同步方案</h1><p>假设现在的场景，gitA仓库的代码，被发送给了B，并建立了新的仓库gitB。B要在此基础开发。同时又需要接受gitA仓库代码的bug修复。</p>
<ol>
<li>gitA与gitB确认代码基线</li>
<li>gitB仓库建立专属gitA的分支</li>
<li>gitB仓库建立B分支在此基础做开发任务</li>
<li>当gitA发布代码补丁，通过上述导出命令，生成zip后将代码同步到gitB仓库的gitA分支，最后合并gitA分支到B分支。</li>
<li>以上流程便实现既能开发又能维护补丁。当然fork也有这个功能，但这种情况考虑的是两个git仓库是私仓或不愿透露仓库信息的情况。</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle国内下载各种版本</title>
    <url>/2021/07/26/b73aecb4c089.html</url>
    <content><![CDATA[<blockquote>
<p>真的每次下载gradle安装包都要气炸。几十兆的东西非要折腾几个小时。但是相比以前已经好很多了，以前gradle官网都访问不了，现在至少还能访问，而且偶尔下载速度也很快。</p>
</blockquote>
<h1 id="gradle版本列表"><a href="#gradle版本列表" class="headerlink" title="gradle版本列表"></a>gradle版本列表</h1><p>一般用bin包就行了，我目前暂时放在百度云，版本只选了4.x.x、5.x.x、6.x.x的。而且选的是第二个x的最高版，因为一般第二个x的低版都是补丁。</p>
<p>链接：<a href="https://pan.baidu.com/s/12nAjKahkiWT2SePBMVscOw">https://pan.baidu.com/s/12nAjKahkiWT2SePBMVscOw</a><br>提取码：a2zd </p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>html用原生锚点定位在vue中兼容页内锚点定位的简单方法</title>
    <url>/2021/07/26/97741733145d.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Html原生锚点定位的方法"><a href="#Html原生锚点定位的方法" class="headerlink" title="Html原生锚点定位的方法"></a>Html原生锚点定位的方法</h1><blockquote>
<p>html中锚点定位只需要做两件事</p>
</blockquote>
<h2 id="1、在锚点元素定义id值"><a href="#1、在锚点元素定义id值" class="headerlink" title="1、在锚点元素定义id值"></a>1、在锚点元素定义id值</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>定位位置<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、使用a标签或修改location-hash值"><a href="#2、使用a标签或修改location-hash值" class="headerlink" title="2、使用a标签或修改location.hash值"></a>2、使用a标签或修改location.hash值</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#target1&quot;</span>&gt;</span>跳转定位<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者js方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.hash = <span class="string">&quot;#target1&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="vue的锚点定位冲突问题"><a href="#vue的锚点定位冲突问题" class="headerlink" title="vue的锚点定位冲突问题"></a>vue的锚点定位冲突问题</h1><blockquote>
<p>我们知道vue的路由模式如果是<code>hash</code>时，使用的location.hash值来进行路由转换的，与html中的锚点定位冲突了。</p>
</blockquote>
<h1 id="简单的解决冲突办法"><a href="#简单的解决冲突办法" class="headerlink" title="简单的解决冲突办法"></a>简单的解决冲突办法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>其实我们在vue中，通过a标签或者改变location.hash是可以兼容锚点定位的，唯一的问题就是破坏了vue的路由结构，因为我这里的做法是在对hash修改后，再改成的原来的hash，这样既能实现定位也能保留以前的路由路径，但是路由的history会增加记录，因为我们在返回是需要返回很多次</li>
</ul>
<h2 id="简要代码"><a href="#简要代码" class="headerlink" title="简要代码"></a>简要代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clickTarget (id) &#123;</span><br><span class="line">	<span class="comment">//记录跳转次数，方便返回路由</span></span><br><span class="line">  	<span class="built_in">this</span>.goCount += <span class="number">2</span></span><br><span class="line">   	<span class="keyword">const</span> tempHash = <span class="built_in">window</span>.location.hash</span><br><span class="line">   	<span class="comment">//这里是实现锚点定位</span></span><br><span class="line">   	<span class="built_in">window</span>.location.hash = <span class="string">&#x27;#target&#x27;</span> + id</span><br><span class="line">   	<span class="comment">//还原以前的路由，但不会影响已定位的结果</span></span><br><span class="line">   	<span class="built_in">window</span>.location.hash = tempHash</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">clickBack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	 <span class="built_in">this</span>.$router.go(-<span class="number">1</span> - <span class="built_in">this</span>.goCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>clickTarget进行跳转，并且记录跳转的次数，hash先保留以前的然后赋两次值</li>
<li>clickBack的go返回的次数是记录的跳转次数+1</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>java String字符串赋值及常量池原理、StringBuilder、StringBuffer</title>
    <url>/2021/07/27/251b751ce141.html</url>
    <content><![CDATA[<h1 id="String字符串赋值及常量池原理"><a href="#String字符串赋值及常量池原理" class="headerlink" title="String字符串赋值及常量池原理"></a>String字符串赋值及常量池原理</h1><h2 id="String简介"><a href="#String简介" class="headerlink" title="String简介"></a>String简介</h2><p>String设计为不可变类主要考虑到：效率和安全。</p>
<h2 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h2><p>由于String的不可变性，为了提高操作效率，所以设计常量池。从1.8开始，<code>String常量池被放在了堆中</code>，在1.8之前存放在<code>方法区</code>的<code>运行时常量池</code>。</p>
<h2 id="String-a-“a”做了什么"><a href="#String-a-“a”做了什么" class="headerlink" title="String a = “a”做了什么"></a>String a = “a”做了什么</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>这段代码首先 <code>&quot;a&quot;</code> 此字符串叫<code>字符面值</code>。<code>在编译时</code>，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的各种<code> 字面量 (Literal)</code>和 <code>符号引用 (Symbolic References)</code>，每个class文件都有一个class常量池。<code>在运行时</code>，class文件加载后，对应的静态常量池被常驻到内存即运行时常量池。当代码执行到<code>String a = &quot;a&quot;</code>时，声明的<code>变量a</code>将存放”a”字面量对应的<code>引用地址于栈中</code>。</p>
<h2 id="String-a-new-String-“a”-做了什么"><a href="#String-a-new-String-“a”-做了什么" class="headerlink" title="String a = new String(“a”)做了什么"></a>String a = new String(“a”)做了什么</h2><p>对于字符面值 <code>&quot;a&quot;</code>,肯定是在常量池中。然后通过new在堆中创建新的字符串对象。栈中变量a的值即为new的字符串对象的引用地址。</p>
<h2 id="String-intern-方法"><a href="#String-intern-方法" class="headerlink" title="String intern()方法"></a>String intern()方法</h2><p>String类的intern()方法：一个初始为空的字符串池，它由类String独自维护。当调用 intern方法时，如果池已经包含一个等于此String对象的字符串（用equals(oject)方法确定），则返回池中的字符串。否则，将此String对象添加到池中，并返回此String对象的引用。 对于任意两个字符串s和t，当且仅当s.equals(t)为true时，s.intern() == t.intern()才为true。所有字面值字符串和字符串赋值常量表达式都使用 intern方法进行操作。</p>
<h2 id="String作为方法传递"><a href="#String作为方法传递" class="headerlink" title="String作为方法传递"></a>String作为方法传递</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upcase</span><span class="params">(String old)</span></span>&#123;</span><br><span class="line">        old = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> old.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String aa = upcase(a);</span><br><span class="line">        </span><br><span class="line">        System.out.println(a);<span class="comment">//a</span></span><br><span class="line">        System.out.println(aa);<span class="comment">//AA</span></span><br><span class="line">        System.out.println(a);<span class="comment">//a</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在方法传递时，字符串传递的是引用，因此尽管<code>old局部变量</code>被<code>upcase方法</code>重新赋值，但不会影响到<code>main方法</code>中声明的<code>a变量</code></p>
<h2 id="重载’-’与StringBuilder"><a href="#重载’-’与StringBuilder" class="headerlink" title="重载’+’与StringBuilder"></a>重载’+’与StringBuilder</h2><p>java对字符串加法进行了重载，+作为二元运算符。<br>当a、b变量至少一个是String对象时。<br><code>a+b &lt;=&gt; new StringBuilder(a).append(b).toString();</code><br>当a、b变量为基本数据类型或者为字符面值<br><code>a+b &lt;=&gt; ab</code><br>上面两者是完全等价的。说的有点抽象，下面看代码</p>
<h3 id="情况一，常量池引用"><a href="#情况一，常量池引用" class="headerlink" title="情况一，常量池引用"></a>情况一，常量池引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;str1 == str2: &quot;</span>+(str1==str2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>变量str1、str2都是存放常量池中String对象的相同引用。</p>
<h3 id="情况二，重载“-”与字符面值"><a href="#情况二，重载“-”与字符面值" class="headerlink" title="情况二，重载“+”与字符面值"></a>情况二，重载“+”与字符面值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String str1 = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;aa&quot;</span>+<span class="string">&quot;1&quot;</span>;</span><br><span class="line">String str3 = <span class="string">&quot;aa&quot;</span>+<span class="number">1</span>;</span><br><span class="line">String str4 = str1 + <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;str2 == str3: &quot;</span>+(str2==str3));</span><br><span class="line">System.out.println(<span class="string">&quot;str3 == str4: &quot;</span>+(str3==str4));</span><br></pre></td></tr></table></figure>
<p>都是true，因为字符串的重载+，两个变量是基本数据类型或字符面值是在编译时会自动的合并。同时对于final修饰的String对象且指向常量池，在编译时，依然会合并。</p>
<h3 id="情况三，重载“-”-与String对象"><a href="#情况三，重载“-”-与String对象" class="headerlink" title="情况三，重载“+” 与String对象"></a>情况三，重载“+” 与String对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;aa1&quot;</span>;</span><br><span class="line">String str3 = str1 + <span class="number">1</span>;<span class="comment">//与下方等效</span></span><br><span class="line"><span class="comment">//String str3 = new StringBuilder(str1).append(1).toString();</span></span><br><span class="line">System.out.println(<span class="string">&quot;str2 == str3: &quot;</span>+(str2==str3));<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;str3.intern() == str2: &quot;</span>+(str3.intern()==str2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>实际上str3最终是通过StringBuilder的toString方法创建了String对象。因此str2和str3内存地址不同。但str3的intern与str2是相同的，因为是同一个常量池值。<br><code>通过这里我们可以知道对于对象字符串的加法，在for循环内部是避免使用的。因为会创建太多的StringBuilder对象。</code></p>
<h1 id="StringBuilder与StringBuffer"><a href="#StringBuilder与StringBuffer" class="headerlink" title="StringBuilder与StringBuffer"></a>StringBuilder与StringBuffer</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于字符串的不可变特性，通常我们会有字符串拼接的需求，如果单纯的使用String+那么性能肯定会受到影响。因此设计出了<code>线程不安全的StringBuilder</code>，和<code>线程安全的StringBuffer</code></p>
<h2 id="AbstractStringBuilder"><a href="#AbstractStringBuilder" class="headerlink" title="AbstractStringBuilder"></a>AbstractStringBuilder</h2><p>StringBuilder和StringBuffer都是集成了抽象类AbstractStringBuilder。AbstractStringBuilder的主要功能就是提供了对字符串的添加、移除、存储方式进行了约定。然后具体的实现对应的功能。核心是利用char[]进行数组存储，通过扩容的方式进行增加类似ArrayList。对于StringBuilder的实现基本上都是调用抽象类实现，对于StringBuffer在字符串操作的方法加入了synchronized同步代码块实现线程安全。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java jna java.lang.UnsatisfiedLinkError: Unable to load library Native library (win32-x86-64C:User</title>
    <url>/2019/12/21/4afb768d93ba.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在新装的win系统下，java项目人脸识别项目要调用动态库，下面就说说问题</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote>
<p>Exception in thread “main” java.lang.UnsatisfiedLinkError: Unable to load library ‘C:\xxx\xxx\xxx\xxx.dll’: Native library (win32-x86-64/C:\xxx\xxx\xxx\xxx.dll) not found in resource path </p>
</blockquote>
<p>我是拷贝git issues上的，因为当时我没记录这些错误。这错误大概就长这样，花费了我一天半时间。<br>在这个过程也了解了很多java jna的知识。</p>
<h1 id="当时的分析"><a href="#当时的分析" class="headerlink" title="当时的分析"></a>当时的分析</h1><p>当时就觉得路径不对导致加载不到dll，所以通过<code>jna.class.path</code>，设置动态库的环境路径来加载，以及使用开启jna调试模式看日志。但是最终还是不行，我尝试过配置环境变量、开启jna调试、升级jna版本为5.4.0、断点调试、在调试的时候我都怀疑是不是Native.load是不是对win路径的写法有特殊要求。都不行！还有jre运行与系统位数不对等解决方法。<br>但是现象很奇怪的我的有个idea项目是可以运行的，独立打包出来就不行，我就开始怀疑java启动参数、环境变量是不是有问题。但是最终所有办法都试了就是不行。<br>最后在我无意的时候，在github的issues上看到了类似的问题。<br><a href="https://github.com/java-native-access/jna/issues/725">https://github.com/java-native-access/jna/issues/725</a><br>里面有个国外小哥说<br><code>Please check that you have the Visual C++ Runtime 2010 64bit installed.</code><br>我心里想一万句xxx。准是这个问题没错了。系统环境问题。<br>最后我安装了VC++ Runtime 2010 64，gg这个问题就算解决了。终于愉快的去迎接下一个大问题了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>历经艰险，终于解决了问题，但我想反思一下，为什么花费了那么多时间还没有解决？我觉得是异常的提示有问题异常中<br><code>not found in resource path</code>这个意思就是找不到。但实际上不是，原因是dll无法被正常的加载，所以出现了问题。遇到问题要仔细分析。不然对人是一种打击。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>jna</tag>
      </tags>
  </entry>
  <entry>
    <title>java.lang.NumberFormatException: multiple points异常的解决</title>
    <url>/2021/07/27/e7d2ed817dea.html</url>
    <content><![CDATA[<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><code>SimpleDateFormat </code>是非线程安全的。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2020年第一篇博客哈。最近在项目中，遇到随机性的mybatis查询问题。每次问题都是出在相同的字段上。并且类型为日期。就是莫名其妙的报<code>java.lang.NumberFormatException</code>异常。</p>
<h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>bug发生的很其妙，前端大概是这样，最开始在页面中就请求一个list数据，当时没啥问题，但是在之后，前端加了个同时获取下拉框数据的请求。问题就变得很奇怪了(下拉框和列表都有日期字段)。列表中的日期会随机的抛出异常。当时很莫名其妙，但是着急就没去管它。过了一段时间，我频繁刷新页面这个异常的发生概率增大。如此频繁的发生，就不得不解决了。</p>
<h1 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h1><p>问题就是很奇怪，因为我自定义了TypeHandler对日期进行处理。偶尔在解析是会提示日期字段的值为空字符串。但是数据库是确确实实有的。直觉告诉我问题的根源应该是多线程造成的。所以我就疯狂的刷新前端页面，(这种方式相比用jmetor是有点low哈，但胜在快捷)。错误异常频繁发生了。那就可以肯定就是多线程造成的了。但是哪里会有线程问题啊？我就看了一下自定义TypeHandler的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SimpleDateFormat sdfDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>看到这里我心里一万句。。。，最近在看JAVA并发编程，里面已经很明确的说了<code>SimpleDateFormat </code>是非线程安全的。我居然还敢这样用，佛曰我不入地狱谁入地狱。都这样写了，我不遭谁遭。我不能坑队友，是吧。<br>当时在设计TypeHandle的时候没有考虑线程安全的问题。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>问题的根源找到了，解决就好办了。把日期解析换成线程安全就行了。</p>
<p> 1.肯定有人想最快的方式就是把<code>SimpleDateFormat </code>换成局部变量，我这能说千万别这么干！这是一时舒服，后面大坑。TypeHandler的处理，在之后必然是高并发的。<code>SimpleDateFormat </code>这货的初始化带来的性能损坏自行考究。<br> 2.使用ThradLocal封装SimpleDateFormat 。本质是每个线程初始化一个属于它的SimpleDateFormat对象。<br> 3.使用<code>joda</code>库处理日期(推荐)。如果你的项目没有joda-time库，快添加吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="comment">//使用DateTime解析和格式化。</span></span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line"><span class="comment">//dateTime.toString(dateFormatter)</span></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line"><span class="comment">//DateTime.parse(date,dateTimeFormatter).toDate()</span></span><br></pre></td></tr></table></figure>
<p><code>注意这里的DateTimeFormatter是joda-time的不是java原生的。</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写一些工具类、处理类，一定要考虑线程安全的问题。其次再是高并发下的性能问题。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础中==,equals(),Objects.equals()详细区别与细节</title>
    <url>/2021/07/27/81c7b3d79409.html</url>
    <content><![CDATA[<h1 id="java中-的含义"><a href="#java中-的含义" class="headerlink" title="java中==的含义"></a>java中==的含义</h1><h2 id="的基本解释"><a href="#的基本解释" class="headerlink" title="==的基本解释"></a>==的基本解释</h2><p>==是二元运算符，其最终的结果返回的是基本数据类型中的boolean型。它是比较基本数据类型和引用数据类型,它的作用是比较两个变量是否相等，但对相等的定义我们应该达成一致。</p>
<h3 id="情况一，基本数据类型之间比较"><a href="#情况一，基本数据类型之间比较" class="headerlink" title="情况一，基本数据类型之间比较"></a>情况一，基本数据类型之间比较</h3><p>byte,short,char,int,long,float,double,boolean   他们之间的比较，比较的是他们的值。在比较它们值时，可能存在变量类型不同，在两个基本数据类型变量一致时，比较的是值。在比较两个基本数据类型不同是，会进行自动类型转换，小类型会转换成大类型，此时比较的也是值，当无法进行自动类型转换，便会报语法错误。<br><code>从本质来讲，基本数据类型比较的是内存地址，因为有jvm的常量池，所以我们赋值的是常量的内存地址。我们仅仅可以假想它们比较的是&quot;值&quot;，但实质上是因为它们指向了同样的内存地址</code></p>
<h3 id="情况二，引用数据类型之间比较"><a href="#情况二，引用数据类型之间比较" class="headerlink" title="情况二，引用数据类型之间比较"></a>情况二，引用数据类型之间比较</h3><p>引用数据类型是指对象、数组、字符串等之间的比较，比较的是它们的内存地址。</p>
<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abs&quot;</span>;</span><br><span class="line">   String s2 = <span class="string">&quot;abs&quot;</span>; <span class="comment">//</span></span><br><span class="line">   String s3 = <span class="keyword">new</span> String(<span class="string">&quot;abs&quot;</span>);</span><br><span class="line">   System.out.println(s1 == s2);<span class="comment">//s1与s2 内存地址相同</span></span><br><span class="line">   System.out.println(s2 == s3);<span class="comment">//s2与s3 内存地址不相同</span></span><br></pre></td></tr></table></figure>
<p>在编译时s1和s2的字符串”abs”会被放入jvm的常量池中。所以s1和s2在赋值的时候都是一样指向常量池中”abs”的内存地址。而s3不同，s3新new String对象，其字符串内容被放在heap中，s3在stack中指向heap地址。因此s2和s3内存地址不同。</p>
<h3 id="情况三、基本数据类型与包装器类型的比较"><a href="#情况三、基本数据类型与包装器类型的比较" class="headerlink" title="情况三、基本数据类型与包装器类型的比较"></a>情况三、基本数据类型与包装器类型的比较</h3><p>包装器类型是指基本数据类型对应的类(int、Integer)。在比较时，会进行自动拆箱、装箱的操作。</p>
<h4 id="自动拆箱、装箱"><a href="#自动拆箱、装箱" class="headerlink" title="自动拆箱、装箱"></a>自动拆箱、装箱</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">Integer a = <span class="number">127</span>; <span class="comment">//实际上是 Integer.valueOf(127)</span></span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> b = a;<span class="comment">//实际上是 a.intValue()</span></span><br></pre></td></tr></table></figure>
<p>装箱就是包装成对象；拆箱就是拆为基本数据类型。这些操作就是调用预先设计好的方法。</p>
<h4 id="Integer比较细节"><a href="#Integer比较细节" class="headerlink" title="Integer比较细节"></a>Integer比较细节</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">1</span>;<span class="comment">//装箱</span></span><br><span class="line">Integer i2 = <span class="number">1</span>;<span class="comment">//装箱</span></span><br><span class="line">Integer i3 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer i4 = <span class="number">128</span>;</span><br><span class="line">Integer i5 = <span class="number">128</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">//true</span></span><br><span class="line">System.out.println(i4 == i5);<span class="comment">//false</span></span><br><span class="line">System.out.println(i2 == i3);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="number">1</span> == i1);<span class="comment">//true,拆箱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>i1、i2变量都进行了装箱操作，即调用了Integer.valueof()方法。但是我们看看方法的细节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">           <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">   &#125;</span><br><span class="line">...chche关键代码</span><br><span class="line">	cache[k] = <span class="keyword">new</span> Integer(j++);</span><br></pre></td></tr></table></figure>
<p>其中使用了IntegerCahce进行了缓存。预先初始化了256个数组。这意味着当值在-128到127闭区间的时候，使用的是相同内存地址的Integer对象。但是这样注意，这里尽管是缓存，但它还是对象！<br>因此由于缓存的关系，i1与i2内存地址相同。<br>i4与i5由于超过了缓存，所以内存地址不同。<br>i2和i3，因为一个是缓存中产生，一个是新new的对象，所以内存地址不同。<br>1和i1，从结果来看，i1拆箱了，即i1与1比较是，比较的不在是i1对象的内存地址，而是现将i1拆箱i1.intValue(),返回了i1对应的jvm中常量池的地址。所以i1和1的内存地址在==比较时是相等的。<br><code>同理的Short、Long类也有类似的操作。我们只需要正确理解内存地址、拆装箱的操作即可。</code></p>
<h1 id="java中obj-equals-含义"><a href="#java中obj-equals-含义" class="headerlink" title="java中obj.equals()含义"></a>java中obj.equals()含义</h1><p><code>==其实是java给我们定义的两个变量相等的含义，即内存地址是否相等。但这显然无法满足我们的需求。因此有了equals方法的定义。</code><br>equals方法是所有对象都拥有的默认方法。使用时我们必须明确的了解对应对象的equals具体实现。当然常用的String、Integer已经实现好了。</p>
<h2 id="Integer-equals解释"><a href="#Integer-equals解释" class="headerlink" title="Integer equals解释"></a>Integer equals解释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个相等很简单，类型是否相同，其次对应的数字值是否相同。<br>关于 i4.equals(128)，这将返回true，因为128会被装箱为Integer类型。但是i4.equals(new Long(128))，这将放回false，因为类型不同。</p>
<h2 id="String-equals解释"><a href="#String-equals解释" class="headerlink" title="String equals解释"></a>String equals解释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>先比较地址，其次比较字符串值。</p>
<h1 id="java中Objects-equals-含义"><a href="#java中Objects-equals-含义" class="headerlink" title="java中Objects.equals()含义"></a>java中Objects.equals()含义</h1><p>这是工具类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>先比较内存地址，其次用equals比较，这里方便地方就是防止NPE(NullPointerException)的发生。<br><code>这里我说一下一个细节,关于是否使用Objects.equals方法来判断相等它有个很方便的功能就是永远不会发生NPE,但是在某种情况下代码吞掉NLP可能会引发致命的问题.</code>关于如何思考NPE问题及解决办法将在其他文章中总结</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>js 判断非空对象的方法</title>
    <url>/2021/07/27/de039b1a717a.html</url>
    <content><![CDATA[<h3 id="JSON-stringify-判断空对象"><a href="#JSON-stringify-判断空对象" class="headerlink" title="JSON.stringify 判断空对象"></a>JSON.stringify 判断空对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123;&#125;</span><br><span class="line">let isNull = &quot;&#123;&#125;&quot; === JSON.stringify(obj) //如果obj数据量大，性能将会受到影响</span><br></pre></td></tr></table></figure>

<h3 id="Object-keys-判断空对象"><a href="#Object-keys-判断空对象" class="headerlink" title="Object.keys 判断空对象"></a>Object.keys 判断空对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123;&#125; //Object.keys 不能传入null,否则报错</span><br><span class="line">let isNull = 0 === Object.keys(obj).length //通过对象的属性个数判断，推荐此方法</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断的对象前提当然要保证目标是实体对象<br>实体对象判断： “object” === typeof obj &amp;&amp; null !== obj &amp;&amp; !Array.isArray(obj)<br>对象和数组判断： “object” === typeof obj &amp;&amp; null !== obj </p>
</blockquote>
<p><code>Object.Keys 也可判断空数组,当然单纯的空数组判断用 arr.length 来判断就行了</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 安装jar包到本地</title>
    <url>/2021/07/27/382b2269e9ad.html</url>
    <content><![CDATA[<p>#命令</p>
<blockquote>
<p>mvn install:install-file</p>
</blockquote>
<p>#参数</p>
<ul>
<li>-Dfile=D:\xxx.jar</li>
<li>-DartifactId=org.xxx</li>
<li>-Dversion=1.0.0</li>
<li>-Dpackaging=jar</li>
</ul>
<p>#演示</p>
<blockquote>
<p>mvn install:install-file -Dfile=D:\taobao-sdk-java-auto_1508223385701-20180408.jar -DgroupId=com.taobao -DartifactId=taobao-sdk-java-auto -Dversion=taobao-sdk-20180408 -Dpackaging=jar</p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>mac外接显示器wifi无法正常使用的问题</title>
    <url>/2021/07/27/119554bde610.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>最近mac外接两个显示器，但是遇到接入显示器后，wifi无法正常使用的问题。下面一些心得记录下来。</p>
</blockquote>
<h1 id="硬件环境（方圆3米内电磁设备）"><a href="#硬件环境（方圆3米内电磁设备）" class="headerlink" title="硬件环境（方圆3米内电磁设备）"></a>硬件环境（方圆3米内电磁设备）</h1><ul>
<li>Macbook Pro(2015)</li>
<li>dp转minidp线</li>
<li>hdmi线</li>
<li>显示器aoc 2790vq(4k)</li>
<li>几年前的20寸显示器</li>
<li>2.4G无线鼠标</li>
<li>增高台，带usb hub以及无线充电。</li>
<li>两个2.4Gwifi路由器</li>
<li>靠墙，并且墙的另一面是电视</li>
<li>若干手机<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1></li>
</ul>
<p>通过相对比较严谨的对比实验、以及控制变量法，对mac的空间位置、以及其他设备的空间位置关系最终结论如下：</p>
<ul>
<li>wifi无法正常使用是硬件的电磁环境造成的2.4G电磁干扰</li>
<li>产生明显的电磁干扰设备是 <code>笔记本增高台的无线充电模块</code></li>
</ul>
<h1 id="笔记本增高台的无线充电模块对Wi-Fi的影响"><a href="#笔记本增高台的无线充电模块对Wi-Fi的影响" class="headerlink" title="笔记本增高台的无线充电模块对Wi-Fi的影响"></a>笔记本增高台的无线充电模块对Wi-Fi的影响</h1><blockquote>
<p>通过反复的试验，只有放在增高台上，一个比较特定的空间位置，便会造成，wifi影响，注意无论无线充电设备是否接入电源，都会造成影响。个人推测应该是无线充电模块中磁场与笔记本wifi模块电路信号的干扰。</p>
</blockquote>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul>
<li>改变位置。调整一个比较合适的摆放位置，最好是远离。即可解决问题。</li>
<li><code>使用5GWi-Fi。(推荐)</code><h1 id="电磁干扰的注意事项"><a href="#电磁干扰的注意事项" class="headerlink" title="电磁干扰的注意事项"></a>电磁干扰的注意事项</h1></li>
<li>很多设备其实都会是信号进行干扰。</li>
<li>蓝牙设备、无线设备。比如我发现的把无线鼠标插在笔记本的某个usb口，也会存在明显干扰。</li>
<li>线缆干扰。比如hdmi对信号的屏蔽做不好可能也会造成干扰</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis sqlite jdbc多表更新、删除的bug以及修复方法</title>
    <url>/2021/07/27/b18776714842.html</url>
    <content><![CDATA[<h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p>在使用<code>xerial/sqlite-jdbc</code> 版本是3.28.0时发现了这样的问题，由于mysql有update、delete的批量操作支持。但是sqlite3从语法上是不支持的。我们应该如何sqlite3的条件下使用多表批量操作，基本上能想到的方法就是执行一个xml方法中一次执行多条语句了。但是很不幸的告诉你，我们会遇到下面的问题。</p>
<h2 id="xml多sql"><a href="#xml多sql" class="headerlink" title="xml多sql"></a>xml多sql</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>update id<span class="operator">=</span>&quot;update&quot;<span class="operator">&gt;</span></span><br><span class="line">        update <span class="keyword">user</span></span><br><span class="line">        <span class="keyword">set</span> a <span class="operator">=</span> #&#123;a&#125;</span><br><span class="line">        <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;;</span><br><span class="line">        update user2</span><br><span class="line">        <span class="keyword">set</span> a <span class="operator">=</span> #&#123;a&#125;</span><br><span class="line">        <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>update<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里同时更新两张表，分号分割。但分后好的<code>#&#123;a&#125;</code>无法传入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.ibatis.type.TypeException: Error setting non <span class="keyword">null</span> <span class="keyword">for</span> parameter #<span class="number">3</span> with JdbcType <span class="keyword">null</span> . Try setting a different JdbcType <span class="keyword">for</span> <span class="keyword">this</span> parameter or a different configuration property. Cause: java.lang.ArrayIndexOutOfBoundsException: <span class="number">2</span></span><br><span class="line">	at org.apache.ibatis.type.BaseTypeHandler.setParameter(BaseTypeHandler.java:<span class="number">71</span>)</span><br><span class="line">	at org.apache.ibatis.type.UnknownTypeHandler.setNonNullParameter(UnknownTypeHandler.java:<span class="number">45</span>)</span><br><span class="line">	at org.apache.ibatis.type.BaseTypeHandler.setParameter(BaseTypeHandler.java:<span class="number">69</span>)</span><br><span class="line">	... <span class="number">82</span> more</span><br><span class="line">Caused by: java.lang.ArrayIndexOutOfBoundsException: <span class="number">2</span></span><br><span class="line">	at org.sqlite.core.CorePreparedStatement.batch(CorePreparedStatement.java:<span class="number">130</span>)</span><br><span class="line">	at org.sqlite.jdbc3.JDBC3PreparedStatement.setInt(JDBC3PreparedStatement.java:<span class="number">329</span>)</span><br><span class="line">	at org.apache.ibatis.type.IntegerTypeHandler.setNonNullParameter(IntegerTypeHandler.java:<span class="number">31</span>)</span><br><span class="line">	at org.apache.ibatis.type.IntegerTypeHandler.setNonNullParameter(IntegerTypeHandler.java:<span class="number">26</span>)</span><br><span class="line">	at org.apache.ibatis.type.BaseTypeHandler.setParameter(BaseTypeHandler.java:<span class="number">69</span>)</span><br><span class="line">	... <span class="number">84</span> more</span><br></pre></td></tr></table></figure>
<p>这里提示越界了。我们查看源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs a prepared statement on a provided connection.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> conn Connection on which to create the prepared statement.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sql The SQL script to prepare.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">CorePreparedStatement</span><span class="params">(SQLiteConnection conn, String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(conn);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.sql = sql;</span><br><span class="line">       DB db = conn.getDatabase();</span><br><span class="line">       db.prepare(<span class="keyword">this</span>);</span><br><span class="line">       rs.colsMeta = db.column_names(pointer);</span><br><span class="line">       columnCount = db.column_count(pointer);</span><br><span class="line">       paramCount = db.bind_parameter_count(pointer);</span><br><span class="line">       paramValid = <span class="keyword">new</span> BitSet(paramCount);</span><br><span class="line">       batchQueryCount = <span class="number">0</span>;</span><br><span class="line">       batch = <span class="keyword">null</span>;</span><br><span class="line">       batchPos = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Assigns the object value to the element at the specific position of array</span></span><br><span class="line"><span class="comment">    * batch.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pos</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">batch</span><span class="params">(<span class="keyword">int</span> pos, Object value)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       checkOpen();</span><br><span class="line">       <span class="keyword">if</span> (batch == <span class="keyword">null</span>) &#123;</span><br><span class="line">           batch = <span class="keyword">new</span> Object[paramCount];</span><br><span class="line">           paramValid.clear();</span><br><span class="line">       &#125;</span><br><span class="line">       batch[batchPos + pos - <span class="number">1</span>] = value;</span><br><span class="line">       paramValid.set(pos - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><code>paramCount</code>这个变量小于实际变量值，同时batch方法中Object数组长度固定，因此导致了数据越界。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><blockquote>
<p>由于时间的原因采用了最low的办法，将mapper方法改写成多个，独立执行。<br>另一种是修改源码，但是时间原因还没调试好，暂时不研究了。或者使用拦截器。</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx多域名同ip负载均衡</title>
    <url>/2021/07/27/c77114fde70b.html</url>
    <content><![CDATA[<p>#需求说明</p>
<img src="/2021/07/27/c77114fde70b/1627349598071.png" class="">
<blockquote>
<p>用户通过不同的域名，访问同一个nginx，实现不同ip的代理。<br><code>a.domain.com</code> 和 <code>c.domain.com</code>的域名解析地址是相同的，但内部代理到不同的ip处理</p>
</blockquote>
<p>#通过nginx的$host变量和upstream的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user root root;</span><br><span class="line">worker_processes 1;</span><br><span class="line">pid /home/huaqi/yc/nginx/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 1024;</span><br><span class="line">events&#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        charset  utf-8;</span><br><span class="line">        server_names_hash_bucket_size 128;</span><br><span class="line">        client_header_buffer_size 4k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 300m;</span><br><span class="line">        sendfile on;</span><br><span class="line">        tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">        tcp_nodelay on;</span><br><span class="line">        client_body_buffer_size  512k;</span><br><span class="line"></span><br><span class="line">        proxy_connect_timeout    5;</span><br><span class="line">        proxy_read_timeout       60;</span><br><span class="line">        proxy_send_timeout       5;</span><br><span class="line">        proxy_buffer_size        16k;</span><br><span class="line">        proxy_buffers            4 64k;</span><br><span class="line">        proxy_busy_buffers_size 128k;</span><br><span class="line">        proxy_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types       text/plain application/x-javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ###2012-12-19 change nginx logs</span><br><span class="line">        log_format  main  &#x27;$http_x_forwarded_for - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                                  &#x27;&quot;$http_user_agent&quot;  $request_time $remote_addr&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        upstream a.domain.com &#123;</span><br><span class="line">			 server 192.168.0.2:80 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        &#125;</span><br><span class="line">        upstream c.domain.com&#123;</span><br><span class="line">             server 192.168.0.3:80 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #### 项目</span><br><span class="line">        server &#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                index index.jsp index.html index.htm;</span><br><span class="line">               </span><br><span class="line">                #listen 443 ssl;</span><br><span class="line">                #ssl on;</span><br><span class="line">                #ssl_certificate cert/cert.pem;</span><br><span class="line">                #ssl_certificate_key cert/cert.key;</span><br><span class="line">                #ssl_session_timeout 5m;</span><br><span class="line">                location / &#123;</span><br><span class="line">                        proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">                        proxy_set_header Host  $host;</span><br><span class="line">                        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                        proxy_pass http://$host;</span><br><span class="line">                        proxy_redirect http:// $scheme://;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中<code>proxy_pass http://$host;</code>是关键代码，通过变量$host的方式匹配到对应域名的upstream名，当访问不同的域名后，<code>upstream a.domain.com</code>和<code>upstream c.domain.com</code>将会负载均衡到对应的ip</p>
</blockquote>
<p>#nginx虚拟主机的方式</p>
<blockquote>
<p>nginx是支持虚拟主机的，也可以很方便的实现该功能，就是通过定义多个server，相同的端口等信息，但server_name定义为指定的域名，nginx就会自动匹配到对应的server上。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>/oauth/check_token 401</title>
    <url>/2021/07/27/27da03cb8e65.html</url>
    <content><![CDATA[<h1 id="检查token的接口无法使用"><a href="#检查token的接口无法使用" class="headerlink" title="检查token的接口无法使用"></a>检查token的接口无法使用</h1><blockquote>
<p>此接口没有允许，默认是不允许访问</p>
</blockquote>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// AuthorizationServerConfigurerAdapter</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception &#123;</span><br><span class="line">        //允许表单认证</span><br><span class="line">        oauthServer.allowFormAuthenticationForClients();</span><br><span class="line">        oauthServer.checkTokenAccess(&quot;permitAll()&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><code>security.oauth2.authorization.check-token-access=permitAll()</code></p>
<p>参考 <a href="https://stackoverflow.com/questions/26750999/spring-security-oauth2-check-token-endpoint">https://stackoverflow.com/questions/26750999/spring-security-oauth2-check-token-endpoint</a></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>oauth</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot 项目日志打印项目版本和构建时间</title>
    <url>/2021/07/27/4119a37b8746.html</url>
    <content><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><blockquote>
<p>在spring-boot项目启动时，将会打印项目的基本信息：服务名称，pom中的项目版本，以及jar包构建的时间,方便检测服务是否更新到正确的版本，也可以提供接口访问</p>
</blockquote>
<h1 id="实现步骤-steps-2"><a href="#实现步骤-steps-2" class="headerlink" title="实现步骤(steps 2)"></a>实现步骤(steps 2)</h1><h2 id="step-1-添加服务启动的前置执行代码"><a href="#step-1-添加服务启动的前置执行代码" class="headerlink" title="step 1 添加服务启动的前置执行代码"></a>step 1 添加服务启动的前置执行代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 初始化bean之前执行即服务启动的前置代码</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@Slf4j</span><br><span class="line">public class BeanPostConfig implements BeanPostProcessor &#123;</span><br><span class="line">    @Value(&quot;$&#123;project.version&#125;&quot;)</span><br><span class="line">    private String serviceVersion;</span><br><span class="line">    @Value(&quot;$&#123;project.builddate&#125;&quot;)</span><br><span class="line">    private String serviceBuildDate;</span><br><span class="line">    @Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br><span class="line">    private String serviceName;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment environment;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void  projectInfo()&#123;</span><br><span class="line">        StringBuffer projectInfo = new StringBuffer();</span><br><span class="line">        projectInfo.append(&quot;\n=================project=================\n&quot;);</span><br><span class="line">        projectInfo.append(String.format(&quot;\nservice name:%s\n&quot;,serviceName));</span><br><span class="line">        projectInfo.append(String.format(&quot;\nservice version:%s\n&quot;,serviceVersion));</span><br><span class="line">        projectInfo.append(String.format(&quot;\nservice build date:%s\n&quot;,serviceBuildDate));</span><br><span class="line">        projectInfo.append(&quot;\n=================project=================\n&quot;);</span><br><span class="line">        log.info(projectInfo.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="step-2-application-yml配置变量"><a href="#step-2-application-yml配置变量" class="headerlink" title="step 2 application.yml配置变量"></a>step 2 application.yml配置变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project:</span><br><span class="line">  version: @project.version@</span><br><span class="line">  builddate: @maven.build.timestamp@</span><br></pre></td></tr></table></figure>
<p><code>注意获取maven的变量是使用@@，并且在@Value中使用@@是无效的,bootstrap.yml也无效,具体原理以后在了解一下</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>python快速生成mysql千万级测试数据</title>
    <url>/2021/07/27/34315ea1cf81.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>在开发过程中，我们会做性能测试，但有些性能测试只有数据量达到一定程度的才能更好的测试出来。为此我们需要特意研究如何快速的生成千万级乃至亿级别的数据。</p>
</blockquote>
<h1 id="数据生成思路"><a href="#数据生成思路" class="headerlink" title="数据生成思路"></a>数据生成思路</h1><ul>
<li>利用python生成千万级的txt文本数据</li>
<li>将txt文本数据通过mysql的 <code>load data infile</code>语句导入到数据库中，这中方式非常高效，快到一千万的数据两分钟搞定，当然这取决于你每行的数据量。</li>
<li>接下来就可以享受海量数据的体验啦。<h1 id="生成千万级txt文本"><a href="#生成千万级txt文本" class="headerlink" title="生成千万级txt文本"></a>生成千万级txt文本</h1>在别的教程中，有用存储过程、临时内存表的方式，实现快速生成数据。我个人认为有以下不足</li>
<li>生成数据真实性不高</li>
<li>生成数据关联灵活性不高</li>
</ul>
<p>如果利用python脚本，我们可以非常灵活的通过脚本代码来实现生成数据之间的关系与分布，而且我们可以利用pyton的一个开源的<code>faker</code>库，来生成各种看着不那么假的名字、地址、手机号、邮件等。git地址:<a href="https://github.com/joke2k/faker">faker</a></p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>我们模拟一个微博动态的一个过程，其中包含用户表，用户关注表，以及微博动态表。我们需要分析在一个用户有上百万的粉丝，微博动态的查询优化。</p>
</blockquote>
<h1 id="生成五百万用户数据"><a href="#生成五百万用户数据" class="headerlink" title="生成五百万用户数据"></a>生成五百万用户数据</h1><p><code>本来想用faker模拟真实数据，但是生成性能太低了，节约时间就暂时随意一点，空了会写个基于numpy的高性能随机</code></p>
<h2 id="创建用户表"><a href="#创建用户表" class="headerlink" title="创建用户表"></a>创建用户表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="python脚本生成-耗时66s"><a href="#python脚本生成-耗时66s" class="headerlink" title="python脚本生成(耗时66s)"></a>python脚本生成(耗时66s)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_data</span>(<span class="params">file_path, data_count</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        os.remove(file_path)</span><br><span class="line"></span><br><span class="line">    file = <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    start = datetime.now()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数据生成中&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">range</span>(data_count):</span><br><span class="line">        file.writelines(<span class="built_in">str</span>(var)+<span class="string">&quot; 用户&quot;</span>+<span class="built_in">str</span>(var) + <span class="string">&quot; email&quot;</span>+<span class="built_in">str</span>(var)+<span class="string">&quot;@email.com&quot;</span>+<span class="string">&quot; &quot;</span>+<span class="string">&quot;1592837482&quot;</span>+<span class="built_in">str</span>(var))</span><br><span class="line">        file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    end = datetime.now()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;耗时:&#x27;</span>+<span class="built_in">str</span>((end-start).seconds)+<span class="string">&quot;s&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">build_data(<span class="string">&#x27;user.txt&#x27;</span>,<span class="number">5000000</span>)</span><br></pre></td></tr></table></figure>
<p>大概花费一分钟，大小200+M，可以利用多线程提高速度,这里id也要写进去</p>
<h2 id="user-txt导入mysql-耗时40s"><a href="#user-txt导入mysql-耗时40s" class="headerlink" title="user.txt导入mysql(耗时40s)"></a>user.txt导入mysql(耗时40s)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data infile <span class="string">&#x27;/var/lib/mysql/user.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">user</span> fields terminated <span class="keyword">by</span> <span class="string">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>在mysql命令行中执行，大概花费40s，全部导入数据。其中的路径是修改根据你的条件修改，分隔符是空格</p>
<h1 id="生成五千万用户关系数据"><a href="#生成五千万用户关系数据" class="headerlink" title="生成五千万用户关系数据"></a>生成五千万用户关系数据</h1><p> 现在我们假定平均下来每个用户有10个粉丝。但是某些小概率的用户有超过10个粉丝。这样的需求有点类似于微信抢红包算法。<br> 我们来想象以下，有500w用户来瓜分5000w的红包，并且我们期望的<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/5362790?fromtitle=%E6%9C%9F%E6%9C%9B&fromid=10318906&fr=aladdin">均值</a>是10，同时需要保证一个合理的数据离散程度即<a href="https://baike.baidu.com/item/%E6%96%B9%E5%B7%AE">方差</a>。但是这个问题困扰了我两天，最终也没能完美的解决。按照我预想的选择<a href="https://baike.baidu.com/item/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/829892?fr=aladdin">正态分布</a>或者<a href="https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83">对数正态分布</a>能够生成较好看的数据。但是还是无法解决，以后再考虑吧。需要学习的太多，不能偏离主线太多。</p>
<h2 id="创建用户关系表"><a href="#创建用户关系表" class="headerlink" title="创建用户关系表"></a>创建用户关系表</h2> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_follow` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `follow_user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<h2 id="python脚本生成-耗时3分钟"><a href="#python脚本生成-耗时3分钟" class="headerlink" title="python脚本生成(耗时3分钟)"></a>python脚本生成(耗时3分钟)</h2><blockquote>
<p>上面说的生成太复杂了。我们用最简单的一个用户对应10个固定id的关注。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成千万个用户数据</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 用户量</span></span><br><span class="line">user_count = <span class="number">5000000</span></span><br><span class="line"><span class="comment"># 线程数</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line">cell_length = math.ceil(user_count/batch_size)</span><br><span class="line">file_path = <span class="string">&#x27;user-follow.txt&#x27;</span></span><br><span class="line"><span class="comment"># 加载写入文件</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">   os.remove(file_path)</span><br><span class="line">file = <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理数据生成</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_gen</span>(<span class="params">i,b</span>):</span></span><br><span class="line">    a =  i*cell_length</span><br><span class="line">    b =  (i+<span class="number">1</span>)*cell_length</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(a)+<span class="string">&quot;,&quot;</span>+<span class="built_in">str</span>(b)+<span class="string">&quot; start&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(a,b)):</span><br><span class="line">        tmp=[<span class="number">1</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>,<span class="number">700</span>,<span class="number">800</span>,<span class="number">900</span>]</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tmp:</span><br><span class="line">            file.writelines(<span class="built_in">str</span>(var+<span class="number">1</span>)+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(t))</span><br><span class="line">            file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据生成中，线程数:&#x27;</span>+<span class="built_in">str</span>(batch_size))</span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">    t = threading.Thread(target=handler_gen,args=(i,<span class="number">1</span>))</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">end = datetime.now()</span><br><span class="line">file.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;耗时:&#x27;</span>+<span class="built_in">str</span>((end-start).seconds)+<span class="string">&quot;s&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="user-follow-txt导入mysql-耗时5m12s"><a href="#user-follow-txt导入mysql-耗时5m12s" class="headerlink" title="user-follow.txt导入mysql(耗时5m12s)"></a>user-follow.txt导入mysql(耗时5m12s)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data infile <span class="string">&#x27;/var/lib/mysql/user-follow.txt&#x27;</span> ignore <span class="keyword">into</span> <span class="keyword">table</span> user_follow fields terminated <span class="keyword">by</span> <span class="string">&#x27; &#x27;</span>(user_id,follow_user_id)<span class="keyword">set</span> id <span class="operator">=</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>应该是几分钟吧，我导入的时候navcat超时了。上面的sql自动忽略错误以及自增长id。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data infile &#x27;/var/lib/mysql/user-follow.txt&#x27; ignore into table user_follow fields terminated by &#x27; &#x27;(user_id,follow_user_id)set id = null;</span><br><span class="line">Query OK, 50000000 rows affected, 40869 warnings (5 min 12.10 sec)</span><br><span class="line">Records: 50000000  Deleted: 0  Skipped: 0  Warnings: 40869</span><br></pre></td></tr></table></figure>

<blockquote>
<p>好了，用了几天时间终于整理完了。主要那个正态分布研究很久，虽然没在这里用，还是很有收获。因为如果加上那些py生成的速度会慢很多。</p>
</blockquote>
<p>下一章将研究这些海量数据在查询上的性能问题。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot2项目基础之mybatis-plus</title>
    <url>/2021/07/27/39905ff10de1.html</url>
    <content><![CDATA[<p><code>可能你会好奇官网有教程，看这篇文章干嘛。相信我这是一个系列，整个系列包含了开发过程应该注意的问题比如枚举、表连接、查询、缓存、开发插件等。看下去会有帮助</code></p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>此框架介绍是一个系列，以我开源的项目《开发者指引》后台为目标。其中包含了后端后台开发的大部分功能。</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>作为后端开发，当然经常与数据打交道。经常性的CRUD，我们可能在一遍遍的重复增、删、改、查。这样的代码写的当然很累。而且没有技术含量。因此选择好ORM框架是非常关键的。我们经常了解到的就是Hibernate、Mybatis这两大框架。<br>它们有各自的优点。Hibernate拥有自己的数据操作语言与数据库解耦。但我本人非常喜欢Mybatis框架的设计方法，因此我总喜欢明确的知道最终的sql是什么样的，并且我可以轻易的修改它。它利用xml的方式动态的对sql进行解析处理，极大的增加了灵活性，使我们在写一些统计、分析、表连接等查询操作更加得心应手，但是它有一个非常麻烦的东西就是xml。常见的CRUD也需要在xml中配置，虽然mybatis有自己的生成器，我认为还不够完善。因此我们选择了<code>mybatis-plus这个基于mybatis的第三方框架来完成我们的ORM操作。</code></p>
<h1 id="了解mybatis"><a href="#了解mybatis" class="headerlink" title="了解mybatis"></a>了解mybatis</h1><p>在Spring Boot下我们集成mybatis后，对数据操作核心xml、mapper，xml可以利用工具生成，所有的基础CRUD都在xml中，当我们要新增sql方法时，需要面对非常冗余的xml，是非常痛苦的。因此我选择在xml中解放出来，让mybatis-plus来完成。</p>
<h1 id="了解mybatis-plus-简称mp"><a href="#了解mybatis-plus-简称mp" class="headerlink" title="了解mybatis-plus(简称mp)"></a>了解mybatis-plus(简称mp)</h1><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。具体如何详细的配置mp请看<a href="https://mp.baomidou.com/guide/#%E7%89%B9%E6%80%A7">看官网</a>。本篇文章主要对<code>mp-generator</code>工具不足之处做改进。</p>
<h1 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h1><p>我最烦的就是添加依赖，因为我总是记不住。不得不去查找。现在我不用担心了，因为我们开发的就是这样后台工具，只需要在后台输入关键字，需要的maven依赖就会查询出来。类似与spring boot的快速开始，但这个功能将会更加强大。不仅如此它还包含配置文件的字段查询。以及详细的注释。</p>
<p>假设我们使用<code>数据库为mysql</code>，Spring Boot的maven假设建立好了之后添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="配置mybatis-plus-generator"><a href="#配置mybatis-plus-generator" class="headerlink" title="配置mybatis-plus-generator"></a>配置mybatis-plus-generator</h1><blockquote>
<p>在开发时，我们会根据表结构生成后端的entity、mapper、service、controller这些层的代码文件。<code>mybatis-plus-generator</code>工具是由MP提供的生成工具，但是MP官方的生成工具不支持实体字段枚举类似为枚举，所以我fork项目后自己完善了一下功能。并且它们的代码生成理念与我不同，我专注代码的持续生成，在将来我可能会设计基于<code>代码持续生成</code>以及<code>测试驱动开发</code>这两大理念来完善程序设计。<br><a href="https://github.com/mathcoder23/mybatis-plus">点此进入代码仓库</a>。<code>在分支3.0中</code>。下面的实现都需要自己拉这个仓库代码完成。</p>
</blockquote>
<p>详细的生成配置我这里就不说了。这里说说新增枚举的使用方式</p>
<h2 id="步骤一、枚举字段备注"><a href="#步骤一、枚举字段备注" class="headerlink" title="步骤一、枚举字段备注"></a>步骤一、枚举字段备注</h2><p>在需要使用枚举的字段中使用备注。备注格式如下。目前枚举的原始类型只支持整数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb` (</span><br><span class="line">  `type` <span class="type">smallint</span>(<span class="number">3</span>) COMMENT <span class="string">&#x27;注释[success(0):成功, fail(1):失败]&#x27;</span>,</span><br><span class="line">  `status` <span class="type">bigint</span>(<span class="number">3</span>) COMMENT <span class="string">&#x27;换行的注释</span></span><br><span class="line"><span class="string">                                         [</span></span><br><span class="line"><span class="string">                                           login_success(0):登录成功,</span></span><br><span class="line"><span class="string">                                           login_fail(1):登录失败</span></span><br><span class="line"><span class="string">                                         ]&#x27;</span>,</span><br><span class="line">  `user_type` <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;具体注释的写法是比较宽泛的，只要匹配上面正则就行</span></span><br><span class="line"><span class="string">   [    success (   我是具体值  )    : 我是值的描述_我可以是中英文数字和下划线_xxx_123, fail_xx_3</span></span><br><span class="line"><span class="string">    (1  ) :  失败] 后面也可以跟注释&#x27;</span>                                       </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>格式及部分源码实现参考<a href="https://github.com/itfsw/mybatis-generator-plugin#21-%E7%8A%B6%E6%80%81%E6%9E%9A%E4%B8%BE%E7%94%9F%E6%88%90%E6%8F%92%E4%BB%B6">itfsw/mybatis-generator-plugin</a>。但是我新增了直接在Entity对象中映射为枚举类。它的依然是int类型。</p>
<h2 id="步骤二、配置生成策略"><a href="#步骤二、配置生成策略" class="headerlink" title="步骤二、配置生成策略"></a>步骤二、配置生成策略</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//策略中新增字段</span></span><br><span class="line">strategy.setSuperEnumClass(<span class="string">&quot;xxx.xxx.config.BaseEnum&quot;</span>);</span><br><span class="line"><span class="comment">//其中字符串是你工程中BaseEnum枚举的路径。此枚举接口定义如下，这需要你自己写在自己工程中。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseEnum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取枚举的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 枚举的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举名称，在json序列号显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置好之后，点击代码生成。此时实体对应的字段已经是枚举类型了，但是<code>枚举类型mybatis还无法解析</code>，因为mybatis有默认的枚举解析器。我们需要自定义并覆盖它。</p>
<h2 id="步骤三、BaseEnumTypeHandler"><a href="#步骤三、BaseEnumTypeHandler" class="headerlink" title="步骤三、BaseEnumTypeHandler"></a>步骤三、BaseEnumTypeHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">BaseEnumTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt; &amp; <span class="title">BaseEnum</span>&lt;<span class="title">E</span>,?&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">BaseEnum</span>&lt;<span class="title">E</span>,?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举的class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;BaseEnum&lt;E,?&gt;&gt; type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举的每个子类枚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BaseEnum&lt;E,?&gt;[] enums;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一定要有默认的构造函数，不然抛出 not found method 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseEnumTypeHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置配置文件设置的转换类以及枚举类内容，供其他方法更便捷高效的实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 配置文件中设置的转换类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseEnumTypeHandler</span><span class="params">(Class&lt;BaseEnum&lt;E,?&gt;&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Type argument cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.enums = type.getEnumConstants();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(type.getSimpleName()</span><br><span class="line">                    + <span class="string">&quot; does not represent an enum type.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, BaseEnum&lt;E,?&gt; parameter,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.setObject(i, parameter.getValue());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaseEnum&lt;E,?&gt; getNullableResult(ResultSet rs, String columnName)</span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String i = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> locateEnumStatus(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaseEnum&lt;E,?&gt; getNullableResult(ResultSet rs, <span class="keyword">int</span> columnIndex)</span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String i = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> locateEnumStatus(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaseEnum&lt;E,?&gt; getNullableResult(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String i = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (cs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> locateEnumStatus(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类型转换，由于构造函数获取了枚举的子类 enums，让遍历更加高效快捷，</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 我将取出来的值 全部转换成字符串 进行比较，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 数据库中存储的自定义value属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value 对应的枚举类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BaseEnum&lt;E,?&gt; locateEnumStatus(String value) &#123;</span><br><span class="line">        <span class="keyword">for</span> (BaseEnum&lt;E,?&gt; e : enums) &#123;</span><br><span class="line">            String a = Objects.toString(e.getValue());</span><br><span class="line">            <span class="keyword">if</span> (a.equals(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;未知的枚举类型：&quot;</span> + value + <span class="string">&quot;,请核对&quot;</span></span><br><span class="line">                + type.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="步骤四、覆盖默认的枚举解析器"><a href="#步骤四、覆盖默认的枚举解析器" class="headerlink" title="步骤四、覆盖默认的枚举解析器"></a>步骤四、覆盖默认的枚举解析器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span> <span class="comment">// 通过order值的大小来决定启动的顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitSpringBoot</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	SqlSessionFactory sqlSessionFactory;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().setDefaultEnumTypeHandler(BaseEnumTypeHandler.class);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在spring boot的所以bean初始化完毕后，我们获取sqlSessionFactory来修改默认的枚举解析器。<code>不要注入TypeHandlerRegistery</code>因此这不是bean管理，而是直接new的。<br>同时也<code>不要用mybatis.type-handlers-package=xxx</code>来配置，这将是无效。只有手动覆盖默认枚举解析器才行。至于为什么，应该是TypeHandlerRegistery中解析器的初始化方式决定的。个人感觉TypeHandlerRegistery没有管理typeHandlerMap的入口，对于类型扩展很不方便。因为mybatis默认注入进去的，我们没办法修改。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这章内容就到这里。今后我们将介绍测试框架、json枚举序列化等内容。<br>下面是放github上的配置代码<br><a href="https://github.com/mathcoder23/mybatis-plus/blob/3.0/mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/EnumGeneratorTest.java">mybatis-plus本教程的配置代码</a><br><a href="https://github.com/mathcoder23/mybatis-plus/tree/3.0/mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/configtemplate">枚举类、TypeHandler、装载TypeHandler</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18Linux 安装微信小程序开发工具</title>
    <url>/2021/07/27/e3021aeaee7a.html</url>
    <content><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul>
<li>1，安装wine命令</li>
<li>2，下载Linux版微信小程序IDE</li>
<li>4，制作启动图标</li>
<li>5，安装Consolas字体</li>
</ul>
<h1 id="1，安装wine命令"><a href="#1，安装wine命令" class="headerlink" title="1，安装wine命令"></a>1，安装wine命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">具体我忘记怎么装的wine，应该可以通过</span> </span><br><span class="line">sudo apt install wine</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决安装IDE后不能编译的问题</span></span><br><span class="line">sudo apt install wine-binfmt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里说明一下我这里试了三个系统，Ubuntu20，Deepin20，Mint20.其中deepin可以安装但是无法正常的编译小程序，测试发现wine版本必须在5.0以上能正常使用，deepin通过源安装版本是4.x。5.x没装成功，但deepin-wine5可以装成功，但还是有问题。</p>
</blockquote>
<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p><code>wine --version</code></p>
<h1 id="2，下载Linux版微信小程序IDE"><a href="#2，下载Linux版微信小程序IDE" class="headerlink" title="2，下载Linux版微信小程序IDE"></a>2，下载Linux版微信小程序IDE</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 现实是骨感的，<span class="built_in">clone</span>非常慢</span></span><br><span class="line">git clone https://github.com/cytle/wechat_web_devtools.git</span><br></pre></td></tr></table></figure>
<h2 id="利用代理站下载github资源"><a href="#利用代理站下载github资源" class="headerlink" title="利用代理站下载github资源"></a>利用代理站下载github资源</h2><p><a href="https://shrill-pond-3e81.hunsh.workers.dev/">GitHub 文件加速</a> 输入 <a href="https://github.com/cytle/wechat_web_devtools/archive/master.zip">https://github.com/cytle/wechat_web_devtools/archive/master.zip</a></p>
<p>以上在线加速站不能保证一定可用，如果失效 查询github下载加速 <a href="https://zhuanlan.zhihu.com/p/121015450">github下载加速方案</a></p>
<h2 id="如果代理加速失效，可以用我gitee上fork的地址"><a href="#如果代理加速失效，可以用我gitee上fork的地址" class="headerlink" title="如果代理加速失效，可以用我gitee上fork的地址"></a>如果代理加速失效，可以用我gitee上fork的地址</h2><p><code>git clone https://gitee.com/mathcoder23/wechat_web_devtools.git</code><br>但是不保证代码更新的时效性(20200815)</p>
<h1 id="安装运行小程序IDE"><a href="#安装运行小程序IDE" class="headerlink" title="安装运行小程序IDE"></a>安装运行小程序IDE</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入下载的wechat_web_devtools目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新安装</span></span><br><span class="line">./bin/wxdt install </span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">./bin/wxdt</span><br></pre></td></tr></table></figure>
<p>理论上到这步就能正常的弹出小程序IDE页面了。<br>下面我们在优化一下，制作一个桌面启动图标</p>
<h1 id="3，启动器制作"><a href="#3，启动器制作" class="headerlink" title="3，启动器制作"></a>3，启动器制作</h1><h2 id="创建启动器文件"><a href="#创建启动器文件" class="headerlink" title="创建启动器文件"></a>创建启动器文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=微信小程序 </span><br><span class="line">Comment=快乐开发</span><br><span class="line">Exec=/home/xxx/software/wechat_web_devtools-master/bin/wxdt</span><br><span class="line">Icon=/home/xxx/software/wechat_web_devtools-master/wx.png</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=false</span><br><span class="line">Encoding=UTF-8</span><br></pre></td></tr></table></figure>
<p>启动文件地址：<a href="https://gitee.com/mathcoder23/wechat_web_devtools/raw/master/wx-tool.desktop">点击下载</a><br>下载图标：<a href="https://gitee.com/mathcoder23/wechat_web_devtools/raw/master/wx.png">点击下载</a></p>
<h1 id="4，安装字体"><a href="#4，安装字体" class="headerlink" title="4，安装字体"></a>4，安装字体</h1><p><a href="https://gitee.com/mathcoder23/wechat_web_devtools/raw/master/YaHeiConsolas.tar.gz">点击下载</a><br>下载后直接解压双击之后点安装字体就行</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/share/applications</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将上面的代码粘贴进来保存就可以了</span></span><br><span class="line">sudo vi wx-tool.desktop</span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本来打算fork一个到gitee给大家下载和拉取启动文件，但是考虑到主线可能更新就算了</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.izgq.net/archives/1008/">Ubuntu 16.04 运行微信开发者工具编译出错的解决办法</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app微信公众号web JS-SDK开发之一接入</title>
    <url>/2021/07/27/981a87d29f2f.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>完成基于uni-app H5平台上微信公众号JS-SDK的接入</p>
</blockquote>
<h1 id="uni-appH5接入JS-SDK"><a href="#uni-appH5接入JS-SDK" class="headerlink" title="uni-appH5接入JS-SDK"></a>uni-appH5接入JS-SDK</h1><h2 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h2><h3 id="1，环境说明"><a href="#1，环境说明" class="headerlink" title="1，环境说明"></a>1，环境说明</h3><ol>
<li>vue版的uni-app环境，使用npm来管理uni-app具备更好的灵活性，不用限制在HBuilder上开发，如果不是用npm管理，那么需要在html中导入js</li>
<li>(可选)微信公众号账号，这不是必需的，因为微信提供有测试号的沙盒环境，因此，具有个人微信号在开发阶段也是可行的</li>
<li>(可选)公网web地址方便公网测试，但基于内网调试，可以形成调试闭环，但需要能够访问外网的能力，因为要访问微信。<h3 id="2，JS-SDK接入说明"><a href="#2，JS-SDK接入说明" class="headerlink" title="2，JS-SDK接入说明"></a>2，JS-SDK接入说明</h3><blockquote>
<p>先说一下整体的接入概要，让整个框架有个思路</p>
</blockquote>
</li>
<li>JS-SDK本质是通过js注入完成的，为web页面提供一些基于微信客户端运行时的便捷功能，比如：图片上传、微信登录、分享、地理位置、扫一扫、支付等，总的来说就是面向手机底层的一些应用。我们接入JS-SDK的目的就是为了让H5网页，具有像”App”一样的功能。</li>
<li>JS-SDK中的功能是受微信限制的，这里JS-SDK的功能方法，就是微信文档中的“接口”，所有接口都是受微信管控的，这也能理解，比如像支付这类，肯定就需要与微信产生通讯联系。这里的“限制”是广义的，也包含一些无限制的接口</li>
<li>微信“限制”了接口，那是为了考虑用户安全，<code>需要在微信公众账号配置“JS安全域名”</code>，配置了此域名，H5页面才能接入JS-SDK，作为微信服务商也就知道了你是谁，所以当H5被打开时，<code>微信服务商知道“页面的提供者是谁(这里的主体是公众号)”，同时也知道是谁打开的H5页面(微信用户)</code>。基于这点原理，微信端的H5页面打通了用户与服务商标识的通道，极大提升了便捷性。</li>
<li>微信公众号的登录逻辑，<code>登录是基于OAuth2的第三方授权登录逻辑来实现的。</code>,至于原理稍后再说，这里只需要注意一点，<code>第三方授权登录会重定向到公众号H5页面，不支持基于ajax的方式</code></li>
</ol>
<h3 id="3，资源准备"><a href="#3，资源准备" class="headerlink" title="3，资源准备"></a>3，资源准备</h3><blockquote>
<p>本文只是辅助教程，所以还是需要一些资源</p>
</blockquote>
<ul>
<li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">JS-SDK说明文档</a></li>
<li><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">微信公众平台接口测试帐号申请</a></li>
<li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Web_Developer_Tools.html">web开发者工具</a></li>
<li>公网访问内网方案：<a href="https://blog.csdn.net/mathcoder23/article/details/108771126">Frp轻松解决内网访问方案</a></li>
</ul>
<h2 id="开始接入"><a href="#开始接入" class="headerlink" title="开始接入"></a>开始接入</h2><blockquote>
<p>前面说了那么多废话，终于要看是实干了。</p>
</blockquote>
<h3 id="本人前后端开发框架"><a href="#本人前后端开发框架" class="headerlink" title="本人前后端开发框架"></a>本人前后端开发框架</h3><ul>
<li>前端uni-app</li>
<li>后端maven、Spring Boot</li>
</ul>
<h3 id="第一步，下载web开发者工具"><a href="#第一步，下载web开发者工具" class="headerlink" title="第一步，下载web开发者工具"></a>第一步，下载web开发者工具</h3><blockquote>
<p>在上面的连接地址中，下载web开发者工具，方便预览</p>
</blockquote>
<h3 id="第二步，uni-app安装JS-SDK并初始化（前端）"><a href="#第二步，uni-app安装JS-SDK并初始化（前端）" class="headerlink" title="第二步，uni-app安装JS-SDK并初始化（前端）"></a>第二步，uni-app安装JS-SDK并初始化（前端）</h3><ol>
<li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install weixin-js-sdk --save # --save将依赖保存到package.json中</span><br></pre></td></tr></table></figure></li>
<li>初始化(这里是指初始化JS环境，不是初始化配置)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">&#x27;weixin-js-sdk&#x27;</span>;</span><br><span class="line"><span class="comment">//这里将wx重命名为wxmp的全局变量，目的是防止与uni-app等发生变量冲突。</span></span><br><span class="line"><span class="built_in">window</span>.wxmp = wx</span><br></pre></td></tr></table></figure>
<p><code>这里说明一下wxmp.config方法是JS-SDK的功能初始化，其中涉及到AppId、加密算法、签名等，所有config方法中的参数我们是通过服务端获取的</code></p>
<h3 id="第三步，初始化微信公众账号沙盒"><a href="#第三步，初始化微信公众账号沙盒" class="headerlink" title="第三步，初始化微信公众账号沙盒"></a>第三步，初始化微信公众账号沙盒</h3><h4 id="点击上面的微信公众平台接口测试帐号申请进入沙盒申请"><a href="#点击上面的微信公众平台接口测试帐号申请进入沙盒申请" class="headerlink" title="点击上面的微信公众平台接口测试帐号申请进入沙盒申请"></a>点击上面的<code>微信公众平台接口测试帐号申请</code>进入沙盒申请</h4><p>授权登录后如下：</p>
<img src="/2021/07/27/981a87d29f2f/1627349184926.png" class="">
<h4 id="配置JS安全域名（重要、重要、重要）"><a href="#配置JS安全域名（重要、重要、重要）" class="headerlink" title="配置JS安全域名（重要、重要、重要）"></a>配置JS安全域名（重要、重要、重要）</h4><img src="/2021/07/27/981a87d29f2f/1627349184926.png" class="">
<p>由于沙盒环境，可以配置内网、localhost地址</p>
<h3 id="第四步，后端接入微信公众号，实现wx-config配置参数-后端"><a href="#第四步，后端接入微信公众号，实现wx-config配置参数-后端" class="headerlink" title="第四步，后端接入微信公众号，实现wx.config配置参数(后端)"></a>第四步，后端接入微信公众号，实现wx.config配置参数(后端)</h3><h4 id="1-提供jsSdkConfig接口-公共接口"><a href="#1-提供jsSdkConfig接口-公共接口" class="headerlink" title="1. 提供jsSdkConfig接口(公共接口)"></a>1. 提供jsSdkConfig接口(公共接口)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> me.chanjar.weixin.common.bean.WxJsapiSignature;</span><br><span class="line"><span class="keyword">import</span> me.chanjar.weixin.common.error.WxErrorException;</span><br><span class="line"><span class="keyword">import</span> me.chanjar.weixin.mp.api.WxMpService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/openApi/comm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsSdkRest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;jsSdkConfig&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;jsSdkConfig&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestObjectResponse&lt;WxJsapiSignature&gt; <span class="title">jsSdkConfig</span><span class="params">(<span class="meta">@ApiParam(&quot;url包含查询参数&quot;)</span> <span class="meta">@RequestParam(&quot;url&quot;)</span> String url)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RestObjectResponse.ok(wxMpService.createJsapiSignature(url));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RestObjectResponse</code>你应该没有，自行替换</p>
<h4 id="2-引入公众号对接依赖"><a href="#2-引入公众号对接依赖" class="headerlink" title="2. 引入公众号对接依赖"></a>2. 引入公众号对接依赖</h4><p><code>WxMpService</code>是基于开源的公众号接入库maven依赖如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-配置WxMpService-Bean"><a href="#3-配置WxMpService-Bean" class="headerlink" title="3.配置WxMpService Bean"></a>3.配置WxMpService Bean</h4><blockquote>
<p>我没有用starter版，习惯自行配置bean，这样更灵活</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信公众号配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxMpService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WxMpServiceImpl wxMpService = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        WxMpDefaultConfigImpl conf = <span class="keyword">new</span> WxMpDefaultConfigImpl();</span><br><span class="line">        conf.setAppId(ProjectWxMpConfigBean.INSTANCE.getAppId());</span><br><span class="line">        conf.setSecret(ProjectWxMpConfigBean.INSTANCE.getSecret());</span><br><span class="line">        conf.setToken(ProjectWxMpConfigBean.INSTANCE.getToken());</span><br><span class="line">        conf.setAesKey(ProjectWxMpConfigBean.INSTANCE.getAesKey());</span><br><span class="line">        wxMpService.setWxMpConfigStorage(conf);</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第五步，前端调用配置接口初始化配置"><a href="#第五步，前端调用配置接口初始化配置" class="headerlink" title="第五步，前端调用配置接口初始化配置"></a>第五步，前端调用配置接口初始化配置</h3><h4 id="获取配置接口"><a href="#获取配置接口" class="headerlink" title="获取配置接口"></a>获取配置接口</h4><p><code>其实这没啥好说的，但是有一点需要注意，那就是获取配置接口需要传入url并且包含查询参数</code></p>
<blockquote>
<p>参考代码:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getJsSdkConfig = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="built_in">escape</span>(<span class="built_in">window</span>.location.href)</span><br><span class="line">    <span class="keyword">return</span> PFApi.apiGet(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">uri</span>:<span class="string">&#x27;/openApi/comm/jsSdkConfig&#x27;</span></span><br><span class="line">        &#125;,&#123;<span class="attr">url</span>:url&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ApiComm = &#123;</span><br><span class="line">    <span class="attr">getJsSdkConfig</span>:getJsSdkConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里顺便啰嗦一下url组成</p>
</blockquote>
<img src="/2021/07/27/981a87d29f2f/1627349184927.png" class="">
<p>红框中每个属性自行理解，肯定是有差异的。</p>
<h4 id="js配置"><a href="#js配置" class="headerlink" title="js配置"></a>js配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wxmp.config(&#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  <span class="attr">timestamp</span>: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  <span class="attr">signature</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  <span class="attr">jsApiList</span>: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>jsApiList,要用到的wx方法都需要配置在这里面，字符串数组，方法名</code></p>
<h3 id="第六步，确认"><a href="#第六步，确认" class="headerlink" title="第六步，确认"></a>第六步，确认</h3><blockquote>
<p>刷新页面出现下面的弹框说明配置ok，如果报错，根据错误码在微信文档去找</p>
</blockquote>
<img src="/2021/07/27/981a87d29f2f/1627349184927.png" class="">

]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app微信公众号web JS-SDK开发之二授权登录</title>
    <url>/2021/07/26/307acba3444c.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不了解如何接入JS-SDK的可以先看看上篇文章<a href="https://blog.csdn.net/mathcoder23/article/details/108788992">uni-app微信公众号web JS-SDK开发之一接入</a></p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>通过微信授权登录到系统<h2 id="微信登录原理"><a href="#微信登录原理" class="headerlink" title="微信登录原理"></a>微信登录原理</h2><img src="/2021/07/26/307acba3444c/1627295749605.png" class="">
<code>注意上面的域名信息</code><h2 id="实现微信登录"><a href="#实现微信登录" class="headerlink" title="实现微信登录"></a>实现微信登录</h2>先看一下微信文档了解一下：<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">网页授权</a><h3 id="回调域名配置-必须配置，是页面不是接口"><a href="#回调域名配置-必须配置，是页面不是接口" class="headerlink" title="回调域名配置(必须配置，是页面不是接口)"></a>回调域名配置(必须配置，是页面不是接口)</h3><img src="/2021/07/26/307acba3444c/1627295749605.png" class="">
<img src="/2021/07/26/307acba3444c/1627295749606.png" class="">
<h2 id="后端实现code换OpenId"><a href="#后端实现code换OpenId" class="headerlink" title="后端实现code换OpenId"></a>后端实现code换OpenId</h2><code>使用weixin-java-mp</code><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
我没用starter版，自己定义更灵活<h3 id="初始化WxMpService"><a href="#初始化WxMpService" class="headerlink" title="初始化WxMpService"></a>初始化WxMpService</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpServiceDaemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line">    <span class="keyword">private</span> String configHash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get后不要缓存，因为会被因配置的改变而实时刷新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">getWxMpService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(ProjectWxMpConfigBean.INSTANCE.getAppId())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;未配置公众号AppId等字段&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(ProjectWxMpConfigBean.INSTANCE.getSecret())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;未配置公众号AppSecret等字段&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String hash = SecureUtil.md5(ProjectWxMpConfigBean.INSTANCE.getAppId() + ProjectWxMpConfigBean.INSTANCE.getSecret() + ProjectWxMpConfigBean.INSTANCE.getToken() + ProjectWxMpConfigBean.INSTANCE.getAesKey());</span><br><span class="line">        <span class="keyword">if</span> (hash.equals(configHash) &amp;&amp; <span class="keyword">null</span> != wxMpService) &#123;</span><br><span class="line">            <span class="comment">//配置未变，使用缓存</span></span><br><span class="line">            <span class="keyword">return</span> wxMpService;</span><br><span class="line">        &#125;</span><br><span class="line">        WxMpServiceImpl wxMpService = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        WxMpDefaultConfigImpl conf = <span class="keyword">new</span> WxMpDefaultConfigImpl();</span><br><span class="line">        conf.setAppId(ProjectWxMpConfigBean.INSTANCE.getAppId());</span><br><span class="line">        conf.setSecret(ProjectWxMpConfigBean.INSTANCE.getSecret());</span><br><span class="line">        conf.setToken(ProjectWxMpConfigBean.INSTANCE.getToken());</span><br><span class="line">        conf.setAesKey(ProjectWxMpConfigBean.INSTANCE.getAesKey());</span><br><span class="line">        wxMpService.setWxMpConfigStorage(conf);</span><br><span class="line">        configHash = hash;</span><br><span class="line">        <span class="keyword">this</span>.wxMpService = wxMpService;</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
自定义了<code>WxMpServiceDaemon </code>来获取WxMpService，这种方式可以根据配置信息的改变而实时刷新WxMpService实现热更换</li>
</ul>
<h3 id="code换OpenId"><a href="#code换OpenId" class="headerlink" title="code换OpenId"></a>code换OpenId</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxmpAuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AppUserWriteBiz appUserWriteBiz;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AppUserReadBiz appUserReadBiz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String, String&gt; codeCache = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">5</span>, TimeUnit.MINUTES).build();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxMpServiceDaemon wxMpServiceDaemon;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        WxMpOAuth2AccessToken session = <span class="keyword">null</span>;</span><br><span class="line">        String openId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (s.intern()) &#123;</span><br><span class="line">            openId = codeCache.getIfPresent(s);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    session = wxMpServiceDaemon.getWxMpService().getOAuth2Service().getAccessToken(s);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;login by weixin mp error&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">&quot;微信登录错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                openId = session.getOpenId();</span><br><span class="line">                codeCache.put(s, openId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String finalOpenId = openId;</span><br><span class="line">        AppUser appUser = Optional.ofNullable(appUserReadBiz.getByMpOpenId(openId)).orElseGet(() -&gt; appUserWriteBiz.createMpUser(finalOpenId));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == appUser) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(openId, appUser.getPassword(), getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;GrantedAuthority&gt; <span class="title">getAuthorities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        authList.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_USER&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> authList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>这里是基于Spring Security OAuth2实现的，可以根据关键代码提炼</code><br>说明一下这里的code即变量s，由于可能存在code重复访问、并发访问的问题，所以我们加了锁和使用了缓存来存储code和openId关系，但这里注意一下，这里有安全隐患比如code泄露重复获取登录token，为了避免这样的问题，我们可以将接口api进行url签名保证每个请求的唯一性以及不可重复性。如果不想这么麻烦就把codeCache给去掉。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-quill-editor 图片实现自定义服务器上传的简单方法</title>
    <url>/2021/07/26/0b8aaecdc202.html</url>
    <content><![CDATA[<h1 id="vue-quill-editor介绍"><a href="#vue-quill-editor介绍" class="headerlink" title="vue-quill-editor介绍"></a>vue-quill-editor介绍</h1><p>这款组件是基于quill的富文本编辑器改造为vue环境使用的。<br><a href="https://github.com/surmon-china/vue-quill-editor">github地址-vue-quill-editor</a>的基于MIT开源协议，可以放心使用</p>
<h1 id="安装vue-quill-editor"><a href="#安装vue-quill-editor" class="headerlink" title="安装vue-quill-editor"></a>安装vue-quill-editor</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-quill-editor --save</span><br></pre></td></tr></table></figure>
<h1 id="注册组件到vue环境"><a href="#注册组件到vue环境" class="headerlink" title="注册组件到vue环境"></a>注册组件到vue环境</h1><p>路径：<code>main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">&#x27;vue-quill-editor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span> <span class="comment">// import styles</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span> <span class="comment">// for snow theme</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span> <span class="comment">// for bubble theme</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueQuillEditor)</span><br></pre></td></tr></table></figure>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Two-way Data-Binding --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quill-editor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;myQuillEditor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">&quot;editorOption&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">blur</span>=<span class="string">&quot;onEditorBlur($event)&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">focus</span>=<span class="string">&quot;onEditorFocus($event)&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">ready</span>=<span class="string">&quot;onEditorReady($event)&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    data () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">content</span>: <span class="string">&#x27;&lt;h2&gt;I am Example&lt;/h2&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">editorOption</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// Some Quill options...</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onEditorBlur</span>(<span class="params">quill</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;editor blur!&#x27;</span>, quill)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onEditorFocus</span>(<span class="params">quill</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;editor focus!&#x27;</span>, quill)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onEditorReady</span>(<span class="params">quill</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;editor ready!&#x27;</span>, quill)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onEditorChange</span>(<span class="params">&#123; quill, html, text &#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;editor change!&#x27;</span>, quill, html, text)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.content = html</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">editor</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$refs.myQuillEditor.quill</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;this is current quill instance object&#x27;</span>, <span class="built_in">this</span>.editor)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h1><blockquote>
<p>作为富文本编辑器，在工程中难免会进行一些二次的开发，因此建议将quill-editor封装在一个项目专用的组件中</p>
</blockquote>
<h1 id="富文本的图片如何上传到自定义服务器或者云服务中呢"><a href="#富文本的图片如何上传到自定义服务器或者云服务中呢" class="headerlink" title="富文本的图片如何上传到自定义服务器或者云服务中呢?"></a>富文本的图片如何上传到自定义服务器或者云服务中呢?</h1><blockquote>
<p>网上有很多教程，但是个人觉得过去麻烦，什么重写上传图片组件、重写粘贴板图片处理事件，这里麻烦的是图片被添加到富文本框内途径可以是上传按钮也可以是粘贴板，在处理的时候还是略显麻烦。<br><code>因此这里我设计的方案是监听富文本的内容。利用正则匹配到src下是base64文本时进行图片上传操作</code></p>
</blockquote>
<h1 id="改造简单示例"><a href="#改造简单示例" class="headerlink" title="改造简单示例"></a>改造简单示例</h1><p><code>我们直接在onEditorChange回调中写上述设计方案的处理逻辑</code>下面我只展示改造后的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里将方法改造为async/await模式方便异步链处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">onEditorChange</span>(<span class="params">&#123;quill, html, text&#125;</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;editor change!&#x27;</span>, quill, html, text)</span><br><span class="line">  <span class="built_in">this</span>.content = <span class="keyword">await</span> <span class="built_in">this</span>.convertImageBase64(html)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//转换图片base64至服务端url</span></span><br><span class="line"><span class="function"><span class="title">convertImageBase64</span>(<span class="params">html</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//图片base64提取</span></span><br><span class="line">          <span class="keyword">const</span> regResult = html.match(<span class="regexp">/.*?src=\&quot;(data:.*?;base64,.*?)\&quot;/</span>)</span><br><span class="line">          <span class="keyword">if</span> (regResult <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; regResult[<span class="number">1</span>]) &#123;</span><br><span class="line">             <span class="comment">//base64转为file类型</span></span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&#x27;image&#x27;</span>, ImageUtil.base642File(regResult[<span class="number">1</span>], <span class="string">&#x27;temp&#x27;</span>))</span><br><span class="line">             <span class="comment">//上传至服务器或其它</span></span><br><span class="line">             <span class="comment">// 自行实现接口调用方法</span></span><br><span class="line">             ... </span><br><span class="line">             异步处理后 </span><br><span class="line">             resolve(html.replace(regResult[<span class="number">1</span>], 服务端url))          </span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(html)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>//自行封装的图片操作工具类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const base642File = (dataurl, filename) =&gt; &#123;</span><br><span class="line">    let arr = dataurl.split(&#x27;,&#x27;),</span><br><span class="line">        mime = arr[0].match(/:(.*?);/)[1],</span><br><span class="line">        bstr = atob(arr[1]),</span><br><span class="line">        n = bstr.length,</span><br><span class="line">        u8arr = new Uint8Array(n);</span><br><span class="line">    while (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    return new File([u8arr], filename, &#123;type: mime&#125;);</span><br><span class="line">&#125;</span><br><span class="line">export const ImageUtil = &#123;</span><br><span class="line">    base642File: base642File</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照上诉思路便可以实现任意的自定义操作。流程大概是正则提取base64》base64转file类型》调用封装好的接口方法》根据返回结果替换base64为url</p>
<p><code>根据上述代码，思路还是很清晰，在写代码时个人比较倾向于按面向对象的封装特性来coding，这样既可以利于代码的每个环节改造、升级也可以增加可读性</code></p>
<p><code>再说一点，接口调用我一般是封装在整个api包中，api为上层代码提供服务，使用者只需要根据服务名、方法名、参数等来调用，至于什么接口地址、接口协议、接口类型对于上层代码是不可见的。</code></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>win10或Ubuntu查看动态库dll,so的方法</title>
    <url>/2021/07/26/70a9a173af4e.html</url>
    <content><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><blockquote>
<p>在开发时，可能会调用由C/C++提供的动态库，但是有时候动态库依赖是否正常关系到能否正常调用，有时候在上层应用语言有没有办法友好的提示缺少哪些动态库，所以就总结一下分析依赖的工具</p>
</blockquote>
<span id="more"></span>
<h1 id="Win10下查看dll文件的依赖信息工具"><a href="#Win10下查看dll文件的依赖信息工具" class="headerlink" title="Win10下查看dll文件的依赖信息工具"></a>Win10下查看dll文件的依赖信息工具</h1><h2 id="Dependencies工具"><a href="#Dependencies工具" class="headerlink" title="Dependencies工具"></a>Dependencies工具</h2><p>官网：<a href="https://lucasg.github.io/Dependencies/">https://lucasg.github.io/Dependencies/</a></p>
<p>Github地址：<a href="https://github.com/lucasg/Dependencies">https://github.com/lucasg/Dependencies</a></p>
<p>下载：直接在官网下载或者Github的Release中下载即可</p>
<p>加速地址：<a href="/download/2021D/Dependencies.zip">Dependencies.zip</a></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="/2021/07/26/70a9a173af4e/Dependencies.gif" class="">

<h1 id="Ubuntu下查看so文件的依赖工具"><a href="#Ubuntu下查看so文件的依赖工具" class="headerlink" title="Ubuntu下查看so文件的依赖工具"></a>Ubuntu下查看so文件的依赖工具</h1><h2 id="ldd工具"><a href="#ldd工具" class="headerlink" title="ldd工具"></a>ldd工具</h2><blockquote>
<p>此工具是linux系统自带的工具</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ldd xxx.so</span><br></pre></td></tr></table></figure>

<h1 id="依赖分析技巧"><a href="#依赖分析技巧" class="headerlink" title="依赖分析技巧"></a>依赖分析技巧</h1><ul>
<li>注意动态库加载时的环境变量配置情况，因为依赖库的搜索是根据环境变量来的</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>xxl-job docker镜像部署</title>
    <url>/2021/07/27/0e9fe0d1eac7.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>根据xxl-job修改，如果侵权请联系删除</p>
</blockquote>
<p>源git地址 <code>https://github.com/xuxueli/xxl-job/</code></p>
<p>fork地址 <code>https://github.com/mathcoder23/xxl-job</code></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote>
<p>xxj-job官方本身提供了docker镜像，但是我感觉官方提供的镜像配置不方便。因此改造一下，支持为获取系统的环境变量的方式配置xxl-job</p>
</blockquote>
<h1 id="使用方法-2-0-2为例"><a href="#使用方法-2-0-2为例" class="headerlink" title="使用方法(2.0.2为例)"></a>使用方法(2.0.2为例)</h1><p><code>源代码在fork仓库的，2.0.2-docker分支中</code><br>1，在git仓库中找到对应版本，运行doc下的sql文件，创建数据库及表<br><code>https://raw.githubusercontent.com/mathcoder23/xxl-job/2.0.2-docker/doc/db/tables_xxl_job.sql</code><br>2，在docker的yml文件中配置好外部信息，运行<br><code>docker-compose -f docker-xxl.yml up </code> or     <code>docker stack deploy -c docker-xxl.yml xxl-job</code></p>
<h1 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h1><blockquote>
<p>文件地址:<code>https://raw.githubusercontent.com/mathcoder23/xxl-job/2.0.2-docker/xxl-job-admin/docker-xxl.yml</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  thanks-xxl-job-admin:</span><br><span class="line">    image: registry.cn-hangzhou.aliyuncs.com/mt23/xxl-job-admin:2.0.2</span><br><span class="line">    environment:</span><br><span class="line">       MYSQL_HOST: 192.168.2.107</span><br><span class="line">#       MYSQL_PORT: 3306</span><br><span class="line">#       MYSQL_USER: root</span><br><span class="line">       MYSQL_PASSWORD: mysql1</span><br><span class="line">       LOGIN_USERNAME: admin</span><br><span class="line">       LOGIN_PASSWORD: 1234567</span><br><span class="line">#       WEB_PREFIX: /xxl-job-admin</span><br><span class="line">#       MAIL_HOST: &#x27;&#x27;</span><br><span class="line">#       MAIL_PORT: &#x27;&#x27;</span><br><span class="line">#       MAIL_USERNAME: &#x27;&#x27;</span><br><span class="line">#       MAIL_PASSWORD: &#x27;&#x27;</span><br><span class="line">#       ACCESS_TOKEN: &#x27;&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br></pre></td></tr></table></figure>


<p><code> 参数说明根据yml中命名理解</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>代码细节之前后端Ping检测工具</title>
    <url>/2021/07/26/4b788b354879.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在前端有时候需要输入ip，为了提高用户体验我们增加个Ping的检测工具，但是注意这里的Ping实际上是代理Ping，即服务端代理客户端是Ping，因此Ping的结果是基于服务端的网络拓扑来的。</p>
</blockquote>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="/2021/07/26/4b788b354879/1627295478192.png" class="">
<img src="/2021/07/26/4b788b354879/1627295478196.png" class="">
<h1 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h1><blockquote>
<p>这里直接写成了组件，</p>
</blockquote>
<h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ping-tool</span> <span class="attr">ref</span>=<span class="string">&quot;ping&quot;</span> <span class="attr">:ip</span>=<span class="string">&quot;xxx.ip&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件源码"><a href="#组件源码" class="headerlink" title="组件源码"></a>组件源码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ping&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;&#x27;WAIT&#x27; === status&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-link</span> @<span class="attr">click</span>=<span class="string">&#x27;startPing&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Ping 检测<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;&#x27;PING&#x27; === status&quot;</span>&gt;</span>正在Ping IP:&#123;&#123;this.ip&#125;&#125;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-loading&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;&#x27;ERROR&#x27; === status&quot;</span>&gt;</span>IP:&#123;&#123;this.ip&#125;&#125;格式错误</span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&#x27;startPing&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-refresh&quot;</span> <span class="attr">circle</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;&#x27;FINISHED&#x27; === status&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;pingResult.pingSuccess === true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:mediumseagreen&quot;</span>&gt;</span></span><br><span class="line">                Ping IP:&#123;&#123;this.pingResult.pingIp&#125;&#125; 成功（&#123;&#123;this.pingResult.delay&#125;&#125;ms）</span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&#x27;startPing&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-refresh&quot;</span> <span class="attr">circle</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">                Ping IP:&#123;&#123;this.pingResult.pingIp&#125;&#125; 失败</span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&#x27;startPing&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-refresh&quot;</span> <span class="attr">circle</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Ping的结果仅供参考，因为Ping实际上是服务器完成的，具体还是要依据此ip实际的使用环境评估&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">placement</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">&#x27;margin-left: 5px&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-warning&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;CommApi&#125; <span class="keyword">from</span> <span class="string">&quot;../api/api/commApi&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;PingTool&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">status</span>: <span class="string">&#x27;WAIT&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">pingResult</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">pingIp</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">pingSuccess</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">ip</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">async</span> <span class="function"><span class="title">startPing</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                 <span class="keyword">if</span> (!<span class="built_in">this</span>.ip || <span class="built_in">this</span>.ip.length === <span class="number">0</span> || !(<span class="regexp">/^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d\d?)$/</span>).test(<span class="built_in">this</span>.ip)) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.status = <span class="string">&#x27;ERROR&#x27;</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.status === <span class="string">&#x27;PING&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.status = <span class="string">&#x27;PING&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> rep = <span class="keyword">await</span> CommApi.pingIpCheck(<span class="built_in">this</span>.ip)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> data = rep.data</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.status = <span class="string">&#x27;FINISHED&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.pingResult = data</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.ping</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="后端代码-JAVA"><a href="#后端代码-JAVA" class="headerlink" title="后端代码(JAVA)"></a>后端代码(JAVA)</h1><blockquote>
<p>利用<code>hutool</code>的网络工具包，但是处理逻辑加强了下，取了ping延迟的平均值，以及重试机制</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/pingIpCheck&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RestObjectResponse&lt;PingIpResult&gt; <span class="title">pingIpCheck</span><span class="params">(<span class="meta">@RequestParam(&quot;ip&quot;)</span> String ip)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> timeoutCount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> allPingTime = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">boolean</span> pingResult;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">          StopWatch time = StopWatch.createStarted();</span><br><span class="line">          <span class="keyword">boolean</span> result = NetUtil.ping(ip, <span class="number">2000</span>);</span><br><span class="line">          allPingTime += time.getTime();</span><br><span class="line">          <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">              timeoutCount++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (timeoutCount &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (timeoutCount &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">          pingResult = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          pingResult = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      PingIpResult result = <span class="keyword">new</span> PingIpResult();</span><br><span class="line">      result.setPingIp(ip);</span><br><span class="line">      result.setPingSuccess(pingResult);</span><br><span class="line">      <span class="keyword">if</span> (pingResult) &#123;</span><br><span class="line">          result.setDelay(allPingTime / <span class="number">5</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.setDelay(-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> RestObjectResponse.ok(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span></span><br><span class="line">  <span class="meta">@Setter</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PingIpResult</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">boolean</span> pingSuccess;</span><br><span class="line">      <span class="keyword">private</span> String pingIp;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> delay = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>内存缓存(Ehcache)不小心的写数据，导致缓存被污染的事故</title>
    <url>/2021/07/27/b6e42a77b108.html</url>
    <content><![CDATA[<h1 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h1><ul>
<li>在项目中使用基于内存(JVM)的缓存</li>
<li>缓存了每个用户的基本信息</li>
<li>用户的基本信息会同步到终端设备</li>
</ul>
<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><ul>
<li>发现同步到终端设备的数据与数据库的不一致。但是很奇怪的是其中一个属性值<code>小概率</code>被置为空了。在数据库中值是存在的。</li>
</ul>
<h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><h2 id="1，论证数据库数据与缓存数据的一致性，这里的一致性是指，我在数据库看到的，和被缓存的数据是否相同。"><a href="#1，论证数据库数据与缓存数据的一致性，这里的一致性是指，我在数据库看到的，和被缓存的数据是否相同。" class="headerlink" title="1，论证数据库数据与缓存数据的一致性，这里的一致性是指，我在数据库看到的，和被缓存的数据是否相同。"></a>1，论证数据库数据与缓存数据的一致性，这里的一致性是指，我在数据库看到的，和被缓存的数据是否相同。</h2><p>因为不排除，在查询数据库并缓存时，ORM映射问题导致某个属性没被赋值，但是这种问题一般出现频率是高频的，而不会是偶发。但也不排除偶发概率，因为在属性映射时，假设映射的代码在处理数据时根据某种特定情况而导致返回空。</p>
<h2 id="2，是否存在非数据库的数据源更新缓存。笔者就是走进了这个坑。"><a href="#2，是否存在非数据库的数据源更新缓存。笔者就是走进了这个坑。" class="headerlink" title="2，是否存在非数据库的数据源更新缓存。笔者就是走进了这个坑。"></a>2，是否存在非数据库的数据源更新缓存。笔者就是走进了这个坑。</h2><ul>
<li>首先，我们使用的是内存缓存，当然这里的内存缓存应该理解为被缓存在JVM运行时中，这种缓存就是我们常说的<code>Ehcache</code>,和Redis不同是，Redis是单独的进程，而Ehcache是同一个进程</li>
<li>假设我们对用户A对象进行了缓存，在不销毁的情况下，无论在何时获取用户A对象，返回的都是指向同一个对象地址的指针。在这种模式下，某个线程执行时，经过了用户A对象缓存的获取，通过参数被传递，慢慢的就可能忘记它是缓存返回的。也就慢慢<code>不小心对这个缓存对象的某个属性进行了修改</code>，在其他线程使用时，由于内存地址都是一样的，所以这个缓存的属性已经被偷偷的修改了，已经和数据库的不一致了。在开发时，一个不注意，这个缓存就会被慢慢的污染，最终面目前非，导致莫名其妙的问题。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>在使用基于Ehcache、HashMap等在同一进程的缓存时，一定要注意，读出来的缓存不能被修改，这应该是规范。</li>
<li>某些情况我们会对读取的缓存数据进行加工、转换，但同时加工、转换的载体又放在了缓存对象本身，此时我们应该对缓存对象进行深拷贝。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>利用浏览器插件生成TAPD的更新日志</title>
    <url>/2021/07/26/4b1eb64d0134.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在项目研发中，我们使用TAPD来管理软件研发流程，我们一般在项目内部会有个迭代更新日志，参考如下：</p>
<img src="/2021/07/26/4b1eb64d0134/1627295478230.png" class="">
<p>一般后面跟的就是需求、缺陷的名称。<br><code>当然我们这个手动版的日志肯定比不上全自动化的。</code></p>
<h2 id="每次复制需求、缺陷名称的烦恼"><a href="#每次复制需求、缺陷名称的烦恼" class="headerlink" title="每次复制需求、缺陷名称的烦恼"></a>每次复制需求、缺陷名称的烦恼</h2><img src="/2021/07/26/4b1eb64d0134/1627295478231.png" class="">
<p>看吧这是TAPD缺陷的标题项，每次复制还是有点麻烦。鼠标点一下标题后面的任务ID又消失了。复制还是不太方便。所以所以就自己弄个浏览器插件</p>
<h2 id="基于Tampermonkey-Chrome插件开发插件"><a href="#基于Tampermonkey-Chrome插件开发插件" class="headerlink" title="基于Tampermonkey/Chrome插件开发插件"></a>基于Tampermonkey/Chrome插件开发插件</h2><blockquote>
<p>本人比较懒，不想从无到有重新写个Chrome插件，麻烦的很。所以就用Tampermonkey这款插件了。这款插件的主要功能就是可视化的代码注入。让开发者只需要关心，我要拦截哪个网页，我要注入哪些js代码。</p>
</blockquote>
<h2 id="插件效果和代码如下"><a href="#插件效果和代码如下" class="headerlink" title="插件效果和代码如下"></a>插件效果和代码如下</h2><h3 id="插件脚本管理"><a href="#插件脚本管理" class="headerlink" title="插件脚本管理"></a>插件脚本管理</h3><img src="/2021/07/26/4b1eb64d0134/1627295478231.png" class="">
<h3 id="插件代码"><a href="#插件代码" class="headerlink" title="插件代码"></a>插件代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         TAPD 辅助插件</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://www.tapd.cn/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">    <span class="keyword">let</span> bugId = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;bug-title-id&#x27;</span>)[<span class="number">0</span>].innerHTML</span><br><span class="line">    <span class="keyword">let</span> bugName = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;editable-value&#x27;</span>)[<span class="number">0</span>].innerHTML</span><br><span class="line">    <span class="keyword">let</span> old = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;fr right-operation&#x27;</span>)[<span class="number">0</span>].innerHTML</span><br><span class="line">    <span class="keyword">let</span> handleText = <span class="string">&#x27;- [F 修复中] &#x27;</span>+bugId+<span class="string">&#x27; &#x27;</span>+bugName</span><br><span class="line">    <span class="keyword">let</span> finishText = <span class="string">&#x27;- [F 修复] &#x27;</span>+bugId+<span class="string">&#x27; &#x27;</span>+bugName</span><br><span class="line">    <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;fr right-operation&#x27;</span>)[<span class="number">0</span>].innerHTML = <span class="string">&#x27;&lt;button onClick=&quot;alert(\&#x27;&#x27;</span>+handleText+<span class="string">&#x27;\&#x27;)\&quot;&gt;处理中&lt;/button&gt;&lt;button onClick=&quot;alert(\&#x27;&#x27;</span>+finishText+<span class="string">&#x27;\&#x27;)\&quot;&gt;处理完成&lt;/button&gt;&#x27;</span>+old</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h3 id="插件效果"><a href="#插件效果" class="headerlink" title="插件效果"></a>插件效果</h3><img src="/2021/07/26/4b1eb64d0134/1627295478232.png" class="">
<p>多了两个按钮<br>点一下会弹出待复制的内容</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>前端Vue、H5、Web、Html等待页面的快速显示以及代码参考</title>
    <url>/2021/07/26/d3c732d16568.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>我们在做前端开发时，用户的网络情况以及服务器的网络负载是有限度的，因此为了有更好的用户体验，我们需要尽可能的早显示出等待界面，当然有进度条更好。<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1></li>
<li>用户访问Html页面时，用最快的速度先返回加载页，然后当所有的js、css等框架资源加载完毕后在显示主内容</li>
</ul>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><ol>
<li>我们基于vue框架开发时，有个html模板页，我们将所有的加载页需要的js、div、css放在html中，并且在vue还未完成初始化前，先显示加载页。</li>
<li>由于html页面本身的大小非常小，占用的带宽很小，相比巨大的js文件，我们便可以更快的显示加载页</li>
</ol>
<h1 id="加载页代码-理论上手机端和PC端显示友好"><a href="#加载页代码-理论上手机端和PC端显示友好" class="headerlink" title="加载页代码(理论上手机端和PC端显示友好)"></a>加载页代码(理论上手机端和PC端显示友好)</h1><blockquote>
<p>将下面的代码直接放在html的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>之上,下面的代码无任何依赖</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-class">.init-loading-home</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#303133</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">                <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.init-loading-main</span> &#123;</span></span><br><span class="line"><span class="css">                user-select: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">                <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.init-loading-title</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.init-loading-sub-title</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#ABABAB</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.init-loading-footer</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.loader-first</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-indent</span>: -<span class="number">9999em</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">                <span class="attribute">animation</span>: mymove <span class="number">1.3s</span> infinite linear;</span></span><br><span class="line"><span class="css">                -webkit-<span class="attribute">animation</span>: mymove <span class="number">1.5s</span> infinite linear;</span></span><br><span class="line"><span class="css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">                -ms-<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="keyword">@keyframes</span> mymove &#123;</span></span><br><span class="line"><span class="css">                <span class="number">0%</span>,</span></span><br><span class="line"><span class="css">                <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">12.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">25%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">0.5em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">37.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">62.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">75%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0em</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">87.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0em</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="keyword">@-webkit-keyframes</span> mymove</span></span><br><span class="line"><span class="css">                /*Safari <span class="keyword">and</span> Chrome*/</span></span><br><span class="line"><span class="css">            &#123;</span></span><br><span class="line"><span class="css">                <span class="number">0%</span>,</span></span><br><span class="line"><span class="css">                <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">12.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">25%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">0.5em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">37.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">62.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">75%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0em</span> -<span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">                <span class="number">87.5%</span> &#123;</span></span><br><span class="line"><span class="css">                    <span class="attribute">box-shadow</span>: <span class="number">0em</span> -<span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">3em</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, <span class="number">0</span> <span class="number">3em</span> <span class="number">0</span> -<span class="number">1em</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">3em</span> <span class="number">0em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#46A4C9</span>, -<span class="number">2em</span> -<span class="number">2em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#46A4C9</span>;</span></span><br><span class="line"><span class="css">                &#125;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">hiddenInitLoading</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;loading-app&quot;</span>).style.display = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;init-loading-home&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loading-app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;init-loading-main&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader-first&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;init-loading-title&quot;</span>&gt;</span>正在加载资源<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;init-loading-sub-title&quot;</span>&gt;</span>初次加载资源可能需要较多时间 请耐心等待<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;init-loading-footer&quot;</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="vue加载完毕后隐藏加载页"><a href="#vue加载完毕后隐藏加载页" class="headerlink" title="vue加载完毕后隐藏加载页"></a>vue加载完毕后隐藏加载页</h1><blockquote>
<p>在上述代码中，已经实现了隐藏加载页的方法<code>hiddenInitLoading()</code>，此方法为全局方法。因此只需要监听vue的初始化完成回调调用此方法，加载页便会隐藏</p>
</blockquote>
<ul>
<li>在App.vue文件中添加</li>
<li>uniapp中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLaunch:  <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">	hiddenInitLoading()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>vue中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	hiddenInitLoading()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>具体在哪个vue生命周期时隐藏可以自行修改</code><br><code>上述代码参考至AVue框架，如有侵权，请联系删除</code><h1 id="h5效果"><a href="#h5效果" class="headerlink" title="h5效果"></a>h5效果</h1><img src="/2021/07/26/d3c732d16568/1627295749644.png" class="">
<h1 id="PC效果"><a href="#PC效果" class="headerlink" title="PC效果"></a>PC效果</h1><img src="/2021/07/26/d3c732d16568/1627295749645.png" class="">
<code>最上面的请稍等是没有的，是我这里接口调用时产生的提示</code></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端架构，前端H5或后台web动态切换(负载均衡)后端Api的baseUrl方案设计</title>
    <url>/2021/07/26/59f018fc4c01.html</url>
    <content><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><blockquote>
<p>在前后端分离的业务架构中，我们可能会遇到这样的情况，</p>
</blockquote>
<ul>
<li>在私有化部署下，前端一般会将api地址写死，然后请求到后端，为了不修改代码我们希望通过配置的方式来动态的决定请求到那个后端api</li>
<li>同一个前端代码或部署实例，指向多个不同后端api</li>
</ul>
<h1 id="先讲讲前端部署方式"><a href="#先讲讲前端部署方式" class="headerlink" title="先讲讲前端部署方式"></a>先讲讲前端部署方式</h1><h2 id="OSS云存储部署"><a href="#OSS云存储部署" class="headerlink" title="OSS云存储部署"></a>OSS云存储部署</h2><ul>
<li>更快的访问速度</li>
<li>js、css、图片等资源对带宽要求高<blockquote>
<p>一般情况下，前端的代码是通过框架开发的，并且框架本质是通过js库进行渲染的，因此这些js会显得额外的大，如果我们将前端代码直接部署到服务器上，那么就要求服务器的带宽成本要很高。为了节省带宽资源我们可以使用OSS。</p>
</blockquote>
</li>
</ul>
<h2 id="CDN节点加速"><a href="#CDN节点加速" class="headerlink" title="CDN节点加速"></a>CDN节点加速</h2><ul>
<li>前端资源组成CDN网络服务</li>
<li>当用户访问资源时，根据区域获取延迟最低的OSS资源</li>
</ul>
<h1 id="前端动态切换后端API"><a href="#前端动态切换后端API" class="headerlink" title="前端动态切换后端API"></a>前端动态切换后端API</h1><blockquote>
<p>比如说我们现在<code>前端A</code>可以访问<code>后端B</code>和<code>后端C</code>,那么我们应该如何切换后端呢？</p>
</blockquote>
<h2 id="定义切换的含义"><a href="#定义切换的含义" class="headerlink" title="定义切换的含义"></a>定义切换的含义</h2><blockquote>
<p>上述描述中，切换可能是指：用户选择的切换，也可能是用户无感知的切换。</p>
</blockquote>
<h3 id="用户选择切换"><a href="#用户选择切换" class="headerlink" title="用户选择切换"></a>用户选择切换</h3><blockquote>
<p>这种一般用于用户手动选择服务商，且多个服务商共用一个前端服务器</p>
</blockquote>
<h3 id="用户无感知切换"><a href="#用户无感知切换" class="headerlink" title="用户无感知切换"></a>用户无感知切换</h3><blockquote>
<p>这种也可以用于多个服务商公用前端服务器的场景，但是切换的条件可以通过域名、二级域名为条件来判断</p>
</blockquote>
<h1 id="方案一，增加后端C，公共接口"><a href="#方案一，增加后端C，公共接口" class="headerlink" title="方案一，增加后端C，公共接口"></a>方案一，增加后端C，公共接口</h1><blockquote>
<p>前端通过固有的<code>后端C</code>地址，来获取后端B、后端C的api列表</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>种负载均衡策略非常灵活可以为后端C添加管理后台<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2></li>
<li>研发成本高</li>
<li>后端C地址写死，不利于私有化部署<h1 id="方案二-前端A增加配置文件接口"><a href="#方案二-前端A增加配置文件接口" class="headerlink" title="方案二,前端A增加配置文件接口"></a>方案二,前端A增加配置文件接口</h1><blockquote>
<p>我们将静态的配置文件json，放在前端A的服务器中，在前端A中首先通过获取当前服务器的配置json，然后在决定访问那个后端Api</p>
</blockquote>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2></li>
</ol>
<ul>
<li>友好的私有化部署，前端A获取负载均衡列表对<code>api地址透明</code></li>
<li>研发成本低，配置简单<h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2></li>
<li>灵活度没有后台方便</li>
<li>配置难度高，因为需要直接修改json文件</li>
</ul>
<h1 id="落地实践方案二"><a href="#落地实践方案二" class="headerlink" title="落地实践方案二"></a>落地实践方案二</h1><h2 id="在前端A服务器中新增配置文件"><a href="#在前端A服务器中新增配置文件" class="headerlink" title="在前端A服务器中新增配置文件"></a>在前端A服务器中新增配置文件</h2><p><code>前端A在最开始初始化时，就通过Ajax取当前域名下的配置文件</code></p>
<h3 id="配置文件json"><a href="#配置文件json" class="headerlink" title="配置文件json"></a>配置文件json</h3><p><code>不要在这里传敏感信息</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;url&quot;: &quot;//xxx&quot;,</span><br><span class="line">    &quot;url2&quot;: &quot;//xxx2&quot;,</span><br><span class="line">    &quot;slb&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;matchHost&quot;: &quot;&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;//bb&quot;,</span><br><span class="line">            &quot;url2&quot;: &quot;//xxx2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>json对象的根<code>url</code>和<code>url2</code>属性表示默认后端接口主备api列表</li>
<li>slb数组表示负载均衡列表，即，当matchHost与当前前端host某种方式匹配时，使用对应的主备接口api</li>
<li>当然配置文件可以配很多东西，这里仅提供思路，比如还可以配置http是否强制重定向https，非匹配域名无法访问等，这个配置文件可以理解为一个轻量级的客户端负载均衡策略</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>基于docker rancher以及elk等常用服务搭建</title>
    <url>/2021/07/27/f43e3b993949.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>一般在开发时,会用到很多额外的服务,比如redis,mysql,elk日志服务.现根据docker,记录一些简单的docker镜像部署.</p>
</blockquote>
<h1 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h1><blockquote>
<p>操作系统用的centos7 64.  之前偷懒不想装系统。用的win10，但是部署起来会出现很多问题。比如网络配置，最好还是建议装个centos 无界面版</p>
</blockquote>
<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure>
<h2 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h2><p>文件路径 <code>a</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"># 安装 Rancher</span><br><span class="line">&gt; rancher是docker集群的一个管理平台,可以可视化管理docker镜像以及容器.</span><br><span class="line">目前Rnacher有两大版本一个是<span class="number">1.6</span>,一个是<span class="number">2.0</span> 两个版本差异巨大.后者是基于k8s.本人感觉<span class="number">2.0</span>版本的部署复杂性较高.因此依然使用<span class="number">1.6</span>版本进行部署.</span><br><span class="line"></span><br><span class="line">Rancher的安装方式可以支持mysql数据存储,以及集群.在此我使用最简单的方式.不满足需求转到下方链接.</span><br><span class="line">[官方安装文档](https:<span class="comment">//rancher.com/docs/rancher/v1.6/en/installing-rancher/installing-server/)</span></span><br><span class="line">win10版的docker需要在小docker图标右键切换为linux模式.使用win10的虚拟机</span><br><span class="line"></span><br><span class="line">## docker命令运行</span><br></pre></td></tr></table></figure>
<p>docker run -d -v rancher-data:/var/lib/mysql –restart=unless-stopped -p 9090:8080 rancher/server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我使用9090端口.这个镜像的latest就是1.6.  2.0版本新开了个镜像库</span><br><span class="line">rancher容器内有mysql作为数据存储结构。所以，mysql的数据目录一定要挂载出去，或者链接外部的mysql。不然你会发现重启rancher后，马上回到解放前。</span><br><span class="line">这里挂载目录用相对路径，docker会自动创建，并且没有目录权限的烦恼。</span><br><span class="line"># 创建 Rancher-Agent 节点</span><br><span class="line">进入后台后,随便找找就能找到个.hosts.在里面添加即可</span><br><span class="line">&#123;% asset_img 1627349184929.png %&#125;</span><br><span class="line">&#123;% asset_img 1627349184929.png %&#125;</span><br><span class="line"># ELK服务创建</span><br><span class="line">我有点忙，所以就直接贴Rancher的配置文件了。新建应用，导入以下配置。elk的镜像用的dockerhub默认的，官网的有点慢。</span><br><span class="line">## docker-compose.yml</span><br><span class="line">```yml</span><br><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">  logstash:</span><br><span class="line">    privileged: true</span><br><span class="line">    image: logstash:7.6.0</span><br><span class="line">    stdin_open: true</span><br><span class="line">    volumes:</span><br><span class="line">    - /home/eface/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span><br><span class="line">    tty: true</span><br><span class="line">    links:</span><br><span class="line">    - elasticsearch:elasticsearch</span><br><span class="line">    ports:</span><br><span class="line">    - 5055:5055/tcp</span><br><span class="line">    - 5056:5056/tcp</span><br><span class="line">    - 5044:5044/tcp</span><br><span class="line">    labels:</span><br><span class="line">      io.rancher.container.pull_image: always</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: elasticsearch:7.6.0</span><br><span class="line">    environment:</span><br><span class="line">      discovery.type: single-node</span><br><span class="line">    stdin_open: true</span><br><span class="line">    volumes:</span><br><span class="line">    - elk-data:/usr/share/elasticsearch/data</span><br><span class="line">    tty: true</span><br><span class="line">    labels:</span><br><span class="line">      io.rancher.container.pull_image: always</span><br><span class="line">  kibana:</span><br><span class="line">    image: kibana:7.6.0</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line">    links:</span><br><span class="line">    - elasticsearch:elasticsearch</span><br><span class="line">    ports:</span><br><span class="line">    - 5601:5601/tcp</span><br><span class="line">    labels:</span><br><span class="line">      io.rancher.container.pull_image: always</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="rancher-compose-yml"><a href="#rancher-compose-yml" class="headerlink" title="rancher-compose.yml"></a>rancher-compose.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">start_on_create:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">start_on_create:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">start_on_create:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>开发</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>后端开发中,文件存储的命名特点分析</title>
    <url>/2021/07/27/200633e7a1e9.html</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在后台通过上传文件的方式,将文件存储到云端.然后供其它客户端使用HTTP的方式浏览或下载文件资源.就这么一个简单的过程,我们来探究一下这个文件名称应该如何命名.以及各种方式的优缺点</p>
<h1 id="使用文件md5值作为文件名称"><a href="#使用文件md5值作为文件名称" class="headerlink" title="使用文件md5值作为文件名称"></a>使用文件md5值作为文件名称</h1><p>特点</p>
<ul>
<li>生成的URL具有唯一性，即一个文件一个唯一的URL<br>一般客户端为了减少资源间的网络传输，会通过URL的方式对下载的文件资源进行缓存。我们在后端的文件与URL有唯一的对应关系，那么客户端通过URL缓存的资源与服务端的资源必定是一致的。这样的好处就是兼容客户端缓存策略。</li>
<li>不利于清理无效资源<br>比如用户头像。用户在更换头像时(假定需求不需要保留就头像)，按照md5的方式，以前的头像数据肯定是需要清理的。我们需要去维护这些无效资源并且定期的清理它。这增加了维护成本。<h1 id="使用固定文件名称的方式"><a href="#使用固定文件名称的方式" class="headerlink" title="使用固定文件名称的方式"></a>使用固定文件名称的方式</h1>特点</li>
<li>一个URL在不同时刻对应不同文件资源<br>也以用户头像为例子，用户更换头像，后端进行文件的覆盖操作。这样就不用去管理旧的无效数据，但是有个比较棘手的问题就是文件覆盖的原子性。覆盖操作的原子性是很难保证的。在文件覆盖过程中被打断的概率还是很大的。</li>
<li>不利于客户端缓存<br>因为URL的文件不是唯一的，在客户端缓存时，当然就会出现脏缓存的问题。不过我们也是可以解决，我们可以在URL最后通过<code>?t=timestamp</code>返回这个文件的生成时间戳来解决URL的的不唯一性。</li>
</ul>
<h1 id="后端文件上传与表单数据数据的关系"><a href="#后端文件上传与表单数据数据的关系" class="headerlink" title="后端文件上传与表单数据数据的关系"></a>后端文件上传与表单数据数据的关系</h1><ul>
<li>文件上传与表单数据分离<br>这种方式的好处是业务流程简单，在提交表单数据时，客户端上传文件后获得uri后添加在表单即可</li>
<li>文件上传与表单数据一起提交<br>在提交表单时将文件资源一起post到后端，然后后端处理文件的保存。这种也不是特别复杂，但是需要考虑接口上载能力。一般文件上传服务会比普通的服务拥有更大的上载带宽。所以集中式的处理文件上传还是比较推荐的。<h1 id="文件资源集中式接口上传的注意问题"><a href="#文件资源集中式接口上传的注意问题" class="headerlink" title="文件资源集中式接口上传的注意问题"></a>文件资源集中式接口上传的注意问题</h1></li>
<li>以用户头像为例，我们采用文件上传与表单数据分离的方式，在用户操作时，很可能会产生大量的无效资源。处理方式可以是：1，用户提交时，才上传图片，在之前通过客户端本地加载图片资源，2，用户每次都上传图片。</li>
<li>临时文件的方式处理大量无效上传文件。定期的清理它。当需要正式使用的文件资源我们需要将它转移非临时文件存储方式。作为OSS来讲这个可以很好实现，我们将临时文件标记为1天的有效期，当需要转换为非临时文件方式时，修改文件的有效期。</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解张量</title>
    <url>/2021/07/27/6877ff7b5497.html</url>
    <content><![CDATA[<p><strong>以下乱扯，随便看看</strong></p>
<p>先把数据上升到一定高度那就是 <code>信号</code></p>
<p><code>信息论(信号)</code>包括音频、视频、语音、图像、通信、地球物理、声纳、雷达、医疗和音乐信号等。出自 <a href="https://zh.wikipedia.org/zh-sg/%E4%BF%A1%E5%8F%B7_(%E4%BF%A1%E6%81%AF%E8%AE%BA)">wiki-信号 (信息论)</a></p>
<h3 id="数学向量"><a href="#数学向量" class="headerlink" title="数学向量"></a>数学向量</h3><p>读过高中出现过两种信息量，数学向量与物理矢量，其实他们虽然名字不同，但他们的目的是相同的，数学向量是对信号表达的一种数学语言能够识别的方式。物理矢量是对信号表达的一种物理语言能够识别的格式。他们的各种计算完全一样。</p>
<h3 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h3><p>所以可以认为<code>张量</code>是对信号表达的一种计算机能识别的格式。特别的在深度学习中更为常见。那张量是应该如何表达信号？</p>
<p><strong>nD张量</strong></p>
<p>首先定义张量可以有n个维度即n个轴，也叫nD张量，每一个维度可以表达各种各样的信息。比如一个人有[身高、体重、智商、情商]，那么我们就可以用一个4个维度的4D张量，<code>来将这个人转换为信号</code>，一种深度学习能够识别的格式来进行表达。当然人不可能仅仅有这些信息，我们只取我们需要的。</p>
<p><strong>信号与张量</strong></p>
<p>这里强调张量是信号的一种表达方式，所以，无论是0D张量，还是nD张量来讲，不管张量维度如何增加、减少，<code>信号本身不会有任何改变</code>，因为每个纬度都是无穷的数据组成，无穷的维度的无穷数据，都可以用一个维度来表达，比如1D张量[1,2],和2D张量[[7],[8]],虽然维度不同，但他们可以表达相同的信号，只是在于理解而已。</p>
<p><strong>为什么还要区分nD张量</strong></p>
<p>既然0D和nD都一样可以表达信号，为啥还要区分维度？便于人类理解，以及计算。因此选择一个良好的张量结构会影响你对深度学习的理解、设计。</p>
<h3 id="版权所有"><a href="#版权所有" class="headerlink" title="版权所有"></a>版权所有</h3><hr>
<blockquote>
<p>作者：简书@mt23，CSDN@mt23</p>
<p>出处：</p>
<p><a href="https://www.jianshu.com/u/71f8075c4151">https://www.jianshu.com/u/71f8075c4151</a></p>
<p><a href="https://blog.csdn.net/mathcoder23">https://blog.csdn.net/mathcoder23</a></p>
<p>发布时间：2019-09-09</p>
<p>版权所有，欢迎保留原文链接进行转载</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue elementu-ui表单验证框架的js工具类之密码、确认密码验证</title>
    <url>/2021/07/26/940649295980.html</url>
    <content><![CDATA[<blockquote>
<p>Vue和Element-UI这两大框架在前端开发中应用已经非常nice了。但是在开发中还是有很多不足之处。以大量的使用基础，来不断的改进吧。</p>
</blockquote>
<h1 id="常规Element的表单验证"><a href="#常规Element的表单验证" class="headerlink" title="常规Element的表单验证"></a>常规Element的表单验证</h1><p>偷个懒，这里首先去官网看看表单验证的基本用法<br><a href="https://element.eleme.cn/#/zh-CN/component/form">https://element.eleme.cn/#/zh-CN/component/form</a></p>
<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.pass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;checkPass&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.checkPass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;ruleForm.age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> checkAge = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!value) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;年龄不能为空&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span></span><br><span class="line"><span class="javascript">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请输入数字值&#x27;</span>));</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (value &lt; <span class="number">18</span>) &#123;</span></span><br><span class="line"><span class="javascript">              callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;必须年满18岁&#x27;</span>));</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              callback();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> validatePass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请输入密码&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.ruleForm.checkPass !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$refs.ruleForm.validateField(<span class="string">&#x27;checkPass&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">          callback();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> validatePass2 = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请再次输入密码&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="built_in">this</span>.ruleForm.pass) &#123;</span></span><br><span class="line"><span class="javascript">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;两次输入密码不一致!&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          callback();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">ruleForm</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">pass</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">checkPass</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">pass</span>: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">          ],</span></span><br><span class="line"><span class="javascript">          <span class="attr">checkPass</span>: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">validator</span>: validatePass2, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">          ],</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">validator</span>: checkAge, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">          ]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;submit!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;error submit!!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs[formName].resetFields();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line"> pass: [</span><br><span class="line">    &#123; validator: validatePass, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  checkPass: [</span><br><span class="line">    &#123; validator: validatePass2, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  age: [</span><br><span class="line">    &#123; validator: checkAge, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>这段代码可以完成密码一致性的实时校验、但是在线上需求中，不仅要校验一致性、还要通过正则校验密码文本的字符等</code></p>
<h1 id="优化成js工具类引用即可注入校验规则"><a href="#优化成js工具类引用即可注入校验规则" class="headerlink" title="优化成js工具类引用即可注入校验规则"></a>优化成js工具类引用即可注入校验规则</h1><h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> passwordValid = [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>, <span class="attr">trigger</span>: [<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;blur&#x27;</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">pattern</span>: <span class="regexp">/^[a-zA-Z0-9_@$^!~,.*]&#123;4,20&#125;$/</span>, message: <span class="string">&#x27;密码仅允许数字、字母、下划线、特殊字符,4到20位&#x27;</span>, <span class="attr">trigger</span>: [<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;blur&#x27;</span>]&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> equalsCache = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> validEquals = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key = rule.meta.groupId + <span class="string">&#x27;-&#x27;</span> + (rule.meta.tag === <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">let</span> otherKey = rule.meta.groupId + <span class="string">&#x27;-&#x27;</span> + (rule.meta.tag === <span class="literal">false</span>)</span><br><span class="line">    equalsCache[key] = value</span><br><span class="line">    <span class="keyword">if</span> (rule.meta.tag === <span class="literal">true</span> &amp;&amp; equalsCache[otherKey]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (equalsCache[otherKey] !== equalsCache[key]) &#123;</span><br><span class="line">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(rule.message));</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    callback()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> textEqualsValid = <span class="function">(<span class="params">groupId, tag, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="attr">validator</span>: validEquals, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>, <span class="attr">message</span>: message, <span class="attr">meta</span>: &#123;<span class="attr">groupId</span>: groupId, <span class="attr">tag</span>: tag&#125;&#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CommValidation = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码格式验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">passwordValid</span>: passwordValid,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本一致性验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">textEqualsValid</span>: textEqualsValid,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>这个js工具类提供两个功能、一个是密码格式验证,一个是两个文本框是否一致</code></p>
<p>这里有个比较难处理的问题，每个单独的表单项验证体系中，不会存储另一个表单项的值，所以我采用了<code>equalsCache 表</code>来共享数据，一方面解耦了vue的依赖，另一方面由于cache会存放表单明文值，如果不清理可能造成安全隐患，这里本质上不好清理，因为js类中没有很好的理由提供回调，这样代码就太丑了。因为我们可以通过数据签名来验证数据的一致性，从而保证了明文数据不被保存。</p>
<p>关于上述的问题为何我要纠结<code>明文数据在web页面&quot;存储&quot;的安全性</code>，从概率来讲，将明文数据缓存在浏览器内存的命中概率不高，第一：页面的生命周期不长、第二：此操作的频繁性低。但是这样的操作依然是安全隐患。这相关Web页面的计算机安全问题，暂时不讨论太多，<code>我们作为开发只要保证，尽可能减少敏感数据的传输、存储即可</code>，这里的存储应该是广义的，即信息被某种载体记录。此载体可以是硬盘、文件、内存、大脑、等等。在传输信号时载体的记录形式在发生跃迁，这此跃迁过程中，信号随时可能被窃取并以不为人知的方式存储了下来。</p>
<h2 id="代码简化"><a href="#代码简化" class="headerlink" title="代码简化"></a>代码简化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">  <span class="attr">pass</span>:CommValidation.passwordValid.concat(CommValidation.textEqualsValid(<span class="string">&#x27;InfoPwd&#x27;</span>,<span class="literal">false</span>,<span class="string">&#x27;两次密码不一致!&#x27;</span>)),</span><br><span class="line">  <span class="attr">checkPass</span>: CommValidation.passwordValid.concat(CommValidation.textEqualsValid(<span class="string">&#x27;InfoPwd&#x27;</span>,<span class="literal">true</span>,<span class="string">&#x27;两次密码不一致!&#x27;</span>)),</span><br><span class="line">  <span class="attr">age</span>: [</span><br><span class="line">    &#123; <span class="attr">validator</span>: checkAge, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后谈谈这个js放哪里"><a href="#最后谈谈这个js放哪里" class="headerlink" title="最后谈谈这个js放哪里"></a>最后谈谈这个js放哪里</h2><p><code>写代码最头疼的两问，这段代码叫啥名字、这段代码放哪里</code>。关于命名、项目结构也就不多谈了，这玩意太复杂,我也不太懂，我只知道一切需要规范、规约、原则、这样才能得心应手的搬砖。</p>
<p>作为验证工具类，</p>
<ul>
<li><p>与项目相关性不大的验证策略：身份证、手机号、出生日期等这些比较固定的验证策略，这种我们应该放在与项目同级的工具包中，即这些代码也可以提供给其他项目使用。当然手机号这玩意的验证也是特复杂。</p>
</li>
<li><p>验证策略与项目相关的。比如密码验证、用户名验证、等等。这种由于和项目耦合我们应该放在项目的validation文件夹中。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于netty-websocket的加密教程</title>
    <url>/2021/07/27/0f235d0c8a3d.html</url>
    <content><![CDATA[<h1 id="netty-websocket项目"><a href="#netty-websocket项目" class="headerlink" title="netty-websocket项目"></a>netty-websocket项目</h1><blockquote>
<p>这个模块已经抽离出项目,支持通过注解的方式提供,ws,wss服务,等空了在发布出来</p>
</blockquote>
<h1 id="netty-tls-ssl安装"><a href="#netty-tls-ssl安装" class="headerlink" title="netty-tls/ssl安装"></a>netty-tls/ssl安装</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-tcnative-boringssl-static<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.26.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在项目依赖中加入这个模块,就可以直接装载一层TLS加密层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.handler.ssl.ClientAuth;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.ssl.SslContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.ssl.SslContextBuilder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.ssl.SslProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SslUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 证书初始化工具</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/3/18 9:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SslUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取TLS证书及密钥配置,转换为context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> caPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SslContext <span class="title">createSSLContext</span><span class="params">(String caPath,String keyPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File certChainFile=<span class="keyword">new</span> File(caPath);</span><br><span class="line">        File keyFile=<span class="keyword">new</span> File(keyPath);</span><br><span class="line">        Assert.isTrue(certChainFile.exists(),<span class="string">&quot;证书ca不存在:&quot;</span>+certChainFile.getCanonicalPath());</span><br><span class="line">        Assert.isTrue(keyFile.exists(),<span class="string">&quot;密钥key不存在:&quot;</span>+keyFile.getCanonicalPath());</span><br><span class="line"></span><br><span class="line">        SslContext sslCtx = SslContextBuilder.forServer(certChainFile, keyFile).clientAuth(ClientAuth.NONE)</span><br><span class="line">                .sslProvider(SslProvider.OPENSSL).build();</span><br><span class="line">        <span class="keyword">return</span> sslCtx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>加入channel</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="string">&quot;ssl&quot;</span>,SslUtil.createSSLContext(caPath,keyPath).newHandler(ByteBufAllocator.DEFAULT));</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">                        ch.pipeline().addLast(<span class="string">&quot;http-codec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                        ch.pipeline().addLast(<span class="string">&quot;aggregator&quot;</span>, <span class="keyword">new</span> HttpObjectAggregator(<span class="number">65536</span>));</span><br><span class="line">                        ch.pipeline().addLast(<span class="string">&quot;http-chunked&quot;</span>, <span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> HttpServerHandler(pojoEndpointServer, config));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="测试证书生成过程"><a href="#测试证书生成过程" class="headerlink" title="测试证书生成过程"></a>测试证书生成过程</h1><p><a href="https://csr.chinassl.net/decoder-ssl.html">在线证书生成</a><br>如果仅仅是测试的话,直接用上面的在线网站生成即可.不要用在正式环境中</p>
<h1 id="openssl证书生成"><a href="#openssl证书生成" class="headerlink" title="openssl证书生成"></a>openssl证书生成</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out key.pem 1024 # 密钥key</span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in key.pem -outform PEM -nocrypt &gt; key8.pem #转换密钥key的格式</span><br><span class="line">openssl req -new -out ca-req.csr -key key8.pem # 生成请求证书</span><br><span class="line">openssl x509 -req -in ca-req.csr -out ca-cert.pem -signkey key8.pem -days 36500 # 自签名</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>tls</tag>
        <tag>netty</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>完全理解synchronized关键字的深入用法，对象、类、字符串锁、字节码</title>
    <url>/2021/07/27/ce49fdc101f8.html</url>
    <content><![CDATA[<h1 id="synchronized关键字的作用"><a href="#synchronized关键字的作用" class="headerlink" title="synchronized关键字的作用"></a>synchronized关键字的作用</h1><p>Java中的关键字<code>synchronized</code>的作用应该都明白，在并发编程中经常使用，是JVM级的锁实现，这里就不做过多说明。它的用法是提供一个<code>key</code>来使代码块互斥的被多个线程执行。笔者这里的说法可能和常规说法有点不同。因为我用了一个<code>key</code>的概念。笔者认为，它的底层实现就是一个key。哪个线程竞争到了key，就能开锁进入被锁住的代码块中执行，否则将无限等待下去。</p>
<h1 id="如何理解synchronized的key"><a href="#如何理解synchronized的key" class="headerlink" title="如何理解synchronized的key"></a>如何理解synchronized的key</h1><p>我们知道使用synchronized时，可以有类锁、对象锁、静态方法块锁、对象方法锁。这些情况是真的多，初看还真有点复杂。但今天我们不从这个角度来理解，我们从我这里强调用key的思路来理解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码，</span></span><br><span class="line"><span class="comment">//只要在同一个JVM中，下面这段代码无论在哪里执行(同一个类中、不同类中、不同jar包)</span></span><br><span class="line"><span class="comment">//只要key相同(这里的相同，耐人寻味哈)，那么必定互斥的执行。</span></span><br><span class="line"><span class="comment">//这段注释便是synchronized的本质。</span></span><br><span class="line"><span class="keyword">synchronized</span>(key)&#123;</span><br><span class="line">   <span class="comment">//锁住代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="synchronized的本质"><a href="#synchronized的本质" class="headerlink" title="synchronized的本质"></a>synchronized的本质</h1><p><code>只要在同一个JVM中，上面这段代码无论在哪里执行(同一个类中、不同类中、不同jar包)</code><br><code>只要key相同(这里的相同，耐人寻味哈)，那么必定互斥的执行。</code><br><code>这便是synchronized的本质。</code></p>
<h1 id="如何理解key相同"><a href="#如何理解key相同" class="headerlink" title="如何理解key相同"></a>如何理解key相同</h1><p>内存地址相同。（这里对JMM和JVM的分布还不是特别的清楚，查了资料后再补充）</p>
<h1 id="将key与Java写法相对应"><a href="#将key与Java写法相对应" class="headerlink" title="将key与Java写法相对应"></a>将key与Java写法相对应</h1><h2 id="key-this的情况"><a href="#key-this的情况" class="headerlink" title="key=this的情况"></a>key=this的情况</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@groovyx</span>.ast.bytecode.<span class="function">Bytecode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@groovyx</span>.ast.bytecode.<span class="function">Bytecode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  trycatchblock l0,l1,l2,<span class="keyword">null</span></span><br><span class="line">  trycatchblock l2,l3,l2,<span class="keyword">null</span></span><br><span class="line">  aload <span class="number">0</span><span class="comment">//this地址</span></span><br><span class="line">  dup</span><br><span class="line">  astore <span class="number">1</span></span><br><span class="line">  monitorenter</span><br><span class="line"> l0</span><br><span class="line">  aload <span class="number">1</span></span><br><span class="line">  monitorexit</span><br><span class="line"> l1</span><br><span class="line">  _goto l4</span><br><span class="line"> l2</span><br><span class="line">  astore <span class="number">2</span></span><br><span class="line">  aload <span class="number">1</span></span><br><span class="line">  monitorexit</span><br><span class="line"> l3</span><br><span class="line">  aload <span class="number">2</span></span><br><span class="line">  athrow</span><br><span class="line"> l4</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种写法在底层时，synchronized会使用this这个内存地址作为key来判断是否互斥执行。当synchronized修饰对象方法时，与代码块时等效的。</p>
<h2 id="key-Class情况"><a href="#key-Class情况" class="headerlink" title="key=Class情况"></a>key=Class情况</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Demo1.class)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// access flags 0x29</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="title">fun3</span><span class="params">()</span>V</span></span><br><span class="line"><span class="function">L0</span></span><br><span class="line"><span class="function"> LINENUMBER 17 L0</span></span><br><span class="line"><span class="function"> RETURN</span></span><br><span class="line"><span class="function"> MAXSTACK </span>= <span class="number">0</span></span><br><span class="line"> MAXLOCALS = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// access flags 0x1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">fun4</span><span class="params">()</span>V</span></span><br><span class="line"><span class="function"> TRYCATCHBLOCK L0 L1 L2 <span class="keyword">null</span></span></span><br><span class="line"><span class="function"> TRYCATCHBLOCK L2 L3 L2 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">L4</span></span><br><span class="line"><span class="function"> LINENUMBER 19 L4</span></span><br><span class="line"><span class="function"> LDC Lsync/Demo1</span>;.class</span><br><span class="line"> DUP</span><br><span class="line"> ASTORE <span class="number">1</span></span><br><span class="line"> MONITORENTER</span><br><span class="line">L0</span><br><span class="line"> LINENUMBER <span class="number">21</span> L0</span><br><span class="line"> ALOAD <span class="number">1</span></span><br><span class="line"> MONITOREXIT</span><br><span class="line">L1</span><br><span class="line"> GOTO L5</span><br><span class="line">L2</span><br><span class="line">FRAME FULL [sync/Demo2 java/lang/Object] [java/lang/Throwable]</span><br><span class="line"> ASTORE <span class="number">2</span></span><br><span class="line"> ALOAD <span class="number">1</span></span><br><span class="line"> MONITOREXIT</span><br><span class="line">L3</span><br><span class="line"> ALOAD <span class="number">2</span></span><br><span class="line"> ATHROW</span><br><span class="line">L5</span><br><span class="line"> LINENUMBER <span class="number">22</span> L5</span><br><span class="line">FRAME CHOP <span class="number">1</span></span><br><span class="line"> RETURN</span><br><span class="line">L6</span><br><span class="line"> LOCALVARIABLE <span class="keyword">this</span> Lsync/Demo2; L4 L6 <span class="number">0</span></span><br><span class="line"> MAXSTACK = <span class="number">2</span></span><br><span class="line"> MAXLOCALS = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>这两种写法在底层时，synchronized会使用该类的静态区内存地址作为key来判断是否互斥执行。<br>因此才有了类锁和对象锁不是互斥执行的。因为它们的key不同</p>
<h2 id="key的其他情况"><a href="#key的其他情况" class="headerlink" title="key的其他情况"></a>key的其他情况</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun5</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@groovyx</span>.ast.bytecode.<span class="function">Bytecode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun5</span><span class="params">(Object a)</span> </span>&#123;</span><br><span class="line">  trycatchblock l0,l1,l2,<span class="keyword">null</span></span><br><span class="line">  trycatchblock l2,l3,l2,<span class="keyword">null</span></span><br><span class="line">  aload <span class="number">1</span><span class="comment">//传入的Object地址作为key</span></span><br><span class="line">  dup</span><br><span class="line">  astore <span class="number">2</span></span><br><span class="line">  monitorenter</span><br><span class="line"> l0</span><br><span class="line">  aload <span class="number">2</span></span><br><span class="line">  monitorexit</span><br><span class="line"> l1</span><br><span class="line">  _goto l4</span><br><span class="line"> l2</span><br><span class="line">  astore <span class="number">3</span></span><br><span class="line">  aload <span class="number">2</span></span><br><span class="line">  monitorexit</span><br><span class="line"> l3</span><br><span class="line">  aload <span class="number">3</span></span><br><span class="line">  athrow</span><br><span class="line"> l4</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="继承的一些情况"><a href="#继承的一些情况" class="headerlink" title="继承的一些情况"></a>继承的一些情况</h2><p>继承的情况有时会会很复杂，但是我们需要靠考虑清楚key到底是哪个就很容易判定了。<br>虽然Java拥有继承，但子类对象和父类对象在内存中是不同的。所以随便怎么继承代码块互斥我们仅需要考虑是哪个的this，是哪个的Class。</p>
<h2 id="字符串的锁一些陷阱"><a href="#字符串的锁一些陷阱" class="headerlink" title="字符串的锁一些陷阱"></a>字符串的锁一些陷阱</h2><p>有时我们会使用字符串作为锁，来实现互斥执行的功能。但是需要了解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="string">&quot;aaa&quot;</span>)                      <span class="comment">//例1</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>))          <span class="comment">//例2</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>))          <span class="comment">//例3</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>).intern()) <span class="comment">//例4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (Integer.valueOf(<span class="number">1</span>))  <span class="comment">//例5</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> String(<span class="number">1</span>))       <span class="comment">//例6</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> String(<span class="number">1</span>))       <span class="comment">//例7</span></span><br></pre></td></tr></table></figure>
<p>根据我们上面通过key的方式理解synchronized的互斥行为。我们可以很容易的判断出，<br>上面的所有例子中，被多个线程调用。<code>有且仅有例1和例4会互斥的调用</code>其他的情况都将视为不同的锁</p>
<ul>
<li>例1中和例2中，字符串的地址不同，因为一个是指向运行时字符串常量池地址，一个是指向对象地址。</li>
<li>intern()方法返回的是此字符串对象的字符串常量池地址，因为它们的key相同了。达到了互斥的效果</li>
<li>同理，例2和例3都new了对象，地址不同。</li>
</ul>
<h2 id="再次理解key的相等"><a href="#再次理解key的相等" class="headerlink" title="再次理解key的相等"></a>再次理解key的相等</h2><p>其实说了那么多，key相等的定义 等效于 Java中 <code>== </code>的含义。在使用synchronized时，我们考虑代码是否互斥执行，仅需要考虑的就是synchronized修饰的key是<code>==</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>相信用这种方式理解，对于synchronized的用法很难出错了。</p>
<ul>
<li>关于类继承这些情况也是好理解的，仅需要要考虑key是否相等就行。</li>
<li>关于字符串、传递对象等情况，仅需要关注内存地址就行。</li>
<li>这是从底层出发的理解，错不了。但是我们所理解的synchronized也是可能<code>失效的</code>，这是因为Spring的事务，AOP技术与synchronized的范围冲突导致。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>我应该如何选择笔记软件</title>
    <url>/2021/07/27/57637a089768.html</url>
    <content><![CDATA[<p>今天花了大量的时间又开始纠结应该使用什么样的笔记工具。</p>
<p>我简单使用过有道笔记、为知笔记、印象笔记，但我全部放弃了。最终我选择了没有云服务功能的笔记软件<code>Typora 离线笔记软件</code><a href="https://typora.io/">官网</a>。在介绍之前我梳理了一下使用笔记应该注意什么。</p>
<h3 id="笔记工具应该有的功能点"><a href="#笔记工具应该有的功能点" class="headerlink" title="笔记工具应该有的功能点"></a>笔记工具应该有的功能点</h3><ul>
<li><strong>安全</strong>。<code>账号体系是安全的</code>，不那么容易被第三方进行破解，从而窃取笔记内容，当然假定你对笔记内容的隐私是很重要的，从我的立场来看，无论我的笔记内容是否高机密、以及其他原因，保证我的数据内容不受侵犯是使用的底线。<code>笔记内容是加密的</code>，防止笔记服务商或服务商服务器被攻击后导致信息泄漏，理想的加密方法当然是在各个环节是安全的，比如笔记的数据传输，笔记的加密逻辑，一般可靠的加密方式是客户端密钥生成笔记内容，服务商不可能以任何方式得到密钥。有了安全的密钥，生成的加密笔记自然而然存在哪里都没有问题。</li>
<li><strong>可靠</strong>。确保笔记在笔记软件出现问题、不能提供服务、更换笔记软件后笔记数据依然健壮。说白了可以理解为可以批量导出md文件(我提倡所有的笔记一定要用md文件来写，这样的格式是通用的，不受平台限制)，如果导出的是笔记软件所识别的格式或书写笔记采用的是笔记软件特有的格式，那么这个数据总是不可靠的。</li>
<li><strong>文件树管理</strong>。以文件树的形式管理笔记的集合。</li>
<li><strong>笔记标签</strong>。标签是一个很强大的数据索引思想，之前一直有个想法做一个灵活标签树的方式来管理数据，但一直没实现，暂时放在那里。</li>
<li><strong>历史记录</strong>。可以查看笔记的变更记录以及回滚。</li>
<li><strong>笔记实时保存</strong>。永远不要相信软件给你自动保存，或许某些软件可以给你提供稳定可靠的文件保存功能，但是不要让他惯坏你。因为并不是所有编辑环境都有这个功能。自己时刻ctrl+s才是真的。</li>
</ul>
<h3 id="放弃云笔记"><a href="#放弃云笔记" class="headerlink" title="放弃云笔记"></a>放弃云笔记</h3><blockquote>
<p>根据以上的描述，现有的云笔记平台在安全方面的不敢太信任。以及在可靠方面也不太信任。所以我选择了<code>Typora这款单机笔记软件</code></p>
</blockquote>
<h3 id="Typora-离线笔记软件"><a href="#Typora-离线笔记软件" class="headerlink" title="Typora 离线笔记软件"></a>Typora 离线笔记软件</h3><blockquote>
<p>这是目前选到的比较符合我要求的软件，但也不是全部。其实云笔记的必要性对于我来讲并不是那么强，我使用笔记的出发点是记录日记、撰写博客、知识归纳。对于云端需求并不是特别强，最重要的是我不信任这些云笔记，明文数据仅在自己手里才是最安全的，并且作为Typora这款笔记软件的实质是存储在本地的文件夹，作为一名合格的程序员，肯定是有办法提交到私有云端数据的，比如git仓库。</p>
</blockquote>
<h3 id="笔记软件的拓展计划"><a href="#笔记软件的拓展计划" class="headerlink" title="笔记软件的拓展计划"></a>笔记软件的拓展计划</h3><p>选择好了笔记软件，我们就改注重另一个问题了。如何写笔记？以及如何整理笔记？</p>
<p> 我们记录的笔记是一个集合，通过md模板我们可以设定<code>清单</code>的概念,即加上时间规划、提醒、统计等功能。</p>
<p>其次关于知识管理、结合特定的md分析，提取数据源，生成复习曲线以及复习内容，当然这要使用<code>小狐记忆</code>这款记忆辅助软件。</p>
<h3 id="版权所有"><a href="#版权所有" class="headerlink" title="版权所有"></a>版权所有</h3><hr>
<blockquote>
<p>作者：简书@mt23，CSDN@mt23</p>
<p>出处：</p>
<p><a href="https://www.jianshu.com/u/71f8075c4151">https://www.jianshu.com/u/71f8075c4151</a></p>
<p><a href="https://blog.csdn.net/mathcoder23">https://blog.csdn.net/mathcoder23</a></p>
<p>发布时间：2019-09-07</p>
<p>版权所有，欢迎保留原文链接进行转载</p>
</blockquote>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>新概念英语1-笔记</title>
    <url>/2021/07/26/37670ea4a39f.html</url>
    <content><![CDATA[<p>笔记</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>新概念英语</tag>
      </tags>
  </entry>
  <entry>
    <title>生产环境docker部署之nginx部署</title>
    <url>/2021/07/27/c81c6ed6349d.html</url>
    <content><![CDATA[<p>网上由很多关于docker某种容器的部署命令，比如nginx部署，jar包部署，监控部署等。但个人感觉很多不能达到企业生产化的效果，比如长期运行后的日志问题，容器的服务的配置等等。因此在这里记录一下。</p>
<h1 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h1><h2 id="部署要点"><a href="#部署要点" class="headerlink" title="部署要点"></a>部署要点</h2><blockquote>
<p> nginx作为后端网关的入口，以及内部负载均衡的分发组件，在整个后端服务中是起非常重要的作用。说句题外话nginx对外的ip最好是弹性ip，这样可以在ddos情况下快速的更换域名ip，最快的速度保证服务恢复。</p>
</blockquote>
<ul>
<li>conf配置文件分离到宿主机中配置。这样可以方便的配置ssl，负载均衡策略。</li>
<li>nginx的访问日志，这为产品上线后，对接口的pv，uv统计。可以转换到某日志分析平台。</li>
<li>容器日志显示，容器中的日志记录是很可能将服务器磁盘跑满的。所以要做显示。才能保证长期的可靠运行</li>
<li>服务抗重启。服务器发生宕机的情况是必不可免的。在应急的情况下可以重启服务。这自然就需要容器服务开机重启的自动启动<h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2>我习惯将容器名称命名为<code> 3q-</code>前缀的方式名称这些开源组件 。含义是感谢这些开源组件给我带来的便利与价值。<h3 id="docker容器-nginx启动前准备"><a href="#docker容器-nginx启动前准备" class="headerlink" title="docker容器 nginx启动前准备"></a>docker容器 nginx启动前准备</h3>宿主机新建nginx所需的所有目录，下面都是目录<br>/home/nginx/conf.d<br>/home/nginx/certs<br>/home/nginx/logs<br>/home/nginx/html<h4 id="nginx配置文件-home-nginx-conf-d-default-conf"><a href="#nginx配置文件-home-nginx-conf-d-default-conf" class="headerlink" title="nginx配置文件,/home/nginx/conf.d/default.conf"></a>nginx配置文件,/home/nginx/conf.d/default.conf</h4><blockquote>
<p>在nginx容器中 <code>/etc/nginx/nginx.conf </code>作为主配置文件，我们不去修改它，这个主配置文件会引用<code>/etc/nginx/conf.d</code>文件下的所有配置文件，所以我们将所有的服务器配置都在子配置文件中，这样由良好的拓展性，conf中的目录是相对nginx容器中的/etc/nginx目录为基础</p>
</blockquote>
</li>
</ul>
<p>下面这个配置文件是我常用的配置，作为nginx负载均衡。也包含ssl端口的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream web_app &#123;</span><br><span class="line">       server 127.0.0.1:8080 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">       #server 127.0.0.1:8081 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name domain.com;</span><br><span class="line">       index index.jsp index.html index.htm;</span><br><span class="line">       #发布目录/data/www</span><br><span class="line">       root /home/www;</span><br><span class="line"></span><br><span class="line">       listen 443 ssl;</span><br><span class="line">       #ssl on;</span><br><span class="line">       ssl_certificate certs/ssl-default.pem;</span><br><span class="line">       ssl_certificate_key certs/ssl-default.key;</span><br><span class="line">       ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">               proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">               proxy_set_header Host  $host;</span><br><span class="line">               proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">               proxy_pass http://web_app;</span><br><span class="line">               proxy_redirect http:// $scheme://;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="certs证书配置"><a href="#certs证书配置" class="headerlink" title="certs证书配置"></a>certs证书配置</h4><blockquote>
<p>这只是模板，采用自建证书。测试浏览器https访问需要受信任,有正式证书直接替换文件即可</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/nginx/certs</span><br><span class="line">openssl genrsa -out ssl-default.key 2048</span><br><span class="line">openssl req -newkey rsa:2048 -nodes -keyout ssl-default.key -x509 -days 365 -out ssl-default.pem</span><br></pre></td></tr></table></figure>
<h3 id="nginx启动"><a href="#nginx启动" class="headerlink" title="nginx启动"></a>nginx启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里网络模式配置为主机模式,以便用127.0.0.1访问本机端口</span></span><br><span class="line">docker run \</span><br><span class="line">  --restart=always  \</span><br><span class="line">  --name 3q-nginx \</span><br><span class="line">  --network host \</span><br><span class="line">  -d -p 80:80 \</span><br><span class="line">  -p 443:443 \</span><br><span class="line">  -e &quot;TZ=Asia/Shanghai&quot; \</span><br><span class="line">  -v /home/nginx/conf.d:/etc/nginx/conf.d \</span><br><span class="line">  -v /home/nginx/certs:/etc/nginx/certs \</span><br><span class="line">  -v /home/nginx/logs:/var/log/nginx \</span><br><span class="line">  -v /home/nginx/html:/home/www \</span><br><span class="line"> nginx</span><br></pre></td></tr></table></figure>
<p><code>我相信网上不会有这么到位参数配置. 这里提醒一下,在负载均衡时,内网服务获取客户端真实ip,需要使用httpX-Real-IP头.</code></p>
<ul>
<li>容器的运行网络模式在主机模式下,方便在ngixn配置文件中访问本机网络资源,分主机部署就不用为主机模式.</li>
<li>容器运行时区调整为北京时间</li>
<li>日志保存在宿主机,方便接入日志分析引擎</li>
<li>支持https.理论上来讲,应该仅且支持https.不过建议还是开放80端口.在主机网络安全组中显示访问端口,这样可以灵活的控制是否开启http.https支持.</li>
<li>开启自动启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果容器存在docker运行后自动启动配置</span><br><span class="line">docker update --restart=always 3q-nginx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>作为生产端的nginx，不建议开放80端口应当只支持443端口强制加密访问，作为负载均衡端，在内网环境下，不建议使用443端口加密，这会增加服务间调用成本。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>自考00015英语(二)-笔记</title>
    <url>/2021/07/26/e3776b594e09.html</url>
    <content><![CDATA[<p>笔记</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>自考英语</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员的职业病，一定要注重身体健康才是最重要的</title>
    <url>/2021/07/27/e01942299592.html</url>
    <content><![CDATA[<p>今天五一，信誓旦旦的早起准备好好研究代码，当我开开心心的打开IDEA工程的时候，我擦，手腕咋这么痛。然后低头了一下我那充满沧桑的手，发现在右手正面的左下角处有点发红发肿，那时我心想，我的手完了，我竟然得了<code>鼠标手</code>，作为程序员分析能力是必不可少的，所以马上查阅各种资料对鼠标手，以及程序员的职业病，以及如何预防进行总结。以下个人观点，欢迎斧正。</p>
<h1 id="程序员的常见职业病"><a href="#程序员的常见职业病" class="headerlink" title="程序员的常见职业病"></a>程序员的常见职业病</h1><ul>
<li>颈椎病</li>
<li>前列腺</li>
<li>鼠标手</li>
<li>眼部</li>
<li>孤僻症<h2 id="颈椎病"><a href="#颈椎病" class="headerlink" title="颈椎病"></a>颈椎病</h2>我想这应该是最常见的职业病了。我们这里只谈预防，不谈治疗，如果已经比较严重了尽快就医。<h4 id="颈椎病预防（长期习惯）"><a href="#颈椎病预防（长期习惯）" class="headerlink" title="颈椎病预防（长期习惯）"></a>颈椎病预防（长期习惯）</h4></li>
<li>避免长期低头姿势，长期伏案工作者工作1~2小时后休息5分钟，活动肩颈，改变体位，待颈部疲劳消除后再继续工作。</li>
<li><code>睡觉时</code>避免高枕，枕头的长度一般以平卧时超过自己的肩宽10~16厘米为宜，高度通常应与肩部宽度一致，或者头颈部压下后与自己的拳头高度相等或略低为宜。</li>
<li>日常使用电子产品时，注意<code>视线与屏幕保持持平或略微仰视5°~10°</code>，一定时间后注意放松，活动肩颈。<h4 id="颈椎病预防"><a href="#颈椎病预防" class="headerlink" title="颈椎病预防"></a>颈椎病预防</h4></li>
<li><code>运动</code>。这真的太重要，无论工作多么繁忙，学习多么繁重。一定要锻炼。具体怎么锻炼就不谈了。我认为适当运动，随便怎么都是好的。</li>
<li>一定要提高休息频率。我现在左侧背甲肌已经偶尔出现局部麻木，或者痛。（年龄差半，而立之年。使用电脑工龄大概：五年）</li>
<li>显示器使用支撑臂，可以随意调节角度、高度。<h2 id="前列腺"><a href="#前列腺" class="headerlink" title="前列腺"></a>前列腺</h2>作为男同胞来讲，还是需要重视这个东西。也没啥可说的，就是坐久了，对前列腺不好。这个的发病率是一直在提升。症状的话就是上厕所抛出异常。或者频繁调用放水方法。<h4 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h4></li>
<li>使用人体工学的座椅</li>
<li>站立办公，其实这个也挺不错的。但是环境要求还是比较苛刻的，国内很少有公司配套这些。</li>
<li>喝水治百病。每天我是要喝很多水，有时候泡点枸杞、菊花、红枣等等。并且水也是自带的。因为一些公司的那个饮水机很久都不会清洗的。感觉还是比较那个啥的。<h2 id="鼠标手"><a href="#鼠标手" class="headerlink" title="鼠标手"></a>鼠标手</h2>鼠标手规范名词应为腕管综合征，是最常见的周围神经卡压性疾患，其病理基础是正中神经在腕部的腕管内受卡压而引起手指麻木和功能障碍。女性易发<h4 id="鼠标手症状"><a href="#鼠标手症状" class="headerlink" title="鼠标手症状"></a>鼠标手症状</h4>手指发麻，手腕发麻或疼痛等。我个人认为鼠标手的症状很广泛，可以从手指、手腕、手臂进行蔓延。就是长期压迫神经或过度的肌肉活动。</li>
<li>我以前手臂关节出现过发痛的现象，当时在办公室我的右手手臂弯曲的程度很高，因为显示器离的比较近，后来我让使右手始终表示钝角角度，症状要好很多<h4 id="鼠标手预防"><a href="#鼠标手预防" class="headerlink" title="鼠标手预防"></a>鼠标手预防</h4></li>
<li>减少使用鼠标频长。（在编程时可以使用VIM，其实用习惯了效率比用鼠标高很多）</li>
<li>购买人体工学鼠标托及鼠标：</li>
<li>1，关于鼠标我在考虑更换触控板，但是作为用了很长时间的笔记本触控板来说，作为食指或中指可能受不了那种长期的周期的运动轨迹，因为之前我使用触控板的时候通过食指操作鼠标，发现遭不住，用久了会非常痛。具体相见<a href="https://blog.csdn.net/mathcoder23/article/details/90289224">长期使用笔记本触控板请以中指为主</a>，但无论使用哪种，降低使用频长以及休息才是最必要的。</li>
<li>2，作为程序员吃饭的家伙不一定不能省，什么鼠标、键盘、主机、显示器能买好的就买好的(好的不一定是最贵的。一定要舍得花钱，我不知道大部分人对自己的时间以及经济价值是怎么估量的，但我们应该需要这样的目标：<code>别把时间花在怎么省钱，要把时间花在怎么赚钱。</code>）</li>
<li>关于键盘也是一样的，需要键盘托、机械键盘，而且使用键盘的姿势要正确，在工作时，我发现很多同事使用键盘的姿势还是很别扭，有些手腕就是扭着的，尽量保持手腕和手臂的中心线一致，关于码代码的时候，打字的规范一定要注意，至少我打字每个手指在哪个区域是明确的，删除键我也使用的小指。我比较喜欢使用的，84键的巧克力键盘(IKBC POKER)。但是我期望的是通过大写键位+组合见可以定义上下左右以及其他。尽管它可以自定义编程，但没想象的灵活。</li>
<li>注意休息。每小时一定要休息五分钟。如果实在不想休息，你可以花几分钟在本子上总结下，这个小时都做了什么。</li>
<li>如果你发现加强了症状手的休息后，<code>不见好转，尽快就医吧，医生才是专业的</code>。这也是我为什么没写鼠标手怎么治疗。</li>
</ul>
<h2 id="眼睛"><a href="#眼睛" class="headerlink" title="眼睛"></a>眼睛</h2><p>用眼可以说是高频操作了。每天对着显示器眼睛的压力还是很大的。要保证眼部的高可用状态，我们当然就需要保养好它。我出现过几次眼部非常乏力，刺痛。这应该属于用眼过度，当时我记得我居然闭着眼睛打了好几段代码，<code>包括现在的这段话我都是闭着眼睛打的，在听着键盘敲打的声音。</code></p>
<h4 id="眼部保养"><a href="#眼部保养" class="headerlink" title="眼部保养"></a>眼部保养</h4><ul>
<li>依然是减少频率，定时休息</li>
<li>滴眼液，个人感觉还是有用处的。但是还是不要使用太频繁，毕竟这属于介入。偶尔使用还是推荐的</li>
<li>用比较号称比较健康的显示器，眼镜。关于显示器的辐射，没有深究过，还是信其有。尽量保护好自己。</li>
</ul>
<h2 id="孤僻症"><a href="#孤僻症" class="headerlink" title="孤僻症"></a>孤僻症</h2><p>我本身是一个不太爱说话的人。出于对科学、学习的热爱，选择了编程这个行业。因此某些时候会专注对代码的研究，以及会如痴如醉。但如果长期这样，可能会导致个人在语言、生活等方面有很多欠缺。</p>
<h3 id="预防-1"><a href="#预防-1" class="headerlink" title="预防"></a>预防</h3><ul>
<li>多交朋友，多和家人、朋友出去玩。别总宅在家里</li>
<li><code>合理的规划自身时间，不要把时间都花在一个领域</code>。连买菜做菜的时间都觉得浪费，工作是生活的一部分，同时生活不应该缺少财米油盐酱醋，享受生活，慢生活才能变得更好，丰富多彩的生活才更具创造性，毕竟我们属于自然的一部分。从自然中获取灵感。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于程序员的职业病建议</p>
<ul>
<li>锻炼，是治百病的。</li>
<li>休息，是必须的。</li>
<li>舍得，挣钱不花怎么对的起自己。各种买买买，吃饭的家伙，必须要好。</li>
</ul>
<p><code>文章仅个人意见及总结，欢迎斧正以及不足之处</code></p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发Bug处理与软件版本关联的开发流程总结及Git分支使用和命名规约</title>
    <url>/2021/07/27/b37d25819597.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>规范的按开发流程、以及GIt代码管理流程能够更好的提升研发进度以及效率。笔者以中小项目实践的经验为出发点，总结一些心得，实现更好的落地实践，而非太多规矩而适得其反。<code>以下仅个人观点，仅供参考，欢迎斧正</code></p>
<h1 id="Git分支使用以及命名规约"><a href="#Git分支使用以及命名规约" class="headerlink" title="Git分支使用以及命名规约"></a>Git分支使用以及命名规约</h1><blockquote>
<p>版本: V1.0 日期：2020-09-23</p>
</blockquote>
<h2 id="Git根目录应该是软件开发的工作空间根目录"><a href="#Git根目录应该是软件开发的工作空间根目录" class="headerlink" title="Git根目录应该是软件开发的工作空间根目录"></a>Git根目录应该是软件开发的工作空间根目录</h2><blockquote>
<p>因为Git无论是推代码和拉代码都是相对根目录而言，类如原型图、UI资料、项目介绍、文档等如果相互糅合在一起，对于资源管理存在分歧化，并且人员权限不易控制，这种场景应该新建Git仓库</p>
</blockquote>
<h2 id="按照项目开发流程来讲，Git被划分为master-dev两大分支"><a href="#按照项目开发流程来讲，Git被划分为master-dev两大分支" class="headerlink" title="按照项目开发流程来讲，Git被划分为master,dev两大分支"></a>按照项目开发流程来讲，Git被划分为<code>master</code>,<code>dev</code>两大分支</h2><blockquote>
<p>master 分支职责为项目可以达到上线标准的代码<br>dev 分支职责为项目研发具体流程控制(包含测试阶段)</p>
</blockquote>
<h2 id="dev分支与软件版本细则"><a href="#dev分支与软件版本细则" class="headerlink" title="dev分支与软件版本细则"></a>dev分支与软件版本细则</h2><blockquote>
<p>1,dev-1.0.x 分支命名 dev后跟短横杆后为开发的项目版本号，假设版本号命名规范为a.b.c三个版本位，1.0.x 表示包含所有1.0内的版本开发周期</p>
</blockquote>
<h2 id="软件需求与分支、软件版本细则"><a href="#软件需求与分支、软件版本细则" class="headerlink" title="软件需求与分支、软件版本细则"></a>软件需求与分支、软件版本细则</h2><blockquote>
<p>假设现有版本号为<code>1.1.1</code>且在<code>dev-1.1.x</code>分支下开发，新增了一个与现有版本差异不大的功能，暂定版本号为<code>1.1.2</code>,那么我们将基于<code>dev-1.1.x</code>创建<code>dev-1.1.x-fun1</code>分支其中<code>fun1</code>表示功能名称<br>这里需要注意到底是使用<code>dev-1.1.x-fun1</code>还是<code>dev-1.1.2-fun1</code>这取决于fun1的开发版本跨越程度，如果功能可能比较复杂，也或者需求可能被细分但统称为<code>fun1</code>那么我们可以使用<code>dev-1.1.x-fun1</code></p>
</blockquote>
<h2 id="代码状态跃迁通过Git的Tag标签，实现解耦"><a href="#代码状态跃迁通过Git的Tag标签，实现解耦" class="headerlink" title="代码状态跃迁通过Git的Tag标签，实现解耦"></a>代码状态跃迁通过Git的Tag标签，实现解耦</h2><blockquote>
<p>假设研发需要发布<code>dev-1.1.x-fun1</code>的代码，先将分支合并到<code>dev-1.1.x</code>中，并整理发布日志。在合并完成后，对此刻的分支进行tag，并说明升级内容、优化内容、修复内容、新增内容等。<br>使用tag的方式可以很好的对Git代码进行解耦，<code>目的是解决相同代码的不同状态问题</code>。假设我们实现了需求提交了代码，但此时代码的交付对象是<code>测试</code>即<code>Alpha版</code>代码，经过了测试环节后，愉快的发现代码一切正常，那么此时代码的状态可用上升到<code>Beta版</code>，等等一次类推，经过重重环节，最终代码被上升到<code>RC版</code>。由于这种场景存在代码没有改变，但状态发生改变的情况，所以我们使用tag来进行管理，这是简直是完美~</p>
</blockquote>
<h2 id="Tag标签准则"><a href="#Tag标签准则" class="headerlink" title="Tag标签准则"></a>Tag标签准则</h2><blockquote>
<p>tag是为了描述代码状态而存在的，状态也称为版本状态，比如Alpha版，Beta版，RC版，Test版，Debug版等等这取决于场景<br>tag内容应包含：升级说明(新增、优化、修复等)、兼容性、升级方式、日期、参与人员、</p>
</blockquote>
<h2 id="代码提交准则"><a href="#代码提交准则" class="headerlink" title="代码提交准则"></a>代码提交准则</h2><ol>
<li><p>项目中应该有日志文件，用于记录每次提交代码的改变</p>
</li>
<li><p>按照功能块提交代码，功能块大小自行划分，这样的目的减少review代码负担，</p>
</li>
<li><p>提交保证代码的干净度，不提交冗余代码</p>
</li>
<li><p>代码不应该跨天提交，若模块修改时间大于天，备注每日临时提交。因为你不能保证，第二天来电脑是否还正常。</p>
<h3 id="日志文件参考"><a href="#日志文件参考" class="headerlink" title="日志文件参考"></a>日志文件参考</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 版本 <span class="number">3.4</span>.9_Beta2</span><br><span class="line">### 日期 <span class="number">2020</span>-09-<span class="number">23</span></span><br><span class="line">### 特性</span><br><span class="line">- [F 修复] 【ID1000910】xxx</span><br><span class="line">- [U 更新]  xxx</span><br><span class="line">- [A 新增]  xxx</span><br></pre></td></tr></table></figure>
<p>Gitee地址：<a href="https://gitee.com/mathcoder23/dev-guide/blob/master/Git%E5%88%86%E6%94%AF%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%91%BD%E5%90%8D%E8%A7%84%E7%BA%A6.md">Git分支使用以及命名规约</a></p>
<h1 id="开发流程-假设已经开发到某一阶段"><a href="#开发流程-假设已经开发到某一阶段" class="headerlink" title="开发流程(假设已经开发到某一阶段)"></a>开发流程(假设已经开发到某一阶段)</h1><blockquote>
<p>在日常软件开发中，我们一般会经历这样的流程，<br>认领需求=》实现需求=》发布测试版=》BUG反馈=》处理BUG=》发布修复版本</p>
</blockquote>
<h2 id="认领需求-需求已精确到足够小"><a href="#认领需求-需求已精确到足够小" class="headerlink" title="认领需求(需求已精确到足够小)"></a>认领需求(需求已精确到足够小)</h2><blockquote>
<p>无论是线上还是线下的方式沟通交流需求后，</p>
</blockquote>
</li>
<li><p>研发人员对功能进行确认</p>
</li>
<li><p>基于现有代码(<code>版本号:3.1.1，分支:dev-3.1.x</code>)创建分支<code>dev-3.1.x-f1</code>，如果功能简单、人员较少没必要新建分支，直接在<code>dev-3.1.x</code>下开发</p>
<h2 id="实现需求"><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h2></li>
<li><p>在指定分支下开发</p>
<h2 id="发布测试版"><a href="#发布测试版" class="headerlink" title="发布测试版"></a>发布测试版</h2></li>
<li><p>合并代码到<code>dev-3.1.x</code>下</p>
</li>
<li><p>制作tag标签发布文档</p>
</li>
<li><p>创建tag <code>tag-dev-3.1.2</code></p>
</li>
<li><p>部署</p>
<h2 id="BUG反馈"><a href="#BUG反馈" class="headerlink" title="BUG反馈"></a>BUG反馈</h2></li>
<li><p>测试提交BUG到平台</p>
</li>
</ol>
<h2 id="处理BUG"><a href="#处理BUG" class="headerlink" title="处理BUG"></a>处理BUG</h2><ol>
<li>研发认领Bug单（假设多个暂停A、B、C）</li>
<li>基于<code>版本号:3.1.2，分支:dev-3.1.x</code>对bug进行修复。如果bug过于复杂处理时间久可以新建分支<code>dev-3.1.2-bugxxx</code></li>
<li>处理Bug单A</li>
<li>处理完成Bug单A，提交代码，并备注bugA标题以及id</li>
<li>处理Bug单B</li>
<li>处理完成Bug单B，提交代码，并备注bugB标题以及id</li>
<li>按照修复一个或多个Bug单为提交原则进行提交</li>
<li>处理完成所有Bug</li>
</ol>
<h2 id="发布修复版本"><a href="#发布修复版本" class="headerlink" title="发布修复版本"></a>发布修复版本</h2><ol>
<li>合并代码到<code>dev-3.1.x</code>下</li>
<li>制作tag标签发布文档</li>
<li>创建tag <code>tag-dev-3.1.2_beta2</code></li>
<li>部署</li>
</ol>
<p>按照以上步骤如此往复。代码将会越来越健壮</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>长期使用笔记本触控板请以中指为主</title>
    <url>/2021/07/27/2b92fb91f9f0.html</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote>
<p>最近在笔记本上连续写程序，加上对mac触控板的爱不释手，快捷操作，点击触感真的很良心。但是永久了发现食指痛的不行，所以不得不分析下原因</p>
</blockquote>
<h1 id="以食指为主使用触控板食指关节出现劳损"><a href="#以食指为主使用触控板食指关节出现劳损" class="headerlink" title="以食指为主使用触控板食指关节出现劳损"></a>以食指为主使用触控板食指关节出现劳损</h1><blockquote>
<p>声明，我不能确定我使用食指的方式是否符合规范，所以不排除因为我的食指使用不规范造成关节劳损的问题。当我使用触控板时，右手靠在桌上，当前手的食指第三关节将在最高点，在触控板上移动鼠标时，主要发力的地方有两处，1，整个手腕，2，食指的第三关节(从外向内数)，问题就在第二点当<code>长期性周期性</code>的这样，<code>第二发力点会出现劳损的情况</code>。</p>
</blockquote>
<h1 id="以中指为主使用触控板"><a href="#以中指为主使用触控板" class="headerlink" title="以中指为主使用触控板"></a>以中指为主使用触控板</h1><blockquote>
<p>由上了解发力点后，当你尝试使用中指，你会发现中指与触控板距离适中，而且在移动鼠标时，主要发力点只会有<code>手腕发力</code>，中指关节运动幅度很小，因此长期性周期性的使用，有比较良好的反应。</p>
</blockquote>
<h1 id="关于长期性周期性"><a href="#关于长期性周期性" class="headerlink" title="关于长期性周期性"></a>关于长期性周期性</h1><blockquote>
<p>简单来讲，作为长期性周期的行为都会有负担，因此良好的休息与活动是必要的，比如，上面说到的手腕、还有手一直弯曲，保持这种状态，都将出现问题，那你可能会说那我用食指经常休息就好，但其实不然，食指当对中指在触控板上使用但承受程度会弱很多，就如写程序一般、要稳定但长期的健壮的运行，必然要将一个个细节的风险降到最低。</p>
</blockquote>
<h1 id="关于删除键你会用小指吗"><a href="#关于删除键你会用小指吗" class="headerlink" title="关于删除键你会用小指吗"></a>关于删除键你会用小指吗</h1><blockquote>
<p>在刚开始学习程序时我做的第一件事不是天天码代码，而是天天练习打字，我就是这样一个人，<code>我喜欢磨刀</code>(但不考虑磨刀这个论点，这货牵扯太多)，可能你觉得打字和码代码练习不大，但也有相关性，因为代码是键盘敲出来的(不考虑辛勤但搬运工)，<code>我喜欢遵循和设计规范</code>，有这个毛病，所以删除键我使用小指，好处可能重定位速度、和准度效率高，另一个好处下面谈</p>
</blockquote>
<h1 id="关于触控板与弹奏"><a href="#关于触控板与弹奏" class="headerlink" title="关于触控板与弹奏"></a>关于触控板与弹奏</h1><blockquote>
<p> 我没谈过钢琴，但我体会过用双手在键盘、触控板上表达喜悦，敲代码就像弹奏一样，有节奏，但实质上连续敲但机会并不多，更多是为实现功能做各种各样的准备，主题中说触控板用中指为主，其实也中指移动，食指点击，就像弹奏美妙的音符一般！</p>
</blockquote>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>集成Nacos1.2.1和Dubbo2.7.6 消费者报错No provider available for the service xxx</title>
    <url>/2021/07/27/e5ad1c6dfe22.html</url>
    <content><![CDATA[<h1 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>都是用的目前最新的,Dubbo的生成者能正常的注册.但是消费者提示无法注入@Reference,原因是生产和消费者没有注明group信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Reference(version = &quot;1.0.0&quot;, group = &quot;dubbo&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(version = &quot;1.0.0&quot;, group = &quot;dubbo&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果没有group信息,dubbo-registry-nacos版本的bug.<br><code>我们如果要使用这个版本就需要加上group.在2.7.7应该解决了这个bug</code><br>bug参考:<a href="https://github.com/apache/dubbo/issues/6077">https://github.com/apache/dubbo/issues/6077</a></p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>预测周期数列理解LSTM输入输出</title>
    <url>/2021/07/27/372e83122421.html</url>
    <content><![CDATA[<p>这两天被LSTM搞的头大，作为深度学习只入门四天的我对各式各样的名词真心无力。但好在功夫不负有心人，终于初步理解了LSTM</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>以<code>周期数列</code>为例，学习LSTM的使用，并初步理解LSTM的输入与输出</li>
</ul>
<h3 id="LSTM应用场景"><a href="#LSTM应用场景" class="headerlink" title="LSTM应用场景"></a>LSTM应用场景</h3><p>数据涉及到序列的，并且序列数据有界。都可以以LSTM为核心来进行学习。</p>
<p><strong>怎样的数据涉及到序列</strong>，以本文的周期数列为例子，每一项，都与之前项有必然的链式关系，并且数据有界，一般的，但凡有存在链式关系的数据，都可以进行泛化预测。天气预报、语言对话(NLP)，温度预测，乃至股票预测都是可能的，但是这些都有一个非常非常重要的因素，那就是相关数据的分析，比如影响温度的因素是什么？所以从这一点来说，股票又是不可预测的。需要注意的是像如发散的无穷数列是很难使用LSTM预测的。因为如果预测样本不在拟合的范围内。此时预测的数据是很难的。</p>
<p>从一开始我一直想预测等差数列，但是效果太差，只有靠近样本中心，效果才会好，我一直以为是我对LSTM的理解用法有问题，但我今天在取快递的路上突然想到，如果训练数据都在一个边界内训练，要想预测边界外的数据理论上是不可能的，因为情况太多。因此我认为要想能够预测等差数列，必须要对数据定义一个边界，至于边界与真实数据怎么样的映射关系这是需要分析的，只有处理好了边界映射，训练的效果才会好。</p>
<p><strong>为什么LSTM处理序列数据那么强大</strong>，因为它有’记忆’,在内部设计有处理序列之间关系的算法。LSTM又叫长短期记忆(LSTM,long short-term memory)</p>
<h3 id="以最简单的周期数列开始"><a href="#以最简单的周期数列开始" class="headerlink" title="以最简单的周期数列开始"></a>以最简单的周期数列开始</h3><blockquote>
<p>下面我们将以最简单的周期数列开始，学习LSTM，现有<code>周期数列&#123;1,2,3,1,2,3&#125;</code> 预测后面的结果，当然这样的预测实际意义是不大的。案例的目的仅仅是以这数据为基础，方便理解LSTM工作原理，事实上，复杂的训练也是以这简单的数据为核心开始的。</p>
</blockquote>
<h3 id="训练数据输入与输出的处理"><a href="#训练数据输入与输出的处理" class="headerlink" title="训练数据输入与输出的处理"></a>训练数据输入与输出的处理</h3><h4 id="LSTM数据输入格式"><a href="#LSTM数据输入格式" class="headerlink" title="LSTM数据输入格式"></a>LSTM数据输入格式</h4><p>数据输入格式<code>(batch_size,timesteps,input_features)</code> 这是一个<code>3D张量</code>，这个输入也只能必须当且仅当是3D张量，不懂什么叫张量？如果是读过高中那就没问题，<code>计算机张量</code>和<code>数学向量</code>基本上是一回事，两者本质上是对信号的一种表达。如果LSTM作为第一层，训练数据必须为3D张量</p>
<blockquote>
<p><strong>timesteps</strong> 表示<code>序列长度</code>，打个比方，我们将周期数列转换为一批又一批的序列数据，LSTM在每次进行记忆的就是单个序列中每个特征值之间的联系。这里的特征值可以理解为周期数列的1,2,3,1,2,3。因为我们的周期数列长度为6，注意这个6不一定是序列长度，序列长度是你定义的，他应该大于1小于6。假设我们现在定义序列长度为2。那么根据周期数列{1,2,3,1,2,3}我们可以推出以下数据</p>
</blockquote>
<h3 id="手动转换周期数列为3D张量"><a href="#手动转换周期数列为3D张量" class="headerlink" title="手动转换周期数列为3D张量"></a>手动转换周期数列为3D张量</h3><p>对于周期数列 {1,2,3,1,2,3}一定存在这样的关系,我们从左边取<code>序列长度为2</code>数据有，这是一个滑动固定窗口的过程,注意高亮数据</p>
<table>
<thead>
<tr>
<th>原始数据</th>
<th>张量每一批(timesteps,input_features)</th>
<th>张量输出每一批</th>
</tr>
</thead>
<tbody><tr>
<td>{<code>1,2</code>,3,1,2,3}</td>
<td>[[1],[2]]</td>
<td>3</td>
</tr>
<tr>
<td>{1,<code>2,3</code>,1,2,3}</td>
<td>[[2],[3]]</td>
<td>1</td>
</tr>
<tr>
<td>{1,2,<code>3,1</code>,2,3}</td>
<td>[[3],[1]]</td>
<td>2</td>
</tr>
<tr>
<td>{1,2,3,<code>1,2</code>,3}</td>
<td>[[1],[2]]</td>
<td>3</td>
</tr>
</tbody></table>
<p><strong>注意表格原始数据列的高亮数据</strong>，这是LSTM序列的提取过程，每一批序列组合在一起，就形成了一个LSTM接受的3D张量，</p>
<p>你可以能会问，张量输入为啥是[[1],[2]],而不是[1,2]，原因在于LSTM明确要求传入input_features这个维度，意思是每一批序列是一个2D张量。如果是[1,2]将会是1D张量，参数不符合要求。肯定会报错。实质上因为我们比较简单，只有一个特征值，如果有多个特征值将会是这样:[[a,b,c],[a2,b2,c2]]这样的形式，此时input_features=3,千万要注意理解<strong>timesteps</strong>与<strong>input_features</strong>的维度大小</p>
<p>为啥张量输出每一批格式是3，二不是[3]，答案是都是可行的。这取决于你</p>
<p>如果将timesteps=3，原始数据转换方法同理，我们下面的代码都将以timesteps=2为基础来进行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对于周期数列 &#123;1,2,3,1,2,3&#125;，序列长度为2的LSTM 的标准输入的3D张量</span></span><br><span class="line"><span class="comment"># batch_size = 4，timesteps=2，input_features=1,</span></span><br><span class="line"><span class="comment"># shape：(4,2,1)</span></span><br><span class="line"><span class="comment"># 这里的batch_size顺序可以是打乱的因为记忆是对timesteps这个序列的维度进行的。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x_train = [</span><br><span class="line">  [[<span class="number">1</span>],[<span class="number">2</span>]],</span><br><span class="line">  [[<span class="number">2</span>],[<span class="number">3</span>]],</span><br><span class="line">  [[<span class="number">3</span>],[<span class="number">1</span>]],</span><br><span class="line">  [[<span class="number">1</span>],[<span class="number">2</span>]]</span><br><span class="line">]</span><br><span class="line">y_train = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 将上面数组的转换为张量</span></span><br><span class="line">x_train = np.asarray(x_train)</span><br><span class="line">y_train = np.asarray(y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x_train shape:&#x27;</span>,x_train.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y_train shape:&#x27;</span>,y_train.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x_train&#x27;</span>,x_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y_train&#x27;</span>,y_train)</span><br><span class="line"><span class="comment">#待预测数据</span></span><br><span class="line">x_test = np.asarray([[[<span class="number">2</span>],[<span class="number">3</span>]]])</span><br></pre></td></tr></table></figure>



<h3 id="构建网络层并训练并预测"><a href="#构建网络层并训练并预测" class="headerlink" title="构建网络层并训练并预测"></a>构建网络层并训练并预测</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 构建网络层</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM, Dropout, Dense, Embedding</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(LSTM(<span class="number">100</span>,input_shape=(<span class="number">2</span>,<span class="number">1</span>), return_sequences=<span class="literal">False</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mse&#x27;</span>, optimizer=<span class="string">&#x27;adam&#x27;</span>)</span><br><span class="line"><span class="comment">#网络层参数打印</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练</span></span><br><span class="line">model.fit(x_train,y_train,epochs=<span class="number">500</span>,verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#预测</span></span><br><span class="line"><span class="built_in">print</span>(model.predict(x_test))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># Epoch 497/500</span></span><br><span class="line"><span class="comment">#  - 0s - loss: 0.0014</span></span><br><span class="line"><span class="comment"># Epoch 498/500</span></span><br><span class="line"><span class="comment">#  - 0s - loss: 0.0013</span></span><br><span class="line"><span class="comment"># Epoch 499/500</span></span><br><span class="line"><span class="comment">#  - 0s - loss: 0.0012</span></span><br><span class="line"><span class="comment"># Epoch 500/500</span></span><br><span class="line"><span class="comment">#  - 0s - loss: 0.0012</span></span><br><span class="line"><span class="comment"># [[1.0567069]]</span></span><br></pre></td></tr></table></figure>

<p>LSTM参数中100含义，100为隐藏层神经元数量。units=100，因为我们数据量比较小，所以我将隐藏层调的比较高，这样数据会更拟合。隐藏层的作用是一个权重计算，是将输入与隐藏的矩阵进行乘法。因此隐藏层值越大数据就会越丰富，同样算力消耗也大，注意隐藏层数量units与timesteps不是同一个含义。如果还是不理解隐藏层，需要了解Dense。</p>
<p>return_sequences=False表示返回序列的输出，return_sequences=True表示返回整个序列</p>
<p>至此，我们应该大概知道了LSTM的参数，以及训练数据的转换，以及LSTM对输入数据的格式要求。</p>
<p>但这只是LSTM的开始，其内部的计算原理纷繁复杂，下期将会同样以周期函数为引子深入理解LSTM工作原理。名称暂定为 <code>预测周期数列深入理解LSTM工作原理</code></p>
<h3 id="版权所有"><a href="#版权所有" class="headerlink" title="版权所有"></a>版权所有</h3><hr>
<blockquote>
<p>作者：简书@mt23，CSDN@mt23</p>
<p>出处：</p>
<p><a href="https://www.jianshu.com/u/71f8075c4151">https://www.jianshu.com/u/71f8075c4151</a></p>
<p><a href="https://blog.csdn.net/mathcoder23">https://blog.csdn.net/mathcoder23</a></p>
<p>发布时间：2019-09-09</p>
<p>版权所有，欢迎保留原文链接进行转载</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始上传开源项目到Maven中央仓库</title>
    <url>/2021/07/26/3fc82a54842a.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>第一次比较正式的开源的自己的项目，心里还是很激动的，于是迫不及待的想要上传到Maven中央仓库，方便使用者引用。本教程将会从零开始讲解，但是由于时效的变化，在每个过程还是需要读者本身自己思考如何处理遇到问题。</p>
<h1 id="简单讲解一下上传到Maven中央仓库流程"><a href="#简单讲解一下上传到Maven中央仓库流程" class="headerlink" title="简单讲解一下上传到Maven中央仓库流程"></a>简单讲解一下上传到Maven中央仓库流程</h1><ol>
<li>首先我们需要创建一个<code>Sonatype JIRA</code>的账号，这个平台可以理解为一套工单跟踪系统，它和Maven仓库可以说没有关系，也可以有关系。</li>
<li>创建好上述账号后，我们需要创建一个工单，此工单的作用便是新建一个开源的Maven工程</li>
<li>工单创建好后后台管理员会审核你提交的信息，在审核以及各种准备都完成后，你便可以登录给你分配的<code>nexus repository manager</code>平台管理你发布的maven归档。这里需要注意，这并不是中央仓库，这是给你分配的一个maven私服之一，当然最终会同步到中央仓库。</li>
<li>配置我们的开源项目并部署到分配的maven私服。</li>
<li>在私服访问归档是实时的，但是同步到中央仓库是需要时间的。</li>
<li>好了，大体流程就这样，下面我们就一步步来探索吧。</li>
</ol>
<h1 id="Maven-sonatype-账号准备"><a href="#Maven-sonatype-账号准备" class="headerlink" title="Maven(sonatype)账号准备"></a>Maven(sonatype)账号准备</h1><h2 id="1-注册Sonatype-JIRA账号"><a href="#1-注册Sonatype-JIRA账号" class="headerlink" title="1.注册Sonatype JIRA账号"></a>1.注册Sonatype JIRA账号</h2><p><a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a>这个连接便是注册地址，下方是图片</p>
<img src="/2021/07/26/3fc82a54842a/1627294931396.png" class="">
<p>按照提示注册即可，没有什么需要说的，唯一需要说的就是账号密码记录清楚，毕竟这个不常用。注册完成后就登录</p>
<h2 id="2-创建工单"><a href="#2-创建工单" class="headerlink" title="2.创建工单"></a>2.创建工单</h2><blockquote>
<p>点击下方的Create按钮，界面风格可能在以后有变动，但是大体意思很明确，那就是找到创建工单的地方</p>
</blockquote>
<img src="/2021/07/26/3fc82a54842a/1627294931396.png" class="">

<blockquote>
<p>Proejct选择(Community Support - Open Source Project Repository Hosting (OSSRH)),这里面选项很多，我们选的这个选项意思就是(<code>社区支持的开源项目托管库OSSRH-我们就可以理解为这就是Maven私服仓库</code>)</p>
</blockquote>
<img src="/2021/07/26/3fc82a54842a/1627294931397.png" class="">

<blockquote>
<p>根据下方的表格提示填入内容，这里说明一下</p>
<ul>
<li>Summary就是你的项目名</li>
<li>Description选填</li>
<li><code>GroupId(这个是最重要的，后台管理员审核的也是这个，往下看会专门介绍GroupId如何写,当然这个在创建成功后也可以改)</code></li>
<li>Project URL 你的项目官网或者git地址都可以的</li>
<li>SCM url 你的开源仓库地址，比如github，gitee等等</li>
<li>username 你的牛逼名称</li>
</ul>
</blockquote>
<img src="/2021/07/26/3fc82a54842a/1627294931398.png" class="">
<h2 id="3-验证GroupId"><a href="#3-验证GroupId" class="headerlink" title="3.验证GroupId"></a>3.验证GroupId</h2><p>由于我都已经把所有流程创建好了，所以我只能根据工单的变化日志来写教程了。最开始我的GroupId是<code>org.pettyfox.timeline</code></p>
<img src="/2021/07/26/3fc82a54842a/1627294931401.png" class="">
<p>上图大概意思是说你是否拥有<code>pettyfox.org</code>,本来想去买个.org域名的但是遗憾的发现，目前国内买不了，因此我便更改GroupId为<code>com.pettyfox.timeline</code>，在之前我是拥有<code>pettyfox.com</code>域名的，</p>
<h3 id="基于域名验证"><a href="#基于域名验证" class="headerlink" title="基于域名验证"></a>基于域名验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Do you own the domain pettyfox.org? If so, please verify ownership via one of the following methods:</span><br><span class="line"></span><br><span class="line">Add a TXT record to your DNS referencing this JIRA ticket: OSSRH-71087 (Fastest) https://central.sonatype.org/faq/how-to-set-txt-record/</span><br><span class="line">Setup a redirect to your https://github.com/mathcoder23 page (if it does not already exist)</span><br></pre></td></tr></table></figure>
<p>大体意思就是在域名的根解析中加一个TXT类型的解析，并且内容是<code>OSSRH-71087</code>这里你的根据你自己的<code>OSSRH-xxx</code>来更改，这个域名操作应该很简单吧，我就不贴步骤了。这样做的目的很简单，就验证你是否是这个域名的拥有者。</p>
<blockquote>
<p>关于域名与GroupId的关系：如果我们拥有域名 比如<code>opensource.com</code>，那么GroupId必须是<code>com.opensource</code>开头，后面怎么写不重要.</p>
</blockquote>
<h3 id="基于开源仓库的验证"><a href="#基于开源仓库的验证" class="headerlink" title="基于开源仓库的验证"></a>基于开源仓库的验证</h3><p>有时候我们没有域名，并且也不想去买，那么我们可以通过开源仓库的平台来验证，比如GitHub、GitLab、Gitee、Bitbucket、SourceForge<br>下面是官方的引导教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If you do not own this domain, please read: https://central.sonatype.org/publish/requirements/coordinates/</span><br><span class="line"></span><br><span class="line">You may also choose a Group ID that reflects your project hosting, in this case, something like io.github.mathcoder23</span><br><span class="line">Edit your Group Id and create public repo called https://github.com/mathcoder23/OSSRH-71087</span><br><span class="line">https://central.sonatype.org/publish/requirements/coordinates/#supported-code-hosting-services-for-personal-groupid</span><br><span class="line"></span><br><span class="line">com.github Group IDs are invalid now but io.github may be used instead. Please read the following for more info: https://central.sonatype.org/changelog/#2021-04-01-comgithub-is-not-supported-anymore-as-a-valid-coordinate</span><br><span class="line"></span><br><span class="line">If you decide to change your Group ID, please edit this ticket and update the Group ID field.</span><br></pre></td></tr></table></figure>
<p>首先你可以进入<a href="https://central.sonatype.org/publish/requirements/coordinates/"> https://central.sonatype.org/publish/requirements/coordinates/</a>查看详细的步骤。<br>下面是GroupId与项目名称的对应关系，安装对应的教程来操作即可</p>
<img src="/2021/07/26/3fc82a54842a/1627294931402.png" class="">
<p>最关键的一步应该就是创建一个公开仓库名为<code>OSSRH-xxx</code>或者在github的pages网页中创建<code>OSSRH-xxx</code></p>
<blockquote>
<p>GroupId的验证基本上就是这样，其中最关键的还是根据管理员推送的GroupId验证指导来，仔细阅读他说的内容即可，这才是最好的方案，因为这些流程随时可能会更新、废弃等等。</p>
</blockquote>
<h2 id="4-流转工单状态"><a href="#4-流转工单状态" class="headerlink" title="4.流转工单状态"></a>4.流转工单状态</h2><p>这一步的作用就是告诉管理员我们的准备做好了，你帮我处理一下。<br>我这里已经是RESOLVED了，你们的应该是<code>OPEN</code>,我忘记在哪里点了，反正在红框中找到某个按钮将状态改为：<code>WAITING FOR RESPOSE</code>即等待响应</p>
<img src="/2021/07/26/3fc82a54842a/1627294931402.png" class="">

<p>变更OPEN为等待响应状态</p>
<img src="/2021/07/26/3fc82a54842a/1627294931403.png" class="">
<h2 id="5-工单处理完成"><a href="#5-工单处理完成" class="headerlink" title="5.工单处理完成"></a>5.工单处理完成</h2><p>如果一切顺利，大约几分钟就会有结果，结果如下，最终的工单状态会变成<code>RESOLVED</code></p>
<img src="/2021/07/26/3fc82a54842a/1627294931403.png" class="">
<p>第一行的变更组名不过在意，下方的消息就是告诉我已经验证我是<code>com.pettyfox的拥有者</code>,<br>告诉我的Maven私服管理地址是<a href="https://s01.oss.sonatype.org/">https://s01.oss.sonatype.org</a>这里需要注意的是你的地址到底是哪个需要根据评论的内容来，因为在以前是<code>oss.sonatype.org</code>，我的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.pettyfox.timeline has been prepared, now user(s) pettyfox23 can:</span><br><span class="line">Publish snapshot and release artifacts to s01.oss.sonatype.org</span><br><span class="line">Have a look at this section of our official guide for deployment instructions:</span><br><span class="line">https://central.sonatype.org/publish/publish-guide/#deployment</span><br><span class="line"></span><br><span class="line">Please comment on this ticket when you&#x27;ve released your first component(s), so we can activate the sync to Maven Central.</span><br><span class="line">Depending on your build configuration, this might happen automatically. If not, you can follow the steps in this section of our guide:</span><br><span class="line">https://central.sonatype.org/publish/release/</span><br><span class="line"></span><br><span class="line">######</span><br><span class="line"></span><br><span class="line">As part of our efforts to improve the security and quality posture of the open source supply chain,</span><br><span class="line">we plan to enable additional scanning of dependencies for security alerts soon. Since you&#x27;re already</span><br><span class="line">hosting your source code in Github, you can get insights into code and dependency quality today by enabling</span><br><span class="line">the free Muse code quality scan. This will provide feedback right in your pull requests.</span><br><span class="line">More information can be found at https://www.sonatype.com/product/musedev-maven</span><br><span class="line"></span><br><span class="line">######</span><br></pre></td></tr></table></figure>
<p>上面的文字就是告诉我们Maven仓库地址，以及快照地址、正式版地址<br><code>这里要注意一个坑，Please comment on this ticket when you&#39;ve released your first component(s), so we can activate the sync to Maven Central.这里说了一句你必须评论一次(最下方Comment发一条内容)，才能激活组件同步到中央仓库</code></p>
<h2 id="6-登录nexus-repository-manager"><a href="#6-登录nexus-repository-manager" class="headerlink" title="6.登录nexus repository manager"></a>6.登录nexus repository manager</h2><p>由上述官方回复的内容可知，我们的<code>nexus repository manager</code>地址是<a href="https://s01.oss.sonatype.org/">https://s01.oss.sonatype.org</a>，并且账号密码与<code>Sonatype JIRA</code>的账号密码相同<br>登录后页面如下</p>
<img src="/2021/07/26/3fc82a54842a/1627294931404.png" class="">
<p>为了后续方便maven打包上传验证，我们申请基于Token的方式验证</p>
<h2 id="7-nexus-repository-manager平台生成User-Token"><a href="#7-nexus-repository-manager平台生成User-Token" class="headerlink" title="7.nexus repository manager平台生成User Token"></a>7.nexus repository manager平台生成User Token</h2><p><code>此步骤可以在后面打包上传时来完成，可以跳过</code><br>在后台右上角点击用户名后，点击Profile</p>
<img src="/2021/07/26/3fc82a54842a/1627294931404.png" class="">
<p> 选择下方下拉框，选中User Token</p>
<img src="/2021/07/26/3fc82a54842a/1627294931404.png" class="">
<p>按照提示创建一个User Token即可，并且保存</p>
<img src="/2021/07/26/3fc82a54842a/1627294931405.png" class="">
<p><code>现在关于账号的准备我们已经全部完成</code></p>
<h1 id="Maven项目打包并上传流程"><a href="#Maven项目打包并上传流程" class="headerlink" title="Maven项目打包并上传流程"></a>Maven项目打包并上传流程</h1><blockquote>
<p>这里说明一下，其实官方引导的文档已经说的很清楚了下面我贴一下地址，可以参考</p>
</blockquote>
<ul>
<li><a href="https://central.sonatype.org/publish/publish-maven/">https://central.sonatype.org/publish/publish-maven/</a></li>
</ul>
<h2 id="打包简要配置说明"><a href="#打包简要配置说明" class="headerlink" title="打包简要配置说明"></a>打包简要配置说明</h2><ol>
<li>在Maven中完善项目基本介绍</li>
<li>配置开发者信息</li>
<li>配置scm开源代码信息</li>
<li>配置分发仓库地址</li>
<li>配置java源码生成插件</li>
<li>配置java-doc生成插件</li>
<li>配置gpg jar包签名插件(作用是保证jar包是你编译的，并且不会被别人篡改)</li>
<li>配置ossrh登录账号</li>
</ol>
<h2 id="1-工程pom-xml配置"><a href="#1-工程pom-xml配置" class="headerlink" title="1.工程pom.xml配置"></a>1.工程pom.xml配置</h2><p>一下的pom是指工程下的pom.xml</p>
<h3 id="pom项目基本信息"><a href="#pom项目基本信息" class="headerlink" title="pom项目基本信息"></a>pom项目基本信息</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>timeline-mq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A message queue for timeline. core is redis stream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/mathcoder23/timeline-mq<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Petty Fox<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>mathcoder23@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/mathcoder23<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/mathcoder23/timeline-mq<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connection</span>&gt;</span>https://github.com/mathcoder23/timeline-mq.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>https://github.com/mathcoder23/timeline-mq<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这一步配置按照理解填写即可</p>
</blockquote>
<h3 id="maven中snapshot与release版区别"><a href="#maven中snapshot与release版区别" class="headerlink" title="maven中snapshot与release版区别"></a>maven中snapshot与release版区别</h3><blockquote>
<p>在maven版本管理中，将jar包划分为两个重要的版本一个是快照版、一个是正式版，快照版意味着可能频繁的更新、变动，因此maven同步时每次都要去拉</p>
</blockquote>
<h3 id="配置分发管理"><a href="#配置分发管理" class="headerlink" title="配置分发管理"></a>配置分发管理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>这里需要注意一下，你的私服地址与我的是否一样很重要，你需要去看工单中官方给你回复的指导文档中地址是多少才是多少</code></p>
<img src="/2021/07/26/3fc82a54842a/1627294931405.png" class="">
<img src="/2021/07/26/3fc82a54842a/1627294931406.png" class="">
<h3 id="pom打包插件配置"><a href="#pom打包插件配置" class="headerlink" title="pom打包插件配置"></a>pom打包插件配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">tags</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">name</span>&gt;</span>date<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">nexusUrl</span>&gt;</span>https://s01.oss.sonatype.org/<span class="tag">&lt;/<span class="name">nexusUrl</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">autoReleaseAfterClose</span>&gt;</span>false<span class="tag">&lt;/<span class="name">autoReleaseAfterClose</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>建议上述的pom代码不要不思考的复制粘贴，一定要想它的作用是什么，跟你的环境是否一致</code></p>
<h2 id="2-Gpg-签名工具安装与使用"><a href="#2-Gpg-签名工具安装与使用" class="headerlink" title="2.Gpg 签名工具安装与使用"></a>2.Gpg 签名工具安装与使用</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.gnupg.org/download/">https://www.gnupg.org/download/</a>安装提示下载即可，然后自行安装。安装完成后重启命令行，应该便会有<code>gpg命令</code></p>
<h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h3><p>指定命令 <code>gpg --gen-key</code>，按照提示填入相应信息</p>
<blockquote>
<p>maven-gpg-plugin插件应该会读取Gpg的密钥信息</p>
</blockquote>
<h2 id="3-配置-m2-setting-xml"><a href="#3-配置-m2-setting-xml" class="headerlink" title="3.配置~/.m2/setting.xml"></a>3.配置~/.m2/setting.xml</h2><p>下面配置用于在打包后上传的认证<br>这里的账号密码可以是上述教程生成的<code>User Token</code>也可以是登录密码,<br>需要注意server下的id必须与pom.xml中定义的一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">username</span>&gt;</span>XRLLzbbOaaN<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-打包-部署"><a href="#4-打包-部署" class="headerlink" title="4.打包-部署"></a>4.打包-部署</h2><p><code>mvn clean package</code><br>执行此命令后，就会开始打包，在过程中会提示输入Gpg的密钥密码。</p>
<h1 id="最后流程"><a href="#最后流程" class="headerlink" title="最后流程"></a>最后流程</h1><p>完成打包命令后，我们登录<a href="https://s01.oss.sonatype.org/">https://s01.oss.sonatype.org/</a></p>
<p>一般我们发布的包，在<code>Staging Repositories</code>，需要经历<code>Close</code>检测，然后在<code>Release</code>,但是有些会自动完成的。假如你发现<code>Staging Repositories</code>有你提交的包，那么你需要<code>Close</code>一下，然后<code>Release</code>，否则你直接在此仓库中搜索就可以搜索到的。<br>如下图</p>
<img src="/2021/07/26/3fc82a54842a/1627294931407.png" class="">
<p>上述完成后我们搜索组件</p>
<img src="/2021/07/26/3fc82a54842a/1627294931407.png" class="">
<p>至此，我们便成功了</p>
<h1 id="坑总结"><a href="#坑总结" class="headerlink" title="坑总结"></a>坑总结</h1><h2 id="中央仓库无法找到我的包"><a href="#中央仓库无法找到我的包" class="headerlink" title="中央仓库无法找到我的包"></a>中央仓库无法找到我的包</h2><p>看下方红框的内容，意思是你需要评论一下这个工单，才会激活将私仓同步到中央仓库的行为。</p>
<img src="/2021/07/26/3fc82a54842a/1627294931408.png" class="">

<img src="/2021/07/26/3fc82a54842a/1627294931408.png" class="">
<p>最后我们点击左下角的<code>Comment</code>评论过后，高兴的收到成功的回复了。大概意思就是说，已经给我开启了同步任务，在<code>https://repo1.maven.org/maven2/</code>可以拉到组件的时间通常在半个小时，在<code>https://search.maven.org </code>可搜索到通常在4个小时。</p>
<h2 id="https-oss-sonatype-org与https-s01-oss-sonatype-org"><a href="#https-oss-sonatype-org与https-s01-oss-sonatype-org" class="headerlink" title="https://oss.sonatype.org与https://s01.oss.sonatype.org"></a><a href="https://oss.sonatype.org与https//s01.oss.sonatype.org">https://oss.sonatype.org与https://s01.oss.sonatype.org</a></h2><p>在以前的一下教程中，是使用oss这个二级域名，但是2021年二月开始，使用s01这个三级域名<br><code>从这个三级域名来看，后面不保证不会出现s02、s03这样的地址所以自己看自己对应的文档才是最重要的</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OSSRH Usage Notes⚓︎</span><br><span class="line">Accessing Repositories⚓︎</span><br><span class="line">The following repositories allow you to access your components in OSSRH directly. Users will simply get your components directly via the Central Repository, but for committers and other collaborators on your project this list might be useful.</span><br><span class="line"></span><br><span class="line">Repository URL for snapshot deployment and download access</span><br><span class="line">https://s01.oss.sonatype.org/content/repositories/snapshots/</span><br><span class="line"></span><br><span class="line">Repository URL for release deployment, no download access!</span><br><span class="line"></span><br><span class="line">https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</span><br><span class="line">Note: As of February 2021, all new projects began being provisioned on https://s01.oss.sonatype.org/. If your project is not provisioned on https://s01.oss.sonatype.org/, you will want to use the legacy host https://oss.sonatype.org/.</span><br></pre></td></tr></table></figure>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><blockquote>
<p>本教程只能给你一些在流程、注意事项的引导，由于文档的变化与发展，任何时候，我们应该将官方文档作为首要参考，其他的博客内容包含本博客应该是次要参考。sonatype回复的指导流程已经非常详细了。认真理解表达的内容也是避坑的途径。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
